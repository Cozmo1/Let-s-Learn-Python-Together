{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial Rounded MT Bold;}{\f1\fnil\fcharset0 Arial Narrow;}{\f2\fnil\fcharset0 Calibri;}{\f3\fswiss\fprq2\fcharset0 Arial Narrow;}{\f4\fswiss\fprq2\fcharset0 Arial Rounded MT Bold;}{\f5\froman\fprq2\fcharset0 Times New Roman;}}
{\colortbl ;\red0\green0\blue255;\red255\green255\blue0;\red255\green0\blue0;\red192\green192\blue192;\red0\green0\blue0;\red0\green255\blue0;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sl240\slmult1\f0\fs24\lang9\par

\pard\sl360\slmult1\qc\b\fs32 "Python Programmer's Glossary Bible"\par

\pard\sl240\slmult1\qc\b0\fs22 By Joseph C. Richardson\par
\fs24\par

\pard\widctlpar\qj\f1\lang4105 Hello and welcome to the knowledge of programming, with Python. Python is an object oriented programming language, such as C++. Python\rquote s object oriented programming language makes Python very easy to understand, especially if you are coming from another type of computer programming language like C++; Python and C++ are very similar to each other. And as a matter of fact, Python derived from C++. However, with object oriented programming languages, there are no line numbers to type and there are no such things as \lquote gosubroutine\rquote  or \lquote goto\rquote  commands. Instead, Python uses \lquote functions\rquote  to call for subroutines. Functions can also do much more than simply call for subroutines; we will get into functions later. Python is very picky about how you place your programming statements. Python executes/runs its programs from the top of the programming list, downward. If you don\rquote t have some program statements on the right line of the program list, then Python will bypass those commands, or even execute them at the wrong time. It\rquote s very important on how you type your Python programs. One other thing Python is very, very picky about, with Python programming it is imperative to properly \lquote indent\rquote  your code; you may need some practice to get comfortable with how to properly indent your code, without creating indentation errors and not knowing why. To remedy such unwanted indentation errors from occurring, simply press the \lquote ENTER\rquote  key after each line of code you type. The curser will automatically indent for you on the next line; all you do is type your code and let the curser do the indents for you each time you press the \lquote ENTER\rquote  key. Note: all indentations must be exactly in-line, or an \lquote unexpected indent syntax error\rquote  dialog box will occur. See example below:\par

\pard\widctlpar\f0\par

\pard\widctlpar\qc\f2\fs22\lang9{\pict{\*\picprop{\sp{\sn wzDescription}{\sv Image}}{\sp{\sn posv}{\sv 1}}
}\pngblip\picw5292\pich4022\picwgoal3000\pichgoal2280 
89504e470d0a1a0a0000000d49484452000000c80000009808020000002eb4313e000000017352
474200aece1ce90000000467414d410000b18f0bfc6105000000097048597300000ec300000ec3
01c76fa86400000b4149444154785eed9d7d6c14c71987f71c4c03b8384aa400762245e44c72c1
56858cacda6e831511093b85b855057fd1a495ea0b11956d21f2d534b60b09b4a8b25d4549ed54
ca077fd5aa1a13b7672a1082a6b6230b174536b8c5d728520281488902e523c2c1d7777666e7d6
b77b7b6b6b5fb83b7e8f4ec7ccecccec897bee7d67f7f6bca1152b561800048d10ebecd9b3aa06
401094949414a822008102b1000b100bb000b1000b100bb0e07554d8d1d1a14a69a8abab5bb76e
9daa006041478506899548437b7bbb2a39909be8f9e8d1a3b205000d499539151e3b764c3e4b64
635b5b9b7c46c402ae64164baa43cf122a935ea150877c68d5409e110a85c6c6c654c50635d226
55498fdf88250bb25c574709b04e36525916dc198cd28b30890eaa260e92bb2158f774eb70fcf8
f1eadaefa5b845556aa44daaeec1fcd65804c96518edf4507527535d354653cc2a77a9921f624d
464dd794aaf860aefd812f48a0c26fdd4ecfae550fe6b0c692059d01e9618f551d1d21dd2dc9d4
a9e19a87ca6439dcdc5c2f4b2067a8acac1c19faa78c5b325651951ad5664ffcaeb108d7aca773
a22e24a96f6c1a6e79a23baeaa46bcbbd696a7287dd5d236f39f6e95ca44836869e835865bca54
569b9d4ec52466373d832b625b345a6b8eb197e5040aebc5243bc83ad068b7e6649520632ad427
1464e2739e5fa096f676831eaa3e0b910e099511296559b9d12ad2bfd66651d425676ad38d72a8
7c96889116c9b9ac2952cb6a9878697a4297fd0189cc803e93a0c4572ad4114b4255ca7a94fbf4
c325562509370f89b770a2c10c0f14c37afbcd3031d83fd1b55325c71a55a2adc6c46967085221
8bc298a4be276634841a8c588f2dbb6a317463cde6c7c2aaa8cbf1d3134653a3ec116e7eb169f8
d494599ed51924d11950e744b5211373586379653defc3c370f3db5d35a651f53bbb267677c7e3
ddbb277cbe9394b94821618c0a7ee086615f57e99ce8d3ad39442c2a2412e2bca8844c6a6b4be8
474a60130c765b2ba0f8dffad43a3efcd866a36fdfbe3ec36f84d04700620ed9341815aa51d4b2
d648fe09af2a3754cc246577f75ad10b3870aed6e7e4d61c2216612f53dc923951d59dd4af3a45
0b7041594b796ca8d934891250796f6ff98bb2960673d92f17ef14e30c510c3d71aa5c442c11c1
cc2c2a825f4372f16ef63749bba017d4f798795950d6b779ca9e4cc12cd6ae5d6bb74a22dda24d
aa9e9e0c5f42d7515c126b7381feca997cd2d990b6bbc42a4f68c9d4df985c0a81fc23f397d0d4
491e064abda84acf72eb3ca195120ec0f29dcc4785d44906247a6ea39554224171cb4c246e6744
33609e41a204f4b6671a0479017ea5038207bfd2015c402cc002c4022c402cc002c4022c402cc0
02c4022c402cc002c4022c402cc002c4022c402cc002c4022c402cc002c4022c402cc002c4022c
402cc002c4022c402cc002c4022c402cc002c4022c402cc002c4022c402cc002c4022c402cc002
c4022c402cc002c4022cb0ff7dac6b172f7c7a38767e74e8f2994f3e1f1d52ad86717755ed92d2
7b9755d5deb3be61e1d262d50af28292921246b148a9b1577e49562dbafabfe50b43771686962e
08159a7f0b773a615cfc26f1e574e2dcb5c4d545df26b72a5f78197ae50d8c62fdfbad3f8cbffa
db65d397562d2e58e4996fafce18a7afcc9c2f2caad8fecc834f3ea55a412ec322960c54e7defb
d3778a0aee9201ca075f4c273ebc34b37cd31684ae3c2078b1c8aac35b1f9f899ffc6ef16dbea5
52507efce0c2f582f0eaf5fb0fc0ad9c26f8bf414ab16a7e5611348406d2709a4435819c2548b1
685d4519707e5649a45b34094da59a406e129858940469b54eeb2a6d55a8a878c9ab7fb9adac5c
d5d3401da81b7596551a4e93d05434a16c01b948606251fea26340fb6a7df1de3717aca9f1764b
5a45dda8b36a320c9a84a64242cc6982118ba2cba78763ab16cf9aedebee9712972e868a96a673
cb8a554ba91b7556ad2634154d88a095bb0423963c0b9a72beeafad4c4e5ed3f4ae796dd2aea46
9dd506139a8a26a469551de41ac188757e7468f94297157b3ab7bcad92d08434adaa805c2318b1
2e9ff9e4ce3487824eb7fc5845d08434adaa642f83d1504d97c70d1293387b528bcf7b79fadf8b
64aefd832718b13e1f1d5aba20ed398614b7fc5845d084f62fadf391fa9efcbd6d633062116902
96c2ee961fab08ef092dec1f4d5d360b5df216e5f64f2eb59b986142f78e77d5982db346d922c9
ac5126ba251a15b7401f692dd37bf1e8dcaf1a92987bf4f582ed635376e11c4b2d29afea261098
5859c648eb64a3b82563ac69a4759ff50ec8bb964f758eefa2fff0fa9e5885d834b8afb5c2ba1f
7e7254af75c3e99451b2a5b7c9bcfd794f4f0f7535aa3ba712c32de21e8cae9dc76933d1685877
e177c5fd053bc73a77e1184b8170d6abba290426d67442155cb1afab744ed46b7957bc27cc4475
e74ed395fac62663fc3fe20d18ecef357ac5dda0cb5a474626a7c4b69d9de30d217af36457c2cf
286ab1baa5e2de79f30fcc7757cce981ebae9d639dbb209c636f3ec188757755edc56fd28a90b2
5ab7afb73cdca209695a550906f12196c808157ea0829e2b1ef0fe58a78ef2644e9de7c70dd845
000423d692d27bbf4c13619cc780296bf9746ed18434adaaa4a52c526d7d70c587d903d1b3efaf
f68fb3cc2a31c3ca7a9453648778d72e2b583847395b349e9d33bc3c27ae633df69e5d0423d6b2
aada73d75cc4725a25dbfdb84513d2b4aa929670cbaf683d44a92114ea373c734db8e59d4e8316
b4026192b982a114622644a55675c5e44f687359abd1f98e5c9ea48e122dc3b438335b4403a51f
bd4c76ebac5b32bc3c27ae639dbb70c5feaa6e0ec15c8f75ede285038facf97ee115fbc9f77456
693c3a5c9d31de9f5efcf8911337f0c22c3a98da1599ba89ebddfc21b0ebb1e8edbf677dc3e92b
33aa6e727bf3af3dac22ec718b3aab56139a0a3fb2c86902bb825406adca82cbfa02875051f1e2
bd6f7eddfd92ab551a8a5b64d595e77e9ab8a4be72fe623a3136b3e4c6862b1024415e414a1254
6c7fe6c34b337a114fa2a48b5576acb8a5aca2e134094d05ab729ac0c4221e7cf2a9e59bb67c70
e1fabc4f41d1401a4e93e0e73ab94e906211952fbc5c105e3d3fb7a455349c26514d206709582c
ca5febf71fb86be396f7bfba4e4b25d5ea03ea4c4368207ea2931fe007ab2078587eb0aaa1e3c4
31fcc4fe9684572c89bc1c1e7f14e496e24688056e41823c8f05801d8805588058800588055880
588005880558805880058805588058800588055880588005880558805880058805588058800588
055880588005880558805880058805588058800588055880588005f1bbc2c9c949550320082291
082216600162011620166001620116201660016201162016600162011620166001620116f0954e
60dcb1f73355ca3bbe7a6e852af923128940acc020b1fef58bfb96152d50f57ca1744f7c1e6221
150649fe59356f201660016201162016600162011620568e70685b6971a17c6c7a4ddf42fce0b3
c50fbff191281d692e2c6d3e68366605102b07f8f8b5874b7f6cecbf307d463c2637be1b4975e8
d0b6adc6c099ee0daa9a0540acec277ee85da3fdc4eb8fa86af8e73dbfab7cebc01155250e3e4b
da65935504c4ca7a3e8a0d8caebe7fa5aa0956366cacfae3df0fa9da40f4957052bb6c0162e528
d5e1fb6561646c7464e0a05e75650b102beb59b92a629cfcafb94257cc8a61d5ed270622cfff4c
2ee1b3078895fd6cd8b6c7685fb3cd5a54c5df88ee30f6ecb0e5be0dbff9f3eaf6e8ef3f56d5ac
0062e500f73dfd8fa13d27b7aad30d91811f4ebef774586d933cfafafe8776d43e9a456ee1ea86
c0b863ef67679e9ffd7ee705b8ba016411100bb000b1000b100bb080c57b60e09a770dae79072c
e0a8107001b1000b100bb000b1000b100bb000b1000b100bb000b1000b100bb020cebcab220041
6118ff07f85b8dc485f3b4600000000049454e44ae426082
}\par
\par

\pard\widctlpar\qj\f1\fs24\lang1033 Here are some examples of line-indentations in Python, which always proceeds right after the use of a colon (:). For example, consider the following with yellow highlighted colons (:) showing where they are.\par
\par

\pard\sl240\slmult1\cf1\lang9 for key,value in dictionary_list.items()\highlight2 :\highlight0\par
    print(key,value[0])\par
\par

\pard\widctlpar\qj def my_second_function()\highlight2 :\highlight0\par
    print('My second function.')\par
\par

\pard\widctlpar class Dunder_str\highlight2 :\highlight0\par
    def __init__(self,num1,num2)\highlight2 :\highlight0\par
        self.num1=num1\par
\par
while True\highlight2 :\highlight0\par
    while True\highlight2 :\highlight0\par
        os.system('cls')\par
\par
if Boole==True\highlight2 :\highlight0\par
    if not Boole\highlight2 :\highlight0\par
        print(Boole)\cf0\f0\lang4105\par

\pard\widctlpar\qc\par

\pard\widctlpar\qj\f1\lang1033 For those such was myself, who are quite new to object oriented programming, it takes about a good year or more to fully start to understand it. But with a little bit of practice and patience each and every single day, your Python programming skills will get sharper as you learn. You will make all kinds of mistakes along the way, but that\rquote s also part of learning anything new. So let\rquote s get started and take the journey into the knowledge of Python Object Oriented Programming Language with my "Python Programmer's Glossary Bible". Because great programming always starts with a great programmer\rquote s manual.\par
\par

\pard\sl360\slmult1\qc\f0\fs28\lang9 Tips & Tricks for Novice Programmers:\par

\pard\widctlpar\qj\f1\fs24\lang1033 For those who are very new to programming, here are some very important things to keep in mind. When writing programs always create nice, clean and meaningful code; don\rquote t create strings that are hard to understand. For example, create a string like this: name = \lquote Jim\rquote , not like this: n = \lquote Jim\rquote . Use meaningful names for strings of all types, such as character strings, integer strings, including tuples, lists and dictionaries alike. Creating meaningful strings also reduces accidental syntax errors from occurring in your programming code. Another very important thing to keep in mind is commenting your programming code so that you and other programmers, who are sharing the same project will be able to tell what parts of the programming code are doing what and such. Comments start with the '#' number sign followed by the commented word, or words. For example, \cf3 # This is a print statement\rquote s string variable \lquote name\rquote\cf0 . Here is another example of what a comment might look like, \cf3 # This loop counts all the items in the names list.\cf0  Comments help the programmer express in meaningful ways how the program works and other programmers can easily pick up the pieces when they take over the nightshift. Another type of comment is with the use of three single quote marks (''') at the beginning of the comment statement and at the end of the comment statement. This type of comment can hold complete paragraphs, whereas the '#' comment statement \par

\pard\widctlpar\sl360\slmult1\qj can only hold words on a single line. The two examples of comments are as follows:\f3\par
\cf3 # This is a comment statement on a single line.\par

\pard\widctlpar\qj\f1 '''\par
This is a commented paragraph statement, which can hold a complete paragraph about the program and how it works. You can use as many lines of commented words as you please.\par
'''\par
\cf0 Note: comments do not execute/run, while a program is executing or running. Comments are ignored by the program; only the programmers know that comments exist within the programming code. As you study the "Python Programmer's Glossary Bible", you will constantly notice how everything written is in the form of these, two types of comment statements.\par
\par

\pard\sl360\slmult1\qc\f0\fs28\lang9 Case Sensitivity\par

\pard\widctlpar\qj\f1\fs24\lang1033 Case sensitivity in programming of every kind is very important to understand. This means that text must be typed correctly. For example, if you type a string's variable name with a capital letter, then you will also have to keep using that string's variable name with a capital letter. Likewise, if you type a string's variable name with a small letter, then you will also have to keep using that string's variable name with a small letter. However, programmers understand case sensitivity as 'Uppercase' and 'Lowercase', which simply means 'Caps and Non-Caps.\par
\par
For example, take a close look at these two string variable names. (A='Value') and (a='Value'). Both of these strings are exactly the same, but with one exception, the variable name 'A' is also shown as 'a' in the other string variable name example. To gain a much better understanding of case sensitivity in programming, here are two examples of yellow, highlighted string variable names, which involve case sensitivity in the Python code. For example, consider the following:\par
\par
Correct case sensitivity\par
\par

\pard\widctlpar\cf1\highlight2 A\highlight0 ='Value'\par
print(\highlight2 A\highlight0 )\par
\par
\highlight2 a\highlight0 ='Value'\par
print(\highlight2 a\highlight0 )\par
\par

\pard\widctlpar\qj\cf0 incorrect case sensitivity\cf1\par

\pard\widctlpar\par
\highlight2 A\highlight0 ='Value'\par
print(\highlight4 a\highlight0 )\par
\par
\highlight2 a\highlight0 ='Value'\par
print(\highlight4 A\highlight0 )\par
\par

\pard\widctlpar\qj\cf0 If you take a close look at these two Python program examples below, you will clearly see how case sensitivity works. Both variable names are of the letter 'A' and 'a', but Python thinks they are different variable names, that belong to different values. So it's very important that you always keep string variable names with different, unique letters to avoid any potential naming errors, which may occur, such as in these two illustrated Python program examples below. \par

\pard\widctlpar\par
\cf1 A=" I'm the Value for uppercase A "\par
print(A)\par
\par
a=" I'm the Value for lowercase a "\par
print(a)\par
\par

\pard\widctlpar\qj\cf0 However, case sensitivity doesn't stop at string variable names alone, input statements are also governed by case sensitivity, so are classes and functions alike. Some Python commands start with an uppercase letter, such as 'Canvas, Label, Entry, Tk(), True, False. And some, such as class functions always start with a capital letter in the variable name as a standard, but lowercase letters can also be used in class variable names as well. Note: most, basic string variable names are usually written as lowercase letters as a standard, but uppercase letters can also be written as well.\par
\par

\pard\sl360\slmult1\qc\f0\fs28\lang9 DRY (Don't Repeat Yourself)\par

\pard\widctlpar\qj\f1\fs24\lang1033 When it comes to programming, especially those who are brand new to programming will often write repetitious code, without realizing it. Repetitious code simply means using the same code, or command statements over and over again. For example, consider the following:\par
\par

\pard\widctlpar\sl360\slmult1\b Don't Repeat Yourself!\par

\pard\widctlpar\cf1\b0 print("Hello Sun!")\par
print("Hello Moon!")\par
print("Hello Stars!")\par
print("Hello World!")\par
\cf0\par

\pard\widctlpar\sl360\slmult1\b Keep it DRY!\par

\pard\widctlpar\cf1\b0 words_tuple=("Hello Sun!","Hello Moon!","Hello Stars!","Hello World!")\par
\par
for words in words_tuple:\par
    print(words)\par

\pard\widctlpar\qj\cf0\par

\pard\sl360\slmult1\qc\f0\fs28\lang9 Single-Line Multiple Command Statements\par

\pard\widctlpar\qj\f1\fs24\lang1033 Python supports single-line multiple command statements, which means most command statements can be written on the same line using commas (,) as command-line separators. For example, consider the following:\par
\par

\pard\widctlpar\cf1 print("Hello Sun!")\par
print("Hello Moon!")\par
print("Hello Stars!")\par
print("Hello World!")\par
\par
print("Hello Sun!"),print("Hello Moon!"),print("Hello Stars!"),print("Hello World!")\par
\par

\pard\widctlpar\qj\cf0 Python supports single-line multiple strings, which means multiple strings can be written on the same line using semicolons (;) as string separators. For example, consider the following:\par
\par
\cf1 string_1=' "Python'\par
string_2="Programmer's"\par
string_3='Glossary'\par
string_4='Bible" '\par
\cf0\par

\pard\widctlpar\cf1 string_1=' "Python';string_2="Programmer's";string_3='Glossary';string_4='Bible" '\par
\par
print(string_1,string_2,string_3,string_4)\par
\par

\pard\widctlpar\qj\cf0 Python supports single-line multiple import function statements, which means multiple import function statements can be written on the same line using semicolons (;) as import function statement separators. For example, consider the following:\par

\pard\widctlpar\cf1\par
import os\par
import time\par
import math\par
from math import*\par
import winsound\par
\par
import os;import time;import math;from math import*;import winsound\par
\par
import os,time,math,winsound;from math import*\par
\par

\pard\widctlpar\qj\cf0 Note: to keep things simple, especially for the novice programmer, all program statements and program examples will remain on separate command lines. To the novice programmer, this is especially important to be able to mitigate any programming errors, which will occur from time to time as you write programs, especially complex programs. However, it is good practice to keep nice, neat program code on separate command lines to make it easy to understand; professional programmers prefer such.\par
\par

\pard\sl360\slmult1\qc\f0\fs28\lang9 Writing Dirty Code Programming\par

\pard\widctlpar\qj\f1\fs24\lang1033 Now, let's talk 'dirty'. I mean, let's talk about 'dirty code programming' and why you shouldn't do it. What dirty code programming simply means, is how you write it. For example, if you create a print string that looks like this:\par
\par

\pard\widctlpar\cf1 d='dirty';c='code';p='programming';print(d,c,p,'is very hard to understand!')\par

\pard\widctlpar\qj\par
\cf0 As you can see, dirty code programming makes it very hard to understand what's happening in the program. Now consider the following:\par
\par
\cf1 program='Programming'\par
nice='Nice,'\par
clean='Clean'\par
code='Code'\par
\par
print(program,nice,clean,code,'is much easier to understand.')\par
\par
\cf0 Here is another example of clean code programming, using semicolons (;) to separate strings on the same line.\par
\par
\cf1 program='Programming';nice='Nice,';clean='Clean';code='Code.'\par
\par
print(program,nice,clean,code,'is much easier to understand.')\par
\par
\cf0 Notice how both program examples are very easy to understand, whereas the dirty code program example is very hard to understand. Also notice how it's less likely to create text errors and syntax errors using a clean code programming style approach, whereas dirty code leaves programs vulnerable to text errors and syntax errors alike. Now that you have a general idea of what Python programming is all about, let's get started with some simple 'print' statement program examples.\cf1\par

\pard\widctlpar\cf0\par

\pard\sl240\slmult1\qc\f0\fs28\lang9 Print Statement Examples:\par

\pard\sl240\slmult1\qj\fs24 '''\par
Print statement values are encased with round brackets '()' on each end of the 'print' statement's value. Quotation marks (" ") denote what kind of 'print' statement value it is. If the value is a string, then no quotation marks are used inside the 'print' statement's value. However, quotation marks are used within the 'print' statement's string value instead. Note: double quotation marks (" ") or single quotation marks (' ') can be used in 'print' statements, string values, tuples and lists alike. If the value is not a string, then quotation marks are used inside the 'print' statement's value itself, such as these two 'print' statement examples below.\par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # Print statement examples:\par
\par
# Double Quotation marks (" ")\par
\cf0\par
\cf1 print("Hello World!")\par
\par
\cf3 # Single Quotation marks (' ')\par
\cf1  \cf0\par
\cf1 print('Hello World!') \cf3\par
\cf0\par
\cf3 # Print statement string examples:\par
\par
# Double Quotation marks (" ")\par
\cf0\par
\cf1 my_string_example="Hello World!"\par
\cf3\par
\cf1 print(my_string_example)\par
\par
\cf3 # Single Quotation marks (' ')\cf1\par
\par
my_string_example='Hello World!'\par
\cf3\par
\cf1 print(my_string_example)\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 Fancy Print Statement Examples:\par

\pard\sl240\slmult1\qj\fs24 '''\par
All 'print' statements and all 'input' statements also support the '\\n' line-break implementer, which acts like a normal line-break in between sentences. The '\\n' line-break implementer can also be implemented into string values, tuple values and list values alike. From here on, the '\\n' line-break implementer will be implemented into all 'print' statements, 'input' statements, string values, tuple values and list values. The '\\n' line-break implementer makes the screen printout much more cleaner and nicer looking with actual line-breaks in between sentences. Note: two '\\n\\n' or more '\\n\\n\\n' line-break implementers can be implemented at once within a single 'print' statement.\par

\pard\sl360\slmult1\qj '''\par
\cf3 # Here are some 'print' statement examlples of the '\\n' line-break implementer.\par

\pard\sl240\slmult1\cf0\par
\cf1 print('\\nHello World!')\par
\par
print('\\n\\nHello World!')\par
\par
print('\\n\\n\\nHello World!')\par
\par
print('\\n\\n\\n\\nHello World!')\par
\cf0\par
\cf1 print('Hello world!\\nHello world!\\nHello world!\\nHello world!')\par
\cf0\par
\cf3 # The upper() fuction turns the words 'hello world!' into the words 'HELLO WORLD!'\par
# example:\par
\par
\cf1 print('\\nhello world!'.upper())\par
\cf3\par
# The title() function turns the words 'hello world!' into the words 'Hello World!'\par
# example:\par
\par
\cf1 print('\\nhello world!'.title())\par
\cf3\par
# The lower() function turns the words 'HELLO WORLD!' into the words 'hello world!'\par
# example:\par
\par
\cf1 print('\\nHELLO WORLD!'.lower())\par
\cf3\par
# Make 'print' statement values in reverse by omitting the slice '[::]' emitter.\par
\par
\cf1 print('\\nHello World!'[::-1])\par
\cf3\par
# Try these 'print' statement value in reverse program examples, while using other\par
# combined functions.\par
\cf0\par
\cf1 print('\\nhello world!'[::-1].upper())\par
\par
print('\\nhello world!'[::-1].title())\par
\par
print('\\nHELLO WORLD!'[::-1].lower())\par
\par
\cf3 # The slice [::] emitter can be omitted into tuples, lists, dictionaries and 'print'\par
# statements, such as in these 'print' statement program examples:\par
\par
# The slice [::] emitter takes one to three positive or negative values. The 'print'\par
# statement's string value 'HELLO WORLD!' is sliced. When slicing a 'print' statement's\par
# string value, the values can be sliced from left to right, or from right to left. For\par
# example, the 'print' string value 'HELLO WORLD!' looks like these sliced 'print' string\par
# value examples:\par
\par
#\tab 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\par
#\tab H,E,L,L,O, ,W,O,L,R,D,!\par
\par
#\tab -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1\par
#\tab H,E,L,L,O, ,W,O,L,R,D,!\par
\par
# [ start value : end value : step value ]\par
\par
# Note: step values must start at 1 not 0\par
\par
# empty slice: no values\par
\par
\cf1 print('HELLO WORLD!'[:]) \par
\par
\cf3 # Screen output:\tab HELLO WORLD!\par
\par
# slice start value 0\cf1\par
\cf3\par
\cf1 print('HELLO WORLD!'[0:]) \cf3\par
\cf1\par
\cf3 # Screen output:\tab HELLO WORLD!\par
\par
# slice end value -1\cf1\par
\par
print('HELLO WORLD! '[:-1]) \par
\cf3\par
# Screen output:\tab HELLO WORLD!\par
\par
# slice start and slice end values 1 and -2\par
\par
\cf1 print('HELLO WORLD! '[1:-2])\par
\cf3\par
# Screen output:\tab ELLO WORLD\par
\par
# slice start, slice end and slice step 2\par
\par
\cf1 print('HELLO WORLD!'[0:-1:2])\par
\par
\cf3 # Screen output:\tab HLOWRD\par
\par
# In this example, the start and end slice emitter values are positive. Notice how the\par
# screen output shows 'HE'.\par
\par
# slice start and slice end values 0 and 2\par
\par
\cf1 print('HELLO WORLD! '[0:2])\cf3\par
\par
# Screen output:\tab HE\par
\par
# In this example, the start and end slice emitter values are negative. Notice how the\par
# screen output shows 'D!'.\par
\par
# slice start and slice end values -3 and -1\par
\par
\cf1 print('HELLO WORLD! '[-3:-1])\cf3\par
\par
# Screen output:\tab D!    \par
\cf0\par
\cf3 # Make this 'print' statement print 'Hello World!' 3 times.\par
\cf0\par
\cf1 print('Hello World! '*3)\par
\cf0\par
\cf3 # Make this 'print' statement print 'Hello World!' go in the top, middle of the screen.\par
# Note: use an emty space in between the single quotation marks (' '*45)\par
\cf0\par
\cf1 print(' '*45+'Hello World!')\par
\cf0\par
\cf3 # Try these 'print' statement program examples:\par
\cf0\par
\cf1 print('Hello World! '*3+'Python')\par
\par
print('Python '*3+'Hello World!')\par
\par
print('Python '*45+'Hello World!')\par
\par
print('Python '*45)\par
\cf0\par
\cf3 # The 'len' function counts how many characters, including spaces there are inside of \par
# a 'print' statement. The length of these two words "Hello World!", including the\par
# space in between 'Hello' and 'World!' are counted. For example: "Hello World!"\par
# including one space is twelve characters long. The printout on the screen will only\par
# show the number "12", not the actual words "Hello World!".\par
\cf0\par
\cf1 print(len('Hello World!'))\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 Character Strings:\par

\pard\sl240\slmult1\fs24\par
\cf1 character_string_example='\\nHello World!'\par
\par
print(character_string_example)\par
\cf0\par

\pard\sl240\slmult1\qj '''\par
Character stings can be any name, letters or letters combined with numbers, starting with a letter first and then a number afterwards. Note: character strings must have different, unique names assign to them. Also note: character strings cannot contain numbers alone as character strings; a "can't assign to literal" error will occur. Character strings must be one, whole word only. Use the underscore key to make two or more words. Example: use 'character_string_example', instead of using 'characterstringexample'. Character strings cannot contain two or more separate words with spaces in between them. Example: 'character string example' cannot be used as a string, but 'character_string_example' can be used as a string.\par
\par
Character strings are used to hold important, key data information, which can be used over again and again throughout a program's execution/run. Using character strings also makes programming code very efficient, without manual redundancy on the programmer's part.\par
'''\par

\pard\sl240\slmult1\qc\fs28 Character String Variable Name Change Examples:\par

\pard\sl240\slmult1\fs24\par
\cf1 animal_canine='Fox'\par
animal_name='Ed'\par
animal_age='19'\par
\par
print(f'\\n\{animal_name\} the crazy \{animal_canine\} is \{animal_age\} years old.')\par
\par
animal='Fox'\par
name='Ed'\par
age='19'\par
\par
print(f'\\n\{name\} the crazy \{animal\} is \{age\} years old.')\par
\par
animal1='Fox'\par
name1='Ed'\par
age1='19'\par
\par
print(f'\\n\{name1\} the crazy \{animal1\} is \{age1\} years old.')\par
\par
a='Fox'\par
n='Ed'\par
age='19'\par
\par
print(f'\\n\{n\} the crazy \{a\} is \{age\} years old.')\par
\par
a1a='Fox'\par
n2n='Ed'\par
a55a='19'\par
\par
print(f'\\n\{n2n\} the crazy \{a1a\} is \{a55a\} years old.')\par
\cf0\par
\cf3 # Replace part of a string's value 'Ed the Fox is great!' with 'Ed the Canine is great!'\par
# example:\par
\cf0\par
\cf1 list_string_name='\\nEd the Fox is great!'\par
my_replace_word=list_string_name.replace('Fox','Canine')\par
\par
print(my_replace_word)\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 Numeric Strings:\par

\pard\sl240\slmult1\qj\fs24 '''\par
Numeric stings can be any name, letters or letters combined with numbers, starting with a letter first and then a number afterwards. Numeric strings do not contain quote ('') marks around the values, like character strings do. Note: numeric strings must have different, unique names assign to them. Note: numeric strings cannot contain numbers alone as numeric strings; a "can't assign to literal" error will occur. Numeric strings must be one, whole word only. Use the underscore key to make two or more words. Example: use 'numeric_string_example', instead of using 'numericstringexample'. Numeric strings cannot contain two or more separate words with spaces in between them. Example: 'numeric string example' cannot be used as a string, but 'numeric_string_example' can be used as a string.\par
\par
Numeric strings are used to hold important, key data information, which can be used over again and again throughout a program's execution run. Using numeric strings also makes programming code very efficient, without manual redundancy on the programmer's part.\par
\par
Numeric strings do not contain quote ('') marks, because they are not character strings. Numeric strings have to be able to do actual calculations throughout a program\rquote s execution run.\par
'''\par

\pard\sl240\slmult1\qc\fs28 Numeric String Examples:\par

\pard\sl240\slmult1\fs24\par
\cf3 # BEDMAS! Order of Operation:\par
\par
# All computers, and computer programs, which involve mathematics dictate the\par
# order of operation. BEDMAS:\par
\par
# (Brackets) (Exponents) (Division) (Multiplication) (Addition) (Subtraction)\par
\cf0\par
\cf1 numeric_string1=3;numeric_string2=5\par
\par
print(numeric_string1+numeric_string2*2+2)\par
\cf0\par
\cf3 # 5*2=10, 3+10+2 = 15\par
\cf0\par
\cf1 print(3+5*2+2)\par
\cf0\par
\cf3 # 3+10+2 = 15\par
\cf0\par
\cf1 num1=3\par
num2=5\par
\par
print(num1+num2*2+2)\par
\par
num1=3\par
num2=5\par
num3=2\par
\par
print(num1+num2*num3+num3)\par
\cf0\par
\cf3 # num2*num3 = 10, num1+num2+num3 = 15\par
\cf0\par
\cf3 # Numbers can also used within the 'print' statement example as follows:\par
\cf0\par
\cf1 print('\\nAlbert Einstein loves to count to',3+5*2+2,'using the order of operation.')\par
\cf0\par
\cf3 # New format example of the 'input' 'print' string statement: Note: the (f') format is now\par
# the standard in Python 3 and up.\par
\cf0\par
\cf1 num1=3\par
num2=5\par
num3=2\par
\par
print(f'\\nAlbert Einstein loves to count to \\\par
\{num1+num2*num3+num3\} using the order of operation.')\par
\cf0\par
\cf3 # Non format example of the 'print' numeric string statement:\par
\cf0\par
\cf1 num1=3\par
num2=5\par
num3=2\par
\par
print('\\nAlbert Einstein loves to count to',(num1+num2*num3+num3),\par
      'using the order of operation.')\par
\cf0\par
\cf3 # Old format example of the 'print' numeric string statement: Now depreciated in\par
# Python 3 and up.\par
\cf0\par
\cf1 num1=3\par
num2=5\par
num3=2\par
\par
print('\\nAlbert Einstein loves to count to \{\} \\\par
using the order of operation.'.format(num1+num2*num3+num3))\par
\par

\pard\sl240\slmult1\qc\cf0\fs28 String Concatenation:\par

\pard\sl240\slmult1\qj\fs24 '''\par
Strings such as character strings and numeric strings can be concatenated or joined together, using the comma ',' or the plus sign '+'. Note: string concatenation is only needed in non-formatted command statements. However with the 'f' format function, there is no need for string concatenation. Consider the following:\par
\par

\pard\sl240\slmult1 numeric_string=2+2*4\par
character_string='printed text.'\par
\par
print('Numeric string calculation',\par
      str(numeric_string),'mixed in with',character_string)\par
--------------------------------------------------------------------------------------------\par
numeric_string=2+2*4\par
character_string='printed text.'\par
\par
print('Numeric string calculation '\par
      +str(numeric_string)+' mixed in with '+character_string)\par
--------------------------------------------------------------------------------------------\par
numeric_string=2+2*4\par
character_string='printed text.'\par
\par
print(f'Numeric string calculation \{str(numeric_string)\} \\\par
mixed in with \{character_string\}')\par
--------------------------------------------------------------------------------------------\par
numeric_string=2+2*4\par
character_string='printed text.'\par
\par
print('Numeric string calculation \{\} \\\par
mixed in with \{\}'.format(str(numeric_string),character_string))\par

\pard\sl276\slmult1 --------------------------------------------------------------------------------------------\par

\pard\sl240\slmult1\qj Notice how the 'f' format function and the old format command statements have no, such commas ',' or plus signs '+' needed for string concatenation. Curly braces '\{\}' are all that are needed for string concatenation, which makes it much simpler for the programmer in the long run.\par

\pard\sl360\slmult1\qj ''' \par

\pard\sl240\slmult1\cf3 # Here are some string concatenation program examples to practice with. See what\par
# happens when you type and execute/run each of these program examples below.\par
\par
\cf1 numeric_string=2+2*4\par
character_string='printed text.'\par
\par
print('Numeric string calculation '\par
      +str(numeric_string)+' mixed in with '+character_string)\par
\par
numeric_string=str(2+2*4)\par
character_string='printed text.'\par
\par
print('Numeric string calculation '\par
      +(numeric_string)+' mixed in with '+character_string)\par
\par
numeric_string=2+2*4\par
character_string='printed text.'\par
\par
print('Numeric string calculation',\par
      str(numeric_string),'mixed in with',character_string)\par
\par
numeric_string=str(2+2*4)\par
character_string='printed text.'\par
\par
print('Numeric string calculation',\par
      (numeric_string),'mixed in with',character_string)\par
\par
numeric_string=2+2*4\par
character_string='printed text.'\par
\par
print(f'Numeric string calculation \{str(numeric_string)\} \\\par
mixed in with \{character_string\}')\par
\par
numeric_string=str(2+2*4)\par
character_string='printed text.'\par
\par
print(f'Numeric string calculation \{numeric_string\} \\\par
mixed in with \{character_string\}')\par
\par
numeric_string=2+2*4\par
character_string='printed text.'\par
\par
print('Numeric string calculation \{\} \\\par
mixed in with \{\}'.format(str(numeric_string),character_string))\par
\par
numeric_string=str(2+2*4)\par
character_string='printed text.'\par
\par
print('Numeric string calculation \{\} \\\par
mixed in with \{\}'.format(numeric_string,character_string))\par
\par
\cf3 # Let's have some fun with string concatenation. See what happens when you type\par
# and execute/run these program examples below.\par
\par
\cf1 p1=' "Pyt';p2='hon';p3='Pro';p4='gram'\par
p5="mer's";p6='Glos';p7='sary';p8='Bib';p9='le" '\par
\par
print(p1+p2,p3+p4+p5,p6+p7,p8+p9,'\\nBy Joseph C. Richardson')\par
\par
\cf3 # When commas ',' are used, they act as spaces in between strings. However, when\par
# plus signs '+' are used, there are no spaces in between strings. When using a plus\par
# sign '+' it is important to create spaces in the values themselves, example. p3=' Pro'.\par
\cf1\par
p1=' "Pyt';p2='hon';p3=' Pro';p4='gram'\par
p5="mer's";p6=' Glos';p7='sary';p8=' Bib';p9='le" '\par
\par
print(p1+p2+p3+p4+p5+p6+p7+p8+p9+'\\nBy Joseph C. Richardson')\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 Tuple String Examples:\par

\pard\sl240\slmult1\qj\fs24 '''\par
Tuples are strings that can hold multiple values. Tuples are immutable, meaning they cannot be changed or modified once they are created. Tuple values are surrounded with round brackets '( )'. Tuple values always start at position '0', then position '1', and so on.\par

\pard\sl360\slmult1\qj '''\par
\cf3 # Example: tuple_string_name=('Position 0','Positon 1','Position 2')\par

\pard\sl240\slmult1\par
# Tuple string examples are as follows.\par
\par
# Non format example of the 'print' tuple string:\par
\cf0\par
\cf1 tuple_string_name=('Super Man','Bat Man','Spider Man')\par
\par
print('\\nMy name is '+(tuple_string_name[0])+' and I\\'m a Super Hero.')\par
\par
print('\\nMy name is '+(tuple_string_name[1])+' and I\\'m a Super Hero.')\par
\par
print('\\nMy name is '+(tuple_string_name[2])+' and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # New format example of the 'print' tuple string: Note: the (f') format is now the\par
# standard in Python 3 and up.\par
\cf0\par
\cf1 tuple_string_name=('Super Man','Bat Man','Spider Man')\par
\par
print(f'\\nMy name is \{tuple_string_name[0]\} and I\\'m a Super Hero.')\par
\par
print(f'\\nMy name is \{tuple_string_name[1]\} and I\\'m a Super Hero.')\par
\par
print(f'\\nMy name is \{tuple_string_name[2]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # Old format example of the 'print' tuple string: Now depreciated in Python 3 and up.\par
\cf0\par
\cf1 tuple_string_name=('Super Man','Bat Man','Spider Man')\par
\par
print('\\nMy name is \{\} and I\\'m a Super Hero.'.format(tuple_string_name[0]))\par
\par
print('\\nMy name is \{\} and I\\'m a Super Hero.'.format(tuple_string_name[1]))\par
\par
print('\\nMy name is \{\} and I\\'m a Super Hero.'.format(tuple_string_name[2]))\par
\par
\cf3 # Call up individual tuple values with the slice [::] emitter.\par
\cf1\par
tuple_string=('Python','Programmer\\'s','Glossary','Bible')\par
\par
print(f' "\{tuple_string[0]\} \{tuple_string[1]\} \{tuple_string[2]\} \{tuple_string[3]\}" ')\par
\par
\cf3 # Loop through a tuple string with a for-loop.\par
\par
\cf1 tuple_string=('Python','Programmer\\'s','Glossary','Bible')\par
for i in tuple_string:\par
    print(i)\par
\par
\cf3 # This tuple program example omits the 'min' and 'max' functions for each tuple set:\par
# 'min_num', and 'max_num'. The 'add_values' variable adds min_num and max_num'\par
# tuple values together which equals 11.\par
\cf1\par
min_num=min(1,2,3,4,5,6,7,8,9,10)\par
max_num=max(1,2,3,4,5,6,7,8,9,10)\par
add_values=min_num+max_num\par
\par
print(f'Numbers: (1,2,3,4,5,6,7,8,9,10)\\n\\nMinimum \\\par
number= \{min_num\}\\nMaximum number=\{max_num\}\\n\\nMinimum \\\par
number pluss maximum number=\{add_values\}')\par
\par
\cf3 # Screen output:\tab Numbers: (1,2,3,4,5,6,7,8,9,10)\par
\par
# \tab\tab\tab Minimum number = 1\par
# \tab\tab\tab Maximum number = 10\par
\par
# \tab\tab\tab Minimum number pluss maximum number = 11\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 List String Examples:\par

\pard\sl240\slmult1\qj\fs24 '''\par
Lists are strings that can hold multiple values. Lists are mutable, meaning they can be changed or modified once they are created. List values are surrounded with square brackets '[ ]'. List values always start at position '0', then position '1', and so on.\par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # Example: list_string_name=['Position 0','Positon 1','Position 2']\par
\par
# List string examples are as follows.\par
\par
# Non format example of the 'print' list string:\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
\par
print('\\nMy name is '+(list_string_name[0])+' and I\\'m a Super Hero.')\par
\par
print('\\nMy name is '+(list_string_name[1])+' and I\\'m a Super Hero.')\par
\par
print('\\nMy name is '+(list_string_name[2])+' and I\\'m a Super Hero.')\par
\par
\cf3 # New format example of the 'print' list string: Note: the (f') format is now the standard\par
# in Python 3 and up.\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
\par
print(f'\\nMy name is \{list_string_name[0]\} and I\\'m a Super Hero.')\par
\par
print(f'\\nMy name is \{list_string_name[1]\} and I\\'m a Super Hero.')\par
\par
print(f'\\nMy name is \{list_string_name[2]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # Old format example of the 'print' list string: Now depreciated in Python 3 and up.\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
\par
print('\\nMy name is \{\} and I\\'m a Super Hero.'.format(list_string_name[0]))\par
\par
print('\\nMy name is \{\} and I\\'m a Super Hero.'.format(list_string_name[1]))\par
\par
print('\\nMy name is \{\} and I\\'m a Super Hero.'.format(list_string_name[2]))\par
\par
\cf3 # Loop through a list string with a for-loop.\par
\par
\cf1 list_string=['Python','Programmer\\'s','Glossary','Bible']\par
for i in list_string:\par
    print(i)\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 List String Modification Examples:\par

\pard\sl240\slmult1\fs24\par
\cf3 # A list can always be changed or midified, but a tuple cannot be changed or midified.\par
# List values are mutable, whereas tuple values are immutable.The extra list value:\par
# 'Wonder Woman' is now appended or added to the string's name range:\par
# list_string_name.\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
list_string_name.append('Wonder Woman')\par
\par
print(f'\\nMy name is \{list_string_name[2]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # The inserted list value: 'The Tick' is now at position '0' where the list value: 'Super\par
# Man' was. The list value: 'Super Man' got moved from positon'0' into positon '1'\par
# instead.\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
list_string_name.insert(0,'The Tick')\par
\par
print(f'\\nMy name is \{list_string_name[1]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # The removed list value: 'Spider Man' is gone from the string's name range:\par
# list_string_name. Position '0', and position '1' are all that is left in the string's name\par
# range: list_string_name.\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
list_string_name.remove('Spider Man')\par
\par
print(f'\\nMy name is \{list_string_name[1]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # The popped list value: 'Super Man' at position '0' is now 'Bat Man' at position '0',\par
# where the value 'Super Man' was.\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
list_string_name.pop(0)\par
\par
print(f'\\nMy name is \{list_string_name[0]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # The sort list values: 'Super Man','Bat Man','Spider Man' get reversed as list values:\par
# 'Super Man','Spinder Man','Bat Man'. The sort list value 'Super Man' remains at\par
# position '0', while the other two values get reversed positions.\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
list_string_name.sort(reverse=True)\par
\par
print(f'\\nMy name is \{list_string_name[1]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # Note: the sorted list program example below only returns a preview of what the list\par
# would look like if it was sorted; it doesn't modify or change the actual characteristics\par
# of the list.\par
\cf0\par
\cf1 sorted(list_string_name)\par
print(list_string_name)\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 Two Dimensional List Examples:\par
\fs24\par

\pard\sl240\slmult1\cf3 # A two dimensional list is simply a list within another list. For example, a one\par
# dimensional list looks like this:\par
\cf0\par
\cf1 my_1d_list=['value 1','value 2']\par
\cf0\par
\cf3 # A two dimensional list looks like this:\par
\cf0\par
\cf1 my_2d_list=[\par
    ['value 1','value 2'],['value 3','value 4']\par
    ]\par
\cf0\par
\cf3 # A two dimensional list can hold as many list value blocks as one sees fit. For\par
# example: the my_2d_list variable has three list value blocks in it.\par
\cf0\par
\cf1 my_2d_list=[\par
    ['value 1','value 2'],['value 3','value 4'],['value 5','value 6']\par
    ]\par
\cf0\par
\cf3 # A two dimensional list can be numeric values as well as character values. Example:\par
\cf0\par
\cf1 my_2d_list=[\par
    [1,2],[3,4]\par
    ]\par
\cf0\par
\cf3 # Display a two dimensional list's character values to check them.\par
\cf0\par
\cf1 my_2d_list=[\par
    ['value 1','value 2'],['value 3','value 4']\par
    ]\par
\par
print(my_2d_list)\par
\cf0\par
\cf3 # Screen output:\tab [['value 1', 'value 2'], ['value 3', 'value 4']]\par
\cf0\par
\cf3 # Display a two dimensional list's numeric values to check them.\par
\cf0\par
\cf1 my_2d_list=[\par
    [1,2],[3,4]\par
    ]\par
\par
print(my_2d_list)\par
\cf0\par
\cf3 # Screen output:\tab [[1, 2], [3, 4]]\par
\par
# Display a two dimensional list's character value pair to check them.\par
\cf0\par
\cf1 my_2d_list=[\par
    ['value 1','value 2'],['value 3','value 4']\par
    ]\par
\par
print(my_2d_list[0])\par
\cf0\par
\cf3 # Screen output:\tab ['value 1', 'value 2']\par
\cf0\par
\cf1 my_2d_list=[\par
    ['value 1','value 2'],['value 3','value 4']\par
    ]\par
\par
print(my_2d_list[1])\par
\cf0\par
\cf3 # Screen output:\tab ['value 3', 'value 4']\par
\cf0\par
\cf3 # Display a two dimensional list's numeric value pair to check them.\par
\cf0\par
\cf1 my_2d_list=[\par
    [1,2],[3,4]\par
    ]\par
\par
print(my_2d_list[0])\par
\cf0\par
\cf3 # Screen output:\tab [1, 2]\par
\cf0\par
\cf1 my_2d_list=[\par
    [1,2],[3,4]\par
    ]\par
\par
print(my_2d_list[1])\par
\cf0\par
\cf3 # Screen output:\tab [3, 4]\par
\cf0\par
\cf3 # Display a single character value from a two dimensional list. Examples:\par
\cf0\par
\cf1 my_2d_list=[\par
    ['value 1','value 2'],['value 3','value 4']\par
    ]\par
\par
print(my_2d_list[0][0])\par
\cf0\par
\cf3 # Screen output:\tab value 1\par
\cf0\par
\cf1 my_2d_list=[\par
    ['value 1','value 2'],['value 3','value 4']\par
    ]\par
\par
print(my_2d_list[1][0])\par
\cf0\par
\cf3 # Screen output:\tab value 3\par
\cf0\par
\cf1 my_2d_list=[\par
    ['value 1','value 2'],['value 3','value 4']\par
    ]\par
\par
print(my_2d_list[0][1])\par
\cf0\par
\cf3 # Screen output:\tab value 2\par
\cf0\par
\cf1 my_2d_list=[\par
    ['value 1','value 2'],['value 3','value 4']\par
    ]\par
\par
print(my_2d_list[1][1])\par
\cf0\par
\cf3 # Screen output:\tab value 4\par
\cf0\par
\cf3 # Display a single numeric value from a two dimensional list. Examples:\par
\cf0\par
\cf1 my_2d_list=[\par
    [1,2],[3,4]\par
    ]\par
\par
print(my_2d_list[0][0])\par
\cf0\par
\cf3 # Screen output:\tab 1\par
\cf0\par
\cf1 my_2d_list=[\par
    [1,2],[3,4]\par
    ]\par
\par
print(my_2d_list[1][0])\par
\cf0\par
\cf3 # Screen output:\tab 3\par
\cf0\par
\cf1 my_2d_list=[\par
    [1,2],[3,4]\par
    ]\par
\par
print(my_2d_list[0][1])\par
\cf0\par
\cf3 # Screen output:\tab 2\par
\cf0\par
\cf1 my_2d_list=[\par
    [1,2],[3,4]\par
    ]\par
\par
print(my_2d_list[1][1])\par
\cf0\par
\cf3 # Screen output:\tab 4\par
\cf0\par
\cf3 # Create a multiple two dimensional list, using letter and number values. Create a\par
# simple 'print' program example, which will use a two dimensional list.\par
\cf0\par
\cf1 name=[\par
     ['Tomy','Brian','Jim','Paul'],\par
     ['Mary','Terry','Jane','Patty'],\par
     [0,1,2,35,4,5,6,7,8,9],\par
     ['Dog','Cat','Bird','Fish']\par
     ]\par
\par
print(f'My name is \{name[0][0]\} I am \{name[2][3]\} years old.')\par
\par
print(f'I have a \{name[3][0]\}. My Sister \{name[1][3]\} wants a \{name[3][2]\}.')\par
\par
print(f'\{name[1][0]\} loves \{name[3][3]\} so much. But \{name[0][1]\} \\\par
wants a \{name[3][1]\} instead.')\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 Multiple String Variables and Multiple String Values Examples:\par

\pard\sl240\slmult1\qj\fs24 '''\par
Multiple tuple string variables and multiple tuple values can be stored right inside one, single 'print' statement. Note: multiple tuple strings and multiple tuple values must be the same; four tuple strings equals four tuple values. Also note that multiple tuple stings and multiple tuple values are always in the order they are given. For example, string (a) is always equal to the string value 'Andy' and string (b) is always equal to the string value 'Bob' and so on.\par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # Multiple tuple string variables and multiple tuple values example:\par
\cf0\par
\cf1 a,b,c,d=('Andy','Bob','Chris','Dave')\par
\par
print(a,b,c,d)\par
\par
print(d,c,b,a)\par
\par
print(c,b,a,d)\par

\pard\sl240\slmult1\qj\cf0\par

\pard\sl240\slmult1\cf3 # The 'len' function is excellent at keeping track of how many tuple values or list values\par
# there are. Checking to see how many values there are in a tuple or list makes\par
# programming much more efficient, while the 'len' fuction checks exactly how many\par
# values there are. The printout on the screen will only show the number "8", not the\par
# actual tuple values or list values.\par
\cf0\par
\cf1 tuple_len=(\par
     'Value 0','Value 1',\par
     'Value 2','Value 3',\par
     'Value 4','Value 5',\par
     'Value 6','Value 7'\par
     )\par
\par
print(len(tuple_len))\par
\par
list_len=[\par
    'Value 0','Value 1',\par
    'Value 2','Value 3',\par
    'Value 4','Value 5',\par
    'Value 6','Value 7'\par
    ]\par
\par
print(len(list_len))\cf0\par

\pard\sl240\slmult1\qc\fs28 Dictionary Examples:\par

\pard\sl240\slmult1\qj\fs24 '''\par
Dictionaries are like lists, but they hold "key" values that point to other values in the list. For example: the key value "animal" points to the list value "canine", and the key value "name" points to the list value "Mogie". The key value "age" points to the list value "13", and the key value "kind" points to the value "Husky/Chow mix". Lastly, the key value "colour" points to the list value "gold". Think of dictionaries as lists on heavy steroids. Dictionary values are surrounded with curly braces '\{ \}', which are also surrounded with round brackets '(\{ \})'. Note: you can leave out the round brackets '()' if you like.\par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # Type and execute/run this 'dictionary_list' dictionary program example:\par
\cf0\par
\cf1 dictionary_list=(\par
     \{'animal':'canine',\par
      'name':'Mogie','age':13,\par
      'kind':'Husky/Chow mix',\par
      'colour':'gold'\}\par
     )\par
\par
print(dictionary_list['animal'])\par
\par
print(dictionary_list['name'])\par
\par
print(dictionary_list['age'])\par
\par
print(dictionary_list['kind'])\par
\par
print(dictionary_list['colour'])\par
\cf0\par
\cf3 # Update the dictionary_list values with the '.update' statement followed by the new\par
# dictionary_list:\par
\par
# dictionary_list.update(\{'animal':'monkey','name':'Cheetah',\par
# 'age':20,'kind':'Chimpanzee','colour':'brown'\})\par
\cf0\par
\cf1 dictionary_list=(\par
     \{'animal':'canine','name':'Mogie','age':13,\par
      'kind':'Husky/Chow mix','colour':'gold'\}\par
     )\par
\par
dictionary_list.update(\par
     \{'animal':'monkey','name':'Cheetah','age':20,'kind':'Chimpanzee','colour':'brown'\}\par
     )\par
\par
print(dictionary_list['animal'])\par
\par
print(dictionary_list['name'])\par
\par
print(dictionary_list['age'])\par
\par
print(dictionary_list['colour'])\par
\cf0\par
\cf3 # This dictionary_list example illustrates how key values can point to multiple values,\par
# denoted by square brackets '[ ]' around the list value groups. For example: the key\par
# value 'Animals' has four list values assigned to it instead of just one list value, such\par
# as in the dictionary_list program example above illustrates.\par
\cf0\par
\cf1 dictionary_list=(\par
     \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
      'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
     )\par
\par
print(dictionary_list['Animals'][0])\par
print(dictionary_list['Animals'][1])\par
print(dictionary_list['Animals'][2])\par
print(dictionary_list['Animals'][3])\par
\par
print(dictionary_list['Reptiles'][0])\par
print(dictionary_list['Reptiles'][1])\par
print(dictionary_list['Reptiles'][2])\par
print(dictionary_list['Reptiles'][3])\par
\par
print(dictionary_list['Insects'][0])\par
print(dictionary_list['Insects'][1])\par
print(dictionary_list['Insects'][2])\par
print(dictionary_list['Insects'][3])\par
\cf0\par
\cf3 # Update the dictionary_list values with the '.update' statement followed by the new\par
# dictionary_list:\par
\par
# dictionary_list.update(\{'Animals':['Wolf','Lion','Bat','Shark'],'\par
# Reptiles':['Tortoise','Alligator','Python','Toad'],'Insects':\par
# ['Moth','Cricket','Fly','Wasp']\})\par
\cf0\par
\cf1 dictionary_list=(\par
     \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
      'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
     )\par
\par
dictionary_list.update(\par
     \{'Animals':['Wolf','Lion','Bat','Shark'],'Reptiles':['Tortoise','Alligator','Python','Toad'],\par
      'Insects':['Moth','Cricket','Fly','Wasp']\}\par
     )\par
\par
print(dictionary_list['Animals'][0])\par
print(dictionary_list['Animals'][1])\par
print(dictionary_list['Animals'][2])\par
print(dictionary_list['Animals'][3])\par
\par
print(dictionary_list['Reptiles'][0])\par
print(dictionary_list['Reptiles'][1])\par
print(dictionary_list['Reptiles'][2])\par
print(dictionary_list['Reptiles'][3])\par
\par
print(dictionary_list['Insects'][0])\par
print(dictionary_list['Insects'][1])\par
print(dictionary_list['Insects'][2])\par
print(dictionary_list['Insects'][3])\par
\cf0\par
\cf3 # Display the dictionary key values to check them.\par
\cf0\par
\cf1 dictionary_list=(\par
     \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
      'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
     )\par
\par
print(dictionary_list.keys())\par
\cf0\par
\cf3 # Screen output:\tab dict_keys(['Animals', 'Reptiles', 'Insects'])\par
\par
# Display the dictionary list values to check them.\par
\cf0\par
\cf1 dictionary_list=(\par
     \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
      'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
     )\par
\par
print(dictionary_list.values())\par
\cf0\par
\cf3 # Screen output:\tab dict_values([['Dog', 'Cat', 'Bird', 'Fish'], ['Turtle',\par
# 'Lizard','Snake', 'Frog'], ['Butterfly', 'Beetle', 'Ant', 'Bee']])\par
\par
# Delete a dictionary key value and check it.\par
\cf0\par
\cf1 dictionary_list=(\par
     \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
      'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
     )\par
\par
del dictionary_list['Animals']\par
\par
print(dictionary_list.keys())\par
\cf0\par
\cf3 # Screen output:\tab dict_keys(['Reptiles', 'Insects'])\par
\par
# Delete a dictionary list value and check it.\par
\cf0\par
\cf1 dictionary_list=(\par
     \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
      'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
     )\par
\par
del dictionary_list['Animals'][0]\par
\par
print(dictionary_list.values())\par
\cf0\par
\cf3 # Screen output:\tab dict_values([['Cat', 'Bird', 'Fish'], ['Turtle', 'Lizard',\par
# 'Snake', 'Frog'], ['Butterfly', 'Beetle', 'Ant', 'Bee']])\par
\par
# Pop a dictionary key value and check it. The key value "Animals" is not deleted, but\par
# it's no longer in the dictionary list. However, it is returnable.\par
\cf0\par
\cf1 dictionary_list=(\par
     \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
      'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
     )\par
\par
pop_key=dictionary_list.pop('Animals')\par
\par
print(dictionary_list.keys())\par
\par
print(pop_key)\par
\cf0\par
\cf3 # Screen output:\tab dict_keys(['Reptiles', 'Insects'])\par
\par
# Screen output:\tab ['Dog', 'Cat', 'Bird', 'Fish']\par
\cf0\par
\cf3 # Display the length of dictionary key values to check them.\par
\cf0\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
print(len(dictionary_list))\par
\par
print(dictionary_list.keys())\par
\cf0\par
\cf3 # Screen output:\tab 3\par
\par
# Screen output:\tab dict_keys(['Animals', 'Reptiles', 'Insects'])\par
\par
# Display the length of dictionary list values to check them.\par
\cf0\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
print(len(dictionary_list['Animals']))\par
\par
print(dictionary_list.values())\par
\cf0\par
\cf3 # Screen output:\tab 4\par
\par
# Screen output:\tab dict_values([['Dog', 'Cat', 'Bird', 'Fish'], ['Turtle',\par
# 'Lizard', 'Snake', 'Frog'], ['Butterfly', 'Beetle', 'Ant', 'Bee']])\par
\par
# To add a new dictionary key value, simply use ['Set Key name example']='New Value'\par
# to display the length of dictionary list key values to check them. Note: one dictionary\par
# value must be created along with setting a new dictonary key value.\par
\cf0\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
dictionary_list['Fish']='Angelfish'\par
\par
print(len(dictionary_list.keys()))\par
\par
print(dictionary_list.keys())\par
\cf0\par
\cf3 # Screen output:\tab 4\par
\par
# Screen output:\tab dict_keys(['Animals', 'Reptiles', 'Insects', 'Fish'])\par
\par
# To add new dictionary values, simply use ['Set Key name example']='Value','New\par
# Value','New Value',New Value' Display the length of dictionary list values to check\par
# them. Note: a dictionary key value must be [set] first, then add the new dictionary\par
# values.\par
\cf0\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
dictionary_list['Fish']='Angelfish','Devilfish','Catfish','Dogfish'\par
\par
print(len(dictionary_list.values()))\par
\par
print(dictionary_list.values())\par
\cf0\par
\cf3 # Screen output:\tab 4\par
\par
# Screen output:\tab dict_values([['Dog', 'Cat', 'Bird', 'Fish'], ['Turtle', \par
# 'Lizard', 'Snake', 'Frog'], ['Butterfly', 'Beetle', 'Ant', 'Bee'], ('Angelfish', \par
# 'Devilfish', 'Catfish', 'Dogfish')])\par
\par
# To look for a dictionary key value, simply use the '.get' method to search for it.\par
# Display the dictionary key values to check them.\par
\cf0\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
print(dictionary_list.get('Fish'))\par
\cf0\par
\cf3 # Screen output:\tab None\par
\par
# The screen output says None. However, by adding 'Not Found!' the screen output\par
# now looks like this:\par
\cf0\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
print(dictionary_list.get('Fish','Not Found!'))\par
\cf0\par
\cf3 # Screen output:\tab Not Found!\par
\par
# This time, let's look for an actual key value and check it, using the 'get' methond. The\par
# screen output now looks like this:\par
\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
print(dictionary_list.get('Animals'))\par
\cf3\par
# Screen output:\tab ['Dog', 'Cat', 'Bird', 'Fish']\par
\par

\pard\sl240\slmult1\qc\cf0\fs28 Conditionals and Logical Operators: (<) (>) (<=) (>=) (==) (!=)\par

\pard\sl240\slmult1\qj\fs24 '''\par
Conditionals change the outcome of a program's execution run, depending on what the program is doing at the time. The conditionals in Python are the 'if:' statement, 'elif:' statement and the 'else:' statement, along with the 'True:' and 'False:' statements. Conditionals are mainly used in conjunction with 'input' statements and conditional while-loops. However, Logical operators are also used to test whether a condition is less than (<), greater than (>), less than (<=) or equal to, greater than (>=) or equal to, equals (==) equals and not (!=) equal to. For example, 5 is greater (>) than 4 and 4 is less (<) than 5. Here are a few examples of logical operators, which test integer values against other integer values within 'print' statements. These 'print' statement illustration examples below will either display on the screen output as "True" or "False", depending on the outcome of the results.\par
\par
print(4<5) True: 4 is less than 5\par
print(4>5) False: 4 is not greater than 5\par
print(4<=5) True: 4 is less than or equal to 5\par
print(4>=5) False: 4 is not greater than or equal to 5\par
print(4==5) False: 4 does not equal 5\par
print(4!=5) True: 4 does not equal 5\par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # Type and execute/run this simple 'print' statement program example below, using\par
# the logical operators in different combinations as was illustrated above and see\par
# what happens when you change the logical operators.\par
\cf0\par
\cf1 print(4<5)\par
\cf0\par
\cf3 # Screen output:\tab True\par
\par
# Type and execute/run these 'print' statement program examples, using the (f')\par
# format implementer.\par
\par
# The 'int' statement is for integer values only.\par
\cf0\par
\cf1 num=int(input('Type in a number and I will condition the result against 5 as either \\\par
"true" or false" ').strip())\par
\par
print(f'\{num<5\}')\par
print(f'\{num>5\}')\par
print(f'\{num<=5\}')\par
print(f'\{num>=5\}')\par
print(f'\{num==5\}')\par
print(f'\{num!=5\}')\cf0\par

\pard\sl360\slmult1\qc\fs28 Boolean Logic:\par

\pard\sl240\slmult1\qc\fs24 "IF" "ELIF" "ELSE" "TRUE" "FALSE" "AND" "OR" "NOT"\par

\pard\sl240\slmult1\qj '''\par
There once was a man, named 'George Boole' who was a famous mathematician. He invented these conditionals called Boolean Logic, which indirectly brought about the computer age we now live. The conditionals of George Boole are as follows.\par
\par
These conditionals are: 'IF', 'ELSE', 'TRUE', 'FALSE', 'AND', 'OR' 'NOT'\par
\par
In computer terminology, these conditionals are called "Boolean Logic". Boolean Logic is simply all about the concept of decision making laws, meaning if something is true, then it is not false. Likewise, if something is false, then it is not true.\par
\par
When it comes to program development, sometimes logical operators aren't enough alone to do the job. In most cases, other conditionals are needed to help the logical operators do the job. With the 'if:', 'elif:', 'else', 'true', 'false', 'and', 'or' and 'not' conditionals, the logical operators can do the job as they were designed for doing, which are to test values against other values and comparing data against user input data.\par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # Using simple 'print' statements, you can do simple True and False tests to help you\par
# determine the outcome of a conditional against another conditional, such as True\par
# and False conditionals. For example:\par
\par
\cf1 print(True and True)\par
print(False and False)\par
print(True and False)\par
print(False and True)\par
\par
print(True or True)\par
print(False or False)\par
print(True or False)\par
print(False or True)\par
\par
print(True and not True)\par
print(False and not False)\par
print(True and not False)\par
print(False and not True)\par
\par
print(True or not True)\par
print(False or not False)\par
print(True or not False)\par
print(False or not True)\par
\cf0\par
\cf3 # Here is a prime example of how these conditionals work in conjunction with the\par
# logical operators. In this program example, the conditionals 'if:' and 'elif:' are\par
# implement along with the logical operators. The user is asked to type in a number, if\par
# the number is equal equals: == 5, the first conditional 'if:' statement is executed\par
# "print(f'True! \{num\} equals equals 5.')". If the number is less than 5, the first 'elif:'\par
# statement is executed "print(f'True! \{num\} is less than 5.')". If the number is greater\par
# than 5, the second 'elif:' statement is executed "print(f'False! \{num\} is not greater\par
# than 5.')". If the number is less than or equal to 5, the third 'elif:' statement is\par
# executed "print(f'True! \{num\} is less than or equal to 5.')". If the number is greater\par
# than or equal to 5, the last 'elif:' statement is executed "print(f'False! \{num\} is is not\par
# greater than or equal to 5.')".\par
\cf0\par
\cf3 # Note: Python executes/runs programs starting from the top, downward. Be very\par
# careful on how you place statements. Some statements cannot execute right, even if\par
# they work. This is simply because of the order that Python executes/runs its\par
# program statements in the backqround.\par
\cf0\par
\cf3 # Type and execute/run this program example below and see what happens.\par
\par
# The 'int' statement is for integer values only.\par
\cf0\par
\cf1 num=int(input('Type in a number and I will condition the result against 5 as either \\\par
"true" or false" ').strip())\par
\par
if num==5:\par
    print(f'True! \{num\} equals equals 5.')\par
    \par
elif num<5:\par
    print(f'True! \{num\} is less than 5.')\par
    \par
elif num>5:\par
    print(f'False! \{num\} is not greater than 5.')\par
    \par
elif num<=5:\par
    print(f'True! \{num\} is less than or equal to 5.')\par
    \par
elif num>=5:\par
    print(f'False! \{num\} is is not greater than or equal to 5.')\par
\cf0\par
\cf3 # In this program example, the conditional 'else:' statement is executed only when the\par
# value 5 equals itself. Type and execute/run the program below and see what\par
# happens.\par
\par
# The 'int' statement is for integer values only.\par
\cf0\par
\cf1 integer=int(input("Please enter an integer less than 5 or greater than 5: ").strip())\par
\par
if integer<5:\par
    print(f'\{integer\} is less then 5')\par
    \par
elif integer>5:\par
    print(f'\{integer\} is greater than 5')\par
    \par
else:\par
    if integer==5:\par
        print(f'True! \{integer\} equals equals 5.')\par
\cf0\par
\cf3 # Type and execute/run this program example and change the value 'num=5' to\par
# different values, such as 'num=9', 'num=-7'.....\par
\cf0\par
\cf1 num=6\par
\par
if num<5:\par
    print(f'\{num\} is less than 5')\par
    \par
elif num>5:\par
    print(f'\{num\} is greater than 5')\par
    \par
else:\par
    if num==5:\par
        print(f'\{num\} equals equals 5.')\par
\cf0\par
\cf3 # The conditionals 'True' and 'False' will only be true if both conditonals are true. They\par
# can also be true if both conditionals are false. Conditionals cannot be true and false\par
# at the same time, nor can it be 'yes' and 'no' at the same time. For example, if 'True'\par
# and 'True' are the same, they equal rue. Likewise if 'False' and 'False' are the same,\par
# they too equal true. However 'True' and 'False' are not the same, so they equal  false. \par
# Likewise False' and 'True' are not the same, so they equal false as well. Type and\par
# execute/run these rogram examples below.\par
\cf0\par
\cf1 conditional=False\par
\par
if conditional==True:\par
     print('True!')\par
     \par
elif conditional==False:\par
     print('False!')\par
\par
conditional=True\par
\par
if conditional==False:\par
     print('Both conditonals are true!')\par
     print('True and True equals true.')\par
     \par
else:\par
     print('Both conditonals are false!')\par
     print('True and False equals False.')\par
\par
conditional=False\par
\par
if conditional==True:\par
     print('Both conditonals are true!')\par
     print('True and True equals true.')\par
     \par
else:\par
     print('Both conditonals are false!')\par
     print('False and True equals False.')\par
\par
conditional=True\par
\par
if conditional==True:\par
     print('Both conditonals are true!')\par
     print('True and True equals true.')\par
     \par
else:\par
     print('Both conditonals are false!')\par
     print('True and False equals False.')\par
\par
conditional=False\par
\par
if conditional==False:\par
     print('Both conditonals are true!')\par
     print('False and False equals true.')\par
     \par
else:\par
     print('Both conditonals are false!')\par
     print('True and False equals False.')\par
\par
conditional=True\par
\par
if conditional==True:\par
     print('True!')\par
     \par
elif conditional==False:\par
     print('False!')\par
\cf0\par
\cf3 # This small program example waits for the user to type "True" or "False". If the user\par
# types 'true', then the 'print' statement 'print('True!')' is executed. If the user types\par
# 'false', then the 'print' statement 'print('False!')' is executed.\par
\cf0\par
\cf1 conditional=input('Type the words "True" or "False" ').strip()\par
\par
if conditional=='true':\par
     print('True!')\par
     \par
elif conditional=='false':\par
     print('False!')\par
     \par
else:\par
     print('Oops! Wrong keys:')\par
\par
\cf3 # This program example waits for the user to type in a number against 5 to see if it's\par
# true or false. Type and execute/run this program example and type numbers, either\par
# less than 5 or greater than 5 or equal to 5.\cf1\par
\par
try:    \par
    num=int(input('Type in a number and I will condition the result against 5 as either \\\par
"true" or false" ').strip())\par
    \par
    if num==5:\par
        print(f'True! \{num\} equals equals 5.')\par
        \par
    elif num<5:\par
        print(f'True! \{num\} is less than 5.')\par
        \par
    elif num>5:\par
        print(f'False! \{num\} is not greater than 5.')\par
        \par
    elif num<=5:\par
        print(f'True! \{num\} is less than or equal to 5.')\par
        \par
    elif num>=5:\par
        print(f'False! \{num\} is is not greater than or equal to 5.')\par
        \par
except ValueError:\par
    print('That is incorrect!')\par
\par
\cf3 # Type and execute/run this fun true/false program example below and see what\par
# happens when you type either 'START', 'STOP' 'HELP' or 'Q'.\cf1\par
\par
start=False\par
\par
while True:\par
    command=input('SPACECRAFT\\n').lower().strip()\par
    \par
    if command=='start':\par
        if start:\par
            print('Spacecraft has already took off.')\par
            \par
        else:\par
            start=True\par
            print('Spacecraft is taking off!')\par
            \par
    elif command=='stop':\par
            if not start:\par
                print('Spacecraft has already landed.')\par
                \par
            else:\par
                start=False\par
                print('Spacecraft is landing.')\par
                \par
    elif command=='help':\par
        print('Type "START" to fly the spacecraft or type "STOP" to land the spacecraft. \\\par
Press "Q" to quit.\\n')\par
        \par
    elif command=='q':\par
        break\par
    \par
    else:\par
        print(f'Sorry! cannot understand "\{command\}".')\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 For-Loop Examples:\par

\pard\sl240\slmult1\qj\fs24 '''\par
Loops are instructions, which tells the computer to iterate/repeat a part of a program a certain numbers of times before it stops. When a loop reaches its final iteration, it stops and comes to an end. Loops make programming code very efficient, without the manual redundancy on the programmer's part. Loops can also manipulate data by incrementing it or decrementing it.\par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # The 'for i in range(5):' for-loop causes the 'print' statement value to print 'Hello\par
# World!' five times:\par
\cf0\par
\cf1 for i in range(5):\par
    print('\\nHello World!')\par
\cf0\par
\cf3 # Here is a manual, redundant example of this tuple string code without using a for-\par
# loop:\par
\cf0\par
\cf1 tuple_string_name=('Super Man','Bat Man','Spider Man')\par
\par
print(f'\\nMy name is \{tuple_string_name[0]\} and I\\'m a Super Hero.')\par
\par
print(f'\\nMy name is \{tuple_string_name[1]\} and I\\'m a Super Hero.')\par
\par
print(f'\\nMy name is \{tuple_string_name[2]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # Here is a manual, redundant example of this list string code without using a for-loop:\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
\par
print(f'\\nMy name is \{list_string_name[0]\} and I\\'m a Super Hero.')\par
\par
print(f'\\nMy name is \{list_string_name[1]\} and I\\'m a Super Hero.')\par
\par
print(f'\\nMy name is \{list_string_name[2]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # Here is a non manual example of this very same code, using a for-loop: The for-loop\par
# also inciments the string's data values, which makes the code more efficient, without\par
# the manual redundancy on the programmer's part.\par
\cf0\par
\cf1 tuple_string_name=('Super Man','Bat Man','Spider Man')\par
\par
for i in range(3):\par
    print(f'\\nMy name is \{tuple_string_name[i]\} and I\\'m a Super Hero.')\par
\par
list_string_name=['Super Man','Bat Man','Spider Man']\par
\par
for i in range(3):\par
    print(f'\\nMy name is \{list_string_name[i]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # The new 'list_string_name' value 'Halk' is appended/added at the end of the for-loop.\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
\par
list_string_name.append('Halk')\par
\par
for i in range(4):\par
    print(f'\\nMy name is \{list_string_name[i]\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # This for-loop example loops by using the string's variable, instead of using the range\par
# values.\par
\cf0\par
\cf1 list_string_name=['Super Man','Bat Man','Spider Man']\par
\par
list_string_name.append('Halk')\par
\par
for i in list_string_name:\par
        print(f'\\nMy name is \{i\} and I\\'m a Super Hero.')\par
\cf0\par
\cf3 # How to make a for-loop count, starting from 0 to 9 with a 'print' statement using the\par
# (f') format along with the words 'Count Loop!', with # a loop range # equal to 10.\par
\cf0\par
\cf1 for i in range(10):\par
    print(f'\\nCount Loop! "\{i\}" ')\par
\cf0\par
\cf3 # Here is a fun list looping program example with the for-loop. The animal_list variable\par
# gets incremented by (i) each cycle through the for-loop. The animal_list variable will\par
# keep iterating in the for-loop, until the values in animal_list gets completely cycled\par
# through the for-loop.\par
\cf0\par
\cf1 animal_list=['dog','cat','bird','duck','chicken']\par
\par
for i in animal_list:\par
    print(f'\\nI would love to own a \{i\}. I just love \{i\}s so much!')\par
\cf0\par
\cf3 # In this example the for-loop will cycle through the nums list, containing real integer\par
# values. When it encounters the 'if i==5:' statement, the 'print' statement (f'\{i\}: I found\par
# number "\{i\}" ') will execute followed by the 'break' statement. When the 'break'\par
# statement is executed, the for-loop stops iterating through the rest of the nums list\par
# values.\par
\cf0\par
\cf1 nums=[1,2,3,4,5,6,7,8,9]\par
\par
for i in nums:\par
    if i==5:\par
        print(f'\\n\{i\}: I found number "\{i\}" ')\par
        break\par
    print(f'\\n\{i\}')\par
\cf0\par
\cf3 # In this example the for-loop will cycle through the nums list, containing real integer\par
# values. When it encounters the 'if i==5:' statement, the 'print' statement (f'\\n\{i\}: I\par
# found number "\{i\}" ') will execute followed by the 'continue' statement. When the\par
# 'continue' statement is executed, the for-loop runs its complete iteration through the\par
# nums list values.\par
\cf0\par
\cf1 nums=[1,2,3,4,5,6,7,8,9]\par
\par
for i in nums:\par
    if i==5:\par
        print(f'\\n\{i\}: I found number "\{i\}" ')\par
        continue\par
    print(f'\\n\{i\}')\par
\cf0\par
\cf3 # In this example the for-loop will cycle through the dictionary_list key value's values.\par
# The key value "Animals" points to four values ['Dog','Cat','Bird','Fish]. When the first\par
# for-loop ends, the second for-loop will cycle through the key value "Reptiles", which\par
# points to four values ['Turtle','Lizard','Snake','Frog']. When the second for-loop ends, \par
# the third for-loop will cycle through the key value "Insects", which points to four\par
# values ['Butterfly','Beetle','Ant','Bee'].\par
\cf0\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
for values in range(4):\par
    print(dictionary_list['Animals'][values])\par
    \par
for values in range(4):\par
    print(dictionary_list['Reptiles'][values])\par
    \par
for values in range(4):\par
    print(dictionary_list['Insects'][values])\par
\cf0\par
\cf3 # In this example the for-loop will cycle through each of the dictionary_list key value's\par
# only. The 'print' statement 'print(key,value[0])' only prints out the first item of every\par
# key value's value. For example: the key value 'Animals' will only access the value \par
# 'Dog', then the for-loop will cycle over again to the next key value 'Reptiles', which\par
# again will only access the value 'Turtle'. The final for-loop will cycle through the\par
# dictionary_list key value 'Insects', which, once again will only access the value\par
# 'Butterfly'. However each of these key values are also printed along the left side of\par
# the values; example: "Animals Dog", "Reptiles Turtle", "Insects Butterfly". If you \par
# change the 'print' statement's value 'value[0]' to 'value[1]' the for-loop will only\par
# access the values "Animals Cat", "Reptiles Lizard", "Insects Beetle". Now, if you\par
# change the 'print' statement's value to 'value[2]' the "Animals key value will become\par
# "Animals Bird" and "Reptiles key value will become "Reptiles Snake" and Insects\par
# key value will become "Insects Ant". If you change the 'print' statement's value to\par
# 'value[3]', the last items in the key value's value will look like this:\par
\par
# "Animals Fish", "Reptiles Frog" and "Insects Bee". Try changing the 'print'\par
# statement 'value[number]' and see what happens when you execute/run the\par
# program.\par
\cf0\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
for key,value in dictionary_list.items():\par
    print(key,value[0])\par
\par
\cf3 # Take a very close look at the program example below. It's like a for-loop but it's a\par
# manual-loop. You decide how long this manual-loop will manually be. Take a close\par
# look at the highlighted 'iter' function and the highlighted 'next' function in the 'print'\par
# statements. These functions are what make this manual-loop possible. However, if\par
# you want to add more 'print' statements with 'next' functions in them, you also need\par
# to add more values inside the variable. For example, the variable 'book' has the\par
# values of the name of this book. Type and execute/run the program example below;\par
# add more values, change values and see what happens each time you re-xecute/run\par
# the program.\par
\par
\cf1 book=('Python',"Programmer's",'Glossary','Bible')\par
\par
manual_loop=\highlight2 iter\highlight0 (book)\par
print(\highlight2 next\highlight0 (manual_loop),end=' ')\par
print(\highlight2 next\highlight0 (manual_loop),end=' ')\par
print(\highlight2 next\highlight0 (manual_loop),end=' ')\par
print(\highlight2 next\highlight0 (manual_loop))\par

\pard\sl240\slmult1\qj\cf0\par

\pard\sl240\slmult1\cf3 # For-loops can have other for-loops nested inside them, called a 'Nest'. The main,\par
# outer for-loop repeats one whole cycle through, while the nested, inner for-loop\par
# repeats its entire cycles through on each cycle of the main, outer for-loop. On the\par
# next cycle of the main, outer for-loop, the nested, inner for-loop repeats its entire\par
# cycles all over again.\par
\cf1\par
for i in range(3):\par
    print(f'\\nRepeat main loop "for i in range(\{i\}):" cycles.\\n')\par
    for x in range(4):\par
        print(f'Repeat nest loop "for x in range(\{x\}):" cycles.')\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 While-loop Examples:\par

\pard\sl240\slmult1\qj\fs24 '''\par
While-loops are conditional loops that end when a certain condition is met, or when a certain value is found to be true. In Python, while-loops also work in conjunction with 'If' and 'Elif' and 'Else' statements.\par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # Here is just one example of a conditional while-loop, which counts, starting from 0 to\par
# 9 with a 'print' statement using the (f') format along withthe words 'Count Loop!', with\par
# a loop conditional value of 10. As long # as (i) is less (<) than 10, the while-loop will\par
# keep on looping until (i) is equal to 10.\par
\cf0\par
\cf1 i=0\par
while i<10:\par
    print(f'\\nCount Loop! "\{i\}" ')\par
    i+=1\par
\cf0\par
\cf3 # This conditional while-loop example will never ever stop looping, until the user\par
# presses either "y" or "n" followed by pressing the "Enter" key to confirm. If the user\par
# presses any other key except "y" or "n", the conditional while loop will keep on\par
# looping forever. After the while-loop gets broken, the final 'print' statement ('"Yay!"\par
# You broke the while-loop example.') will execute/run, which ends the conditional\par
# while-loop example. You can add as many 'if' and 'elif' statements you like within a \par
# while-loop. Note: these two 'break' statements causes the while-loop to stop looping.\par
# If the 'break' statements weren't used, the while-loop would just keep on going\par
# forever, making the user press the same keys forever. All loops must come to an\par
# end, such as for-loops and conditional while-loops alike. If a loop is infinite, running\par
# away, the program and/or computer will eventually crash. It's important to make \par
# sure loops always break out or end when a certain condition is met, such as in this\par
# conditional while-loop example.\par
\cf0\par
\cf3 # The '.strip()' function clears away unwanted white spaces, via user input data.\par
\cf0\par
\cf1 while True:\par
    Letter=input('\\nYou must press "y" or "n" then press (ENTER) to break out of this \\\par
conditional while-loop example: ').strip()\par
    \par
    if Letter==('y'):\par
        print('\\nThe "y" key was pressed and the while-loop breaks.')\par
        break\par
    \par
    elif Letter==('n'):\par
        print('\\nThe "n" key was pressed and the while-loop breaks.')\par
        break\par
    \par
print('\\n"Yay!" You broke out of the while-loop example.')\par
\cf0\par
\cf3 # This conditional while-loop example will never ever stop looping, until the user\par
# presses "y" followed by the "Enter" key to confirm. If the user presses any other key\par
# except "y", the conditional while-loop will keep on looping forever. After the while-\par
# loop gets broken, the final 'print' statement (f'You gave me "\{letter\}", so I broke out\par
# of the conditonal while loop example.') will execute/run. Now if the user doesn't\par
# press the right key, either less (<) than "y" or greater (>) than "y", the key \par
# mapping range will always execute/run the 'print' statement (f'Oops! You give me\par
# "\{letter\}", so I won\\'t stop this condional while-loop example, until you give me "y".'),\par
# and the loop keeps on iterating over and over, until the user presses 'y'. After the\par
# while-loop gets broken, the final 'print' statement ('This is the end of the entire\par
# conditional while-loop example.') will execute/run.\par
\par
# Note: Python executes/runs programs starting from the top, downward. Be very\par
# careful on how you place statements. Some statements cannot execute right, even if\par
# they work. This is simply because of the order that Python executes/runs its program\par
# statements.\par
\cf0\par
\cf1 while True:\par
    letter=input('\\nGive Me "y": ').strip()\par
    if letter=='y':\par
        print(f'\\nYou gave me "\{letter\}", so I broke out of the conditonal \\\par
while-loop example.')\par
        break\par
    \par
    elif letter<'y' or letter>'y':\par
        print(f'\\nOops! You give me "\{letter\}", so I won\\'t stop this condional \\\par
while-loop example, until you give me "y".')\par
        \par
print('\\nThis is the end of the entire conditional while-loop example:')\par
\cf0\par
\cf3 # This conditional while-loop example will never ever stop looping, until the user types\par
# the number "10" followed by pressing the "Enter" key to confirm. If the user types\par
# any other number keys except "10", the conditional while-loop will keep on looping\par
# forever. After the while-loop gets broken, the final 'print' statement ('This is the end\par
# of the entire conditional while-loop example.') will execute/run.\par
\par
# Note: the 'int' statement is for integer values only.\par
\par
# Note: Python executes/runs programs starting from the top, downward. Be very\par
# careful on how you place statements. Some statements cannot execute right, even if\par
# they work. This is simply because of the order that Python executes/runs its\par
# program statements.\par
\cf0\par
\cf1 while True:\par
    number=int(input('\\nGive Me "10": ').strip())\par
    if number==10:\par
        print(f'\\nYou gave me "\{number\}", so I broke out of the conditonal \\\par
while-loop example.')\par
        break\par
    \par
    elif number<10:\par
        print(f'\\nOops! You give me "\{number\}", which is too small. I won\\'t \\\par
stop this condional while-loop example, until you give me "10".')\par
        \par
    elif number>10:\par
        print(f'\\nOops! You give me "\{number\}", which is too big. I won\\'t stop \\\par
this condional while-loop example, until you give me "10".')\par
\par
print('\\nThis is the end of the entire conditional while-loop example:')\par
\par

\pard\sl240\slmult1\qc\cf0\fs28 Try and Except Error Handlers:\fs24\par

\pard\sl240\slmult1\qj '''\par
This code below is exactly the same as the code above, but with one exception. The code below has an error handler called 'try:' and 'except:' whereas the very same code above does not have an error handler at all. This spells disaster when you want the user to type numbers only. Without an error handler, if the user types a letter instead of a number, the program will crash leaving the user very unhappy with your newly developed software. It's imperative that in some situations, error handlers must be implemented into the program to prevent unwanted errors from occurring, such as in this error handler example code. Below is a complete list of exception handlers.\par
\par
\cf3{\*\shppict{\pict{\*\picprop}\emfblip\picw207\pich271\picwgoal8700\pichgoal4560 
010000006c00000000000000000000005c1200008b0900000000000000000000224e0000ed2800
0020454d4600000100085c0000fe00000003000000000000000000000000000000241300000019
0000cf0000000f010000000000000000000000000000492a030055220400460000002c00000020
000000454d462b014001001c000000100000000210c0db00000000580200005802000046000000
5c00000050000000454d462b224004000c000000000000001e4009000c00000000000000244001
000c000000000000003040020010000000040000000000803f214007000c000000000000000440
00000c00000000000000160000000c000000180000000a00000010000000000000000000000009
0000001000000075120000ab090000250000000c0000000e000080120000000c00000001000000
5200000070010000010000009cffffff0000000000000000000000009001000000000000074000
12540069006d006500730020004e0065007700200052006f006d0061006e000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000006404093000000000040000005c50a830a104093000000000000000004716900100
0002020603050405020304ff3e00e05b7800c00900000000000000ff0100000000000054006900
6d006500730020004e0065007700200052006f006d0061006e0000002f0309305050a830d04f47
000100000090007a006476000800000000250000000c00000001000000180000000c0000000000
0002540000005400000000000000000000002b0000007000000001000000052f874000808740ff
ffffff59000000010000004c00000004000000000000000000000075120000ab09000050000000
200000002d00000046000000280000001c0000004744494302000000ffffffffffffffff761200
00ac09000000000000460000001400000008000000474449430300000021000000080000001e00
000018000000ccffffff1e000000a91200008c090000520000007001000002000000a4ffffff00
000000000000000000000090010000000000000740002241007200690061006c00200052006f00
75006e0064006500640020004d005400200042006f006c00640000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000532690010000020f0704030504030204030000000000
00000000000000000000010000000000000041007200690061006c00200052006f0075006e0064
006500640020004d005400200042006f006c00640000002e002e002e0029006476000800000000
250000000c00000002000000120000000c0000000100000054000000a00000003b0000001e0000
00e10200008700000001000000052f8740008087403b000000750000000e0000004c0000000400
0000080000000000000024060000ab090000680000006500780063006500700074002000410072
006900740068006d006500370000003000000036000000360000003a0000002100000017000000
420000002800000018000000210000003800000050000000370000005400000084000000e20200
001e0000005a0400008700000001000000052f874000808740e202000075000000090000004c00
000004000000080000000000000024060000ab090000600000007400690063004500720072006f
0072003a00ffff2000000019000000370000003d00000028000000280000003700000028000000
1d00000054000000540000005b0400001e0000008d0400008700000001000000052f8740008087
405b04000075000000010000004c00000004000000080000000000000024060000ab0900005000
00002000000033000000120000000c0000000100000054000000cc000000510600001e0000004b
0a00008700000001000000052f8740008087405106000075000000150000004c00000004000000
1e06000000000000ea0c0000ab0900007800000065007800630065007000740020004600750074
007500720065005700610072006e0069006e0067003a0000003700000030000000360000003600
00003a000000210000001600000038000000370000002000000038000000280000003700000056
0000003700000027000000380000001800000038000000390000001c0000005400000054000000
4c0a00001e0000007e0a00008700000001000000052f8740008087404c0a000075000000010000
004c000000040000001e06000000000000ea0c0000ab0900005000000020006f00330000001200
00000c0000000100000054000000d8000000170d00001e00000054110000870000000100000005
2f874000808740170d000075000000170000004c00000004000000e40c0000000000005d120000
ab0900007c00000065007800630065007000740020005000650072006d0069007300730069006f
006e004500720072006f0072003a006500370000003000000036000000360000003a0000002100
0000170000003c0000003700000028000000510000001900000032000000320000001800000038
000000380000003d000000280000002700000037000000280000001d0000005400000054000000
551100001e000000871100008700000001000000052f8740008087405511000075000000010000
004c00000004000000e40c0000000000005d120000ab0900005000000020006500330000001200
00000c0000000100000054000000d00000003b0000009400000033040000fd0000000100000005
2f8740008087403b000000eb000000160000004c00000004000000080000000000000024060000
ab09000078000000650078006300650070007400200041007300730065007200740069006f006e
004500720072006f0072003a00370000003000000036000000360000003a000000210000001700
00004100000032000000320000003700000027000000210000001800000038000000380000003d
000000280000002800000038000000270000001c00000054000000540000003404000094000000
66040000fd00000001000000052f87400080874034040000eb000000010000004c000000040000
00080000000000000024060000ab090000500000002000000033000000120000000c0000000100
000054000000cc0000005106000094000000220a0000fd00000001000000052f87400080874051
060000eb000000150000004c000000040000001e06000000000000ea0c0000ab09000078000000
6500780063006500700074002000470065006e0065007200610074006f00720045007800690074
003a000000370000003000000036000000360000003a0000002100000016000000490000003600
0000380000003700000027000000370000002000000038000000280000003d0000003000000019
000000200000001c0000005400000054000000230a000094000000550a0000fd00000001000000
052f874000808740230a0000eb000000010000004c000000040000001e06000000000000ea0c00
00ab090000500000002000000033000000120000000c0000000100000054000000e8000000170d
0000940000001c120000fd00000001000000052f874000808740170d0000eb0000001a0000004c
00000004000000e40c0000000000005d120000ab09000080000000650078006300650070007400
2000500072006f0063006500730073004c006f006f006b00750070004500720072006f0072003a
00370000003000000036000000360000003a00000021000000170000003d000000280000003700
000036000000370000003200000031000000380000003700000038000000340000003700000039
0000003d000000280000002800000038000000280000001d00000054000000540000001d120000
940000004f120000fd00000001000000052f8740008087401d120000eb000000010000004c0000
0004000000e40c0000000000005d120000ab090000500000002000000033000000120000000c00
00000100000054000000d00000003b0000000b010000130400007401000001000000052f874000
8087403b00000062010000160000004c00000004000000080000000000000024060000ab090000
780000006500780063006500700074002000410074007400720069006200750074006500450072
0072006f0072003a00370000003000000036000000360000003a00000021000000170000004100
000021000000210000002800000018000000390000003800000020000000370000003d00000028
0000002800000038000000280000001c0000005400000054000000140400000b01000046040000
7401000001000000052f8740008087401404000062010000010000004c00000004000000080000
000000000024060000ab090000500000002000000033000000120000000c000000010000005400
0000c0000000510600000b010000c60900007401000001000000052f8740008087405106000062
010000130000004c000000040000001e06000000000000ea0c0000ab0900007400000065007800
6300650070007400200049006d0070006f00720074004500720072006f0072003a000000370000
003000000036000000360000003a00000021000000170000001d00000050000000390000003800
000028000000210000003d000000280000002800000038000000280000001d0000005400000054
000000c70900000b010000f80900007401000001000000052f874000808740c709000062010000
010000004c000000040000001e06000000000000ea0c0000ab0900005000000020000000320000
00120000000c0000000100000054000000d0000000170d00000b0100002c110000740100000100
0000052f874000808740170d000062010000160000004c00000004000000e40c0000000000005d
120000ab0900007800000065007800630065007000740020005200650063007500720073006900
6f006e004500720072006f0072003a00370000003000000036000000360000003a000000210000
001700000041000000370000003600000038000000280000003200000018000000380000003800
00003d000000280000002700000038000000280000001d00000054000000540000002d1100000b
0100005f1100007401000001000000052f8740008087402d11000062010000010000004c000000
04000000e40c0000000000005d120000ab090000500000002000000033000000120000000c0000
000100000054000000cc0000003b0000008101000036040000ea01000001000000052f87400080
87403b000000d8010000150000004c00000004000000080000000000000024060000ab09000078
000000650078006300650070007400200042006100730065004500780063006500700074006900
6f006e003a000000370000003000000036000000360000003a0000002100000017000000410000
003700000031000000370000003d00000030000000360000003700000039000000210000001800
000038000000370000001c0000005400000054000000370400008101000069040000ea01000001
000000052f87400080874037040000d8010000010000004c000000040000000800000000000000
24060000ab090000500000002000000033000000120000000c0000000100000054000000840000
00510600008101000002080000ea01000001000000052f87400080874051060000d80100000900
00004c000000040000001e06000000000000ea0c0000ab09000060000000650078006300650070
007400200049006d000000370000003000000036000000360000003a0000002100000017000000
1d000000500000005400000078000000030800008101000070090000ea01000001000000052f87
400080874003080000d8010000070000004c000000040000001e06000000000000ea0c0000ab09
00005c00000070006f007200740057006100720072003900000038000000280000002100000055
000000370000002800000054000000540000007109000081010000a8090000ea01000001000000
052f87400080874071090000d8010000010000004c000000040000001e06000000000000ea0c00
00ab090000500000006e000000380000005400000064000000a9090000810100004d0a0000ea01
000001000000052f874000808740a9090000d8010000040000004c000000040000001e06000000
000000ea0c0000ab0900005400000069006e0067003a0018000000370000003a0000001c000000
54000000540000004e0a000081010000800a0000ea01000001000000052f8740008087404e0a00
00d8010000010000004c000000040000001e06000000000000ea0c0000ab090000500000002000
740033000000120000000c000000010000005400000060000000170d000081010000b30d0000ea
01000001000000052f874000808740170d0000d8010000030000004c00000004000000e40c0000
000000005d120000ab090000540000006500780063000000370000003000000036000000540000
00c0000000b40d00008101000034110000ea01000001000000052f874000808740b40d0000d801
0000130000004c00000004000000e40c0000000000005d120000ab090000740000006500700074
0020005200650066006500720065006e00630065004500720072006f0072003a00000036000000
3a000000210000001700000041000000370000001e000000370000002800000036000000380000
0036000000370000003d000000280000002800000037000000280000001d000000540000005400
0000351100008101000067110000ea01000001000000052f87400080874035110000d801000001
0000004c00000004000000e40c0000000000005d120000ab090000500000002000000033000000
120000000c0000000100000054000000d80000003b000000f80100007404000061020000010000
00052f8740008087403b0000004f020000170000004c0000000400000008000000000000002406
0000ab0900007c000000650078006300650070007400200042006c006f0063006b0069006e0067
0049004f004500720072006f0072003a000000370000003000000036000000360000003a000000
210000001700000042000000180000003700000037000000350000001800000038000000390000
001d000000490000003d000000280000002800000037000000280000001d000000540000005400
000075040000f8010000a70400006102000001000000052f874000808740750400004f02000001
0000004c00000004000000080000000000000024060000ab090000500000002000000033000000
120000000c0000000100000054000000c000000051060000f8010000cc09000061020000010000
00052f874000808740510600004f020000130000004c000000040000001e06000000000000ea0c
0000ab09000074000000650078006300650070007400200049006e00640065006e007400610074
0069006f006e0045008740370000003000000036000000360000003a0000002100000017000000
1c000000370000003a000000360000003800000020000000360000002100000019000000370000
00380000003d0000005400000054000000cd090000f8010000f40900006102000001000000052f
874000808740cd0900004f020000010000004c000000040000001e06000000000000ea0c0000ab
0900005000000072000000280000005400000064000000f5090000f8010000980a000061020000
01000000052f874000808740f50900004f020000040000004c000000040000001e060000000000
00ea0c0000ab0900005400000072006f0072003a002700000038000000280000001d0000005400
000054000000990a0000f8010000ca0a00006102000001000000052f874000808740990a00004f
020000010000004c000000040000001e06000000000000ea0c0000ab0900005000000020000000
32000000120000000c0000000100000054000000d8000000170d0000f80100009b110000610200
0001000000052f874000808740170d00004f020000170000004c00000004000000e40c00000000
00005d120000ab0900007c00000065007800630065007000740020005200650073006f00750072
00630065005700610072006e0069006e0067003a00000037000000300000003600000036000000
3a0000002100000017000000410000003700000031000000380000003800000027000000370000
0037000000550000003700000028000000380000001800000038000000390000001d0000005400
0000540000009c110000f8010000cd1100006102000001000000052f8740008087409c1100004f
020000010000004c00000004000000e40c0000000000005d120000ab0900005000000020000000
32000000120000000c0000000100000054000000d80000003b0000006f02000092040000d80200
0001000000052f8740008087403b000000c6020000170000004c00000004000000080000000000
000024060000ab0900007c0000006500780063006500700074002000420072006f006b0065006e
0050006900700065004500720072006f0072003a00000037000000300000003600000036000000
3a00000021000000170000004200000027000000380000003400000037000000380000003d0000
001800000039000000370000003d000000280000002800000038000000280000001d0000005400
000054000000930400006f020000c4040000d802000001000000052f87400080874093040000c6
020000010000004c00000004000000080000000000000024060000ab0900005000000020000000
32000000120000000c00000001000000540000009c000000510600006f020000c5080000d80200
0001000000052f87400080874051060000c60200000d0000004c000000040000001e0600000000
0000ea0c0000ab09000068000000650078006300650070007400200049006e0064006500780045
000000370000003000000036000000360000003a00000021000000170000001c00000037000000
3a00000036000000300000003d0000005400000054000000c60800006f020000ed080000d80200
0001000000052f874000808740c6080000c6020000010000004c000000040000001e0600000000
0000ea0c0000ab0900005000000072000000280000005400000064000000ee0800006f02000092
090000d802000001000000052f874000808740ee080000c6020000040000004c00000004000000
1e06000000000000ea0c0000ab0900005400000072006f0072003a002800000038000000280000
001d0000005400000054000000930900006f020000c4090000d802000001000000052f87400080
874093090000c6020000010000004c000000040000001e06000000000000ea0c0000ab09000050
0000002000000032000000120000000c0000000100000054000000c4000000170d00006f020000
d6100000d802000001000000052f874000808740170d0000c6020000140000004c000000040000
00e40c0000000000005d120000ab09000074000000650078006300650070007400200052007500
6e00740069006d0065004500720072006f0072003a00370000003000000036000000360000003a
000000210000001700000041000000380000003700000021000000190000005000000037000000
3d000000280000002800000038000000280000001d0000005400000054000000d71000006f0200
0008110000d802000001000000052f874000808740d7100000c6020000010000004c0000000400
0000e40c0000000000005d120000ab090000500000002000000032000000120000000c00000001
00000054000000c00000003b000000e60200009e0300004f03000001000000052f874000808740
3b0000003d030000130000004c00000004000000080000000000000024060000ab090000740000
0065007800630065007000740020004200750066006600650072004500720072006f0072003a00
0000370000003000000036000000360000003a000000210000001700000041000000380000001e
0000001f00000037000000280000003d000000280000002800000038000000280000001d000000
54000000540000009f030000e6020000d00300004f03000001000000052f8740008087409f0300
003d030000010000004c00000004000000080000000000000024060000ab090000500000002000
874032000000120000000c0000000100000054000000c000000051060000e6020000ce0900004f
03000001000000052f874000808740510600003d030000130000004c000000040000001e060000
00000000ea0c0000ab09000074000000650078006300650070007400200049006e007400650072
0072007500700074006500640045000000370000003000000036000000360000003a0000002100
0000170000001c0000003700000021000000370000002800000028000000370000003900000021
000000360000003a0000003d0000005400000054000000cf090000e6020000f60900004f030000
01000000052f874000808740cf0900003d030000010000004c000000040000001e060000000000
00ea0c0000ab0900005000000072000000280000005400000064000000f7090000e60200009a0a
00004f03000001000000052f874000808740f70900003d030000040000004c000000040000001e
06000000000000ea0c0000ab0900005400000072006f0072003a00270000003800000028000000
1d00000054000000540000009b0a0000e6020000cc0a00004f03000001000000052f8740008087
409b0a00003d030000010000004c000000040000001e06000000000000ea0c0000ab0900005000
00002000000032000000120000000c0000000100000054000000d0000000170d0000e60200005f
1100004f03000001000000052f874000808740170d00003d030000160000004c00000004000000
e40c0000000000005d120000ab090000780000006500780063006500700074002000520075006e
00740069006d0065005700610072006e0069006e0067003a003700000030000000360000003600
00003a000000210000001700000041000000380000003700000021000000190000005000000037
0000005600000037000000270000003800000019000000370000003a0000001d00000054000000
5400000060110000e6020000911100004f03000001000000052f874000808740601100003d0300
00010000004c00000004000000e40c0000000000005d120000ab09000050000000200087403200
0000120000000c0000000100000054000000c40000003b0000005c0300000c040000c503000001
000000052f8740008087403b000000b3030000140000004c000000040000000800000000000000
24060000ab09000074000000650078006300650070007400200042007900740065007300570061
0072006e0069006e0067003a00370000003000000036000000360000003a000000210000001700
000041000000320000002000000037000000320000005600000037000000270000003800000018
00000038000000390000001c00000054000000540000000d0400005c0300003f040000c5030000
01000000052f8740008087400d040000b3030000010000004c0000000400000008000000000000
0024060000ab090000500000002000000033000000120000000c00000001000000540000008800
0000510600005c03000037080000c503000001000000052f87400080874051060000b30300000a
0000004c000000040000001e06000000000000ea0c0000ab090000600000006500780063006500
70007400200049004f004500370000003000000036000000360000003a00000021000000170000
001c000000490000003d0000005400000054000000380800005c0300005f080000c50300000100
0000052f87400080874038080000b3030000010000004c000000040000001e06000000000000ea
0c0000ab0900005000000072006500280000005400000064000000600800005c03000004090000
c503000001000000052f87400080874060080000b3030000040000004c000000040000001e0600
0000000000ea0c0000ab0900005400000072006f0072003a002800000038000000280000001d00
00005400000054000000050900005c03000036090000c503000001000000052f87400080874005
090000b3030000010000004c000000040000001e06000000000000ea0c0000ab09000050000000
2000000032000000120000000c0000000100000054000000e8000000170d00005c030000d41100
00c503000001000000052f874000808740170d0000b30300001a0000004c00000004000000e40c
0000000000005d120000ab090000800000006500780063006500700074002000530074006f0070
004100730079006e00630049007400650072006100740069006f006e003a003700000030000000
36000000360000003a00000021000000170000003c00000021000000370000003a000000420000
00310000003200000037000000370000001c000000210000003700000028000000360000002100
00001900000037000000380000001d0000005400000054000000d51100005c03000006120000c5
03000001000000052f874000808740d5110000b3030000010000004c00000004000000e40c0000
000000005d120000ab090000500000002000000032000000120000000c00000001000000540000
00e40000003b000000d3030000db0400003c04000001000000052f8740008087403b0000002a04
0000190000004c00000004000000080000000000000024060000ab090000800000006500780063
0065007000740020004300680069006c006400500072006f006300650073007300450072007200
6f0072003a000000370000003000000036000000360000003a0000002100000017000000430000
003800000019000000180000003a0000003d000000280000003700000037000000360000003200
0000320000003d000000270000002800000038000000280000001d0000005400000054000000dc
040000d30300000d0500003c04000001000000052f874000808740dc0400002a04000001000000
4c00000004000000080000000000000024060000ab090000500000002000000032000000120000
000c0000000100000054000000c400000051060000d3030000060a00003c04000001000000052f
874000808740510600002a040000140000004c000000040000001e06000000000000ea0c0000ab
090000740000006500780063006500700074002000490073004100440069007200650063007400
6f00720079004500370000003000000036000000360000003a00000021000000170000001c0000
003200000042000000440000001900000028000000360000003600000021000000380000002800
0000320000003d0000005400000054000000070a0000d30300002d0a00003c0400000100000005
2f874000808740070a00002a040000010000004c000000040000001e06000000000000ea0c0000
ab09000050000000720000002700000054000000640000002e0a0000d3030000d20a00003c0400
0001000000052f8740008087402e0a00002a040000040000004c000000040000001e0600000000
0000ea0c0000ab0900005400000072006f0072003a002800000038000000280000001d00000054
00000054000000d30a0000d3030000040b00003c04000001000000052f874000808740d30a0000
2a040000010000004c000000040000001e06000000000000ea0c0000ab09000050000000200000
0032000000120000000c0000000100000054000000cc000000170d0000d3030000c01000003c04
000001000000052f874000808740170d00002a040000150000004c00000004000000e40c000000
0000005d120000ab090000780000006500780063006500700074002000530074006f0070004900
7400650072006100740069006f006e003a000000370000003000000036000000360000003a0000
0021000000170000003c00000021000000370000003a0000001c00000021000000370000002700
000037000000210000001800000037000000380000001d0000005400000054000000c1100000d3
030000f21000003c04000001000000052f874000808740c11000002a040000010000004c000000
04000000e40c0000000000005d120000ab090000500000002000874032000000120000000c0000
000100000054000000000100003b00000049040000f2050000b204000001000000052f87400080
87403b000000a00400001e0000004c00000004000000080000000000000024060000ab09000088
000000650078006300650070007400200043006f006e006e0065006300740069006f006e004100
62006f0072007400650064004500720072006f0072003a00370000003000000036000000360000
003a00000021000000170000004300000037000000380000003700000037000000360000002100
00001800000038000000380000004100000039000000370000002800000021000000360000003a
0000003d000000280000002800000038000000280000001d0000005400000054000000f3050000
4904000023060000b204000001000000052f874000808740f3050000a0040000010000004c0000
0004000000080000000000000024060000ab090000500000002000000032000000120000000c00
00000100000054000000c400000051060000490400001c0a0000b204000001000000052f874000
80874051060000a0040000140000004c000000040000001e06000000000000ea0c0000ab090000
7400000065007800630065007000740020004b006500790062006f0061007200640049006e0074
0065007200370000003000000036000000360000003a0000002100000017000000430000003700
0000310000003a0000003700000037000000270000003a0000001d000000370000002000000037
0000002800000054000000540000001d0a000049040000440a0000b204000001000000052f8740
008087401d0a0000a0040000010000004c000000040000001e06000000000000ea0c0000ab0900
005000000072000000280000005400000064000000450a000049040000f30a0000b20400000100
0000052f874000808740450a0000a0040000040000004c000000040000001e06000000000000ea
0c0000ab090000540000007500700074003a003800000039000000210000001d00000054000000
54000000f40a000049040000250b0000b204000001000000052f874000808740f40a0000a00400
00010000004c000000040000001e06000000000000ea0c0000ab09000050000000200065003200
0000120000000c0000000100000054000000c0000000170d00004904000091100000b204000001
000000052f874000808740170d0000a0040000130000004c00000004000000e40c000000000000
5d120000ab090000740000006500780063006500700074002000530079006e0074006100780045
00720072006f0072003a000000370000003000000036000000360000003a000000210000001700
00003d00000031000000380000002000000037000000300000003d000000280000002800000038
000000270000001d00000054000000540000009210000049040000c3100000b204000001000000
052f87400080874092100000a0040000010000004c00000004000000e40c0000000000005d1200
00ab090000500000002000000032000000120000000c0000000100000054000000d80000003b00
0000c0040000870400002905000001000000052f8740008087403b00000017050000170000004c
00000004000000080000000000000024060000ab0900007c000000650078006300650070007400
200043006f006e006e0065006300740069006f006e004500720072006f0072003a000000370000
003000000036000000360000003a00000021000000170000004300000037000000380000003700
00003700000036000000210000001800000038000000380000003d000000280000002700000038
000000280000001d000000540000005400000088040000c0040000b90400002905000001000000
052f8740008087408804000017050000010000004c000000040000000800000000000000240600
00ab090000500000002000000032000000120000000c0000000100000054000000900000005106
0000c00400007e0800002905000001000000052f87400080874051060000170500000b0000004c
000000040000001e06000000000000ea0c0000ab09000064000000650078006300650070007400
20004b006500790045000000370000003000000036000000360000003a00000021000000170000
004300000037000000320000003d00000054000000540000007f080000c0040000a60800002905
000001000000052f8740008087407f08000017050000010000004c000000040000001e06000000
000000ea0c0000ab0900005000000072006e00280000005400000064000000a7080000c0040000
4b0900002905000001000000052f874000808740a708000017050000040000004c000000040000
001e06000000000000ea0c0000ab0900005400000072006f0072003a0028000000380000002800
00001d00000054000000540000004c090000c00400007d0900002905000001000000052f874000
8087404c09000017050000010000004c000000040000001e06000000000000ea0c0000ab090000
500000002000000032000000120000000c0000000100000054000000cc000000170d0000c00400
00191100002905000001000000052f874000808740170d000017050000150000004c0000000400
0000e40c0000000000005d120000ab090000780000006500780063006500700074002000530079
006e007400610078005700610072006e0069006e0067003a000000370000003000000036000000
360000003a00000021000000170000003d00000031000000380000002000000037000000300000
00550000003700000028000000380000001800000037000000390000001d000000540000005400
00001a110000c00400004c1100002905000001000000052f8740008087401a1100001705000001
0000004c00000004000000e40c0000000000005d120000ab090000500000002000000033000000
120000000c0000000100000054000000000100003b00000037050000f6050000a0050000010000
00052f8740008087403b0000008e0500001e0000004c0000000400000008000000000000002406
0000ab09000088000000650078006300650070007400200043006f006e006e0065006300740069
006f006e0052006500660075007300650064004500720072006f0072003a003700000030000000
36000000360000003a000000210000001700000043000000370000003800000037000000370000
00360000002100000018000000380000003800000041000000370000001e000000380000003200
0000360000003a0000003d000000280000002800000038000000270000001c0000005400000054
000000f70500003705000023060000a005000001000000052f874000808740f70500008e050000
010000004c00000004000000080000000000000024060000ab0900005000000020000000330000
00120000000c0000000100000054000000a000000051060000370500001d090000a00500000100
0000052f874000808740510600008e0500000e0000004c000000040000001e06000000000000ea
0c0000ab0900006800000065007800630065007000740020004c006f006f006b00750070004500
370000003000000036000000360000003a00000021000000160000003800000037000000380000
0034000000370000003a0000003d00000054000000540000001e0900003705000045090000a005
000001000000052f8740008087401e0900008e050000010000004c000000040000001e06000000
000000ea0c0000ab09000050000000720000002800000054000000640000004609000037050000
ea090000a005000001000000052f874000808740460900008e050000040000004c000000040000
001e06000000000000ea0c0000ab0900005400000072006f0072003a0028000000380000002800
00001d0000005400000054000000eb090000370500001c0a0000a005000001000000052f874000
808740eb0900008e050000010000004c000000040000001e06000000000000ea0c0000ab090000
500000002000000032000000120000000c0000000100000054000000c0000000170d0000370500
00ad100000a005000001000000052f874000808740170d00008e050000130000004c0000000400
0000e40c0000000000005d120000ab090000740000006500780063006500700074002000530079
007300740065006d004500720072006f0072003a00000037000000300000003600000036000000
3a00000021000000170000003d00000031000000320000002000000037000000510000003d0000
00280000002800000038000000280000001d0000005400000054000000ae10000037050000df10
0000a005000001000000052f874000808740ae1000008e050000010000004c00000004000000e4
0c0000000000005d120000ab090000500000002000000032000000120000000c00000001000000
54000000f40000003b000000ae050000890500001706000001000000052f8740008087403b0000
00050600001c0000004c00000004000000080000000000000024060000ab090000840000006500
78006300650070007400200043006f006e006e0065006300740069006f006e0052006500730065
0074004500720072006f0072003a00370000003000000036000000360000003a00000021000000
170000004300000037000000380000003700000037000000360000002100000018000000380000
003800000041000000370000003100000037000000210000003d00000028000000280000003800
0000280000001d00000054000000540000008a050000ae050000bb050000170600000100000005
2f8740008087408a05000005060000010000004c00000004000000080000000000000024060000
ab0900005000000020006f0032000000120000000c0000000100000054000000a0000000510600
00ae050000370900001706000001000000052f87400080874051060000050600000e0000004c00
0000040000001e06000000000000ea0c0000ab0900006800000065007800630065007000740020
004d0065006d006f00720079004500370000003000000036000000360000003a00000021000000
160000004d00000037000000500000003800000028000000320000003d00000054000000540000
0038090000ae0500005f0900001706000001000000052f87400080874038090000050600000100
00004c000000040000001e06000000000000ea0c0000ab09000050000000720000002800000054
0000006400000060090000ae050000040a00001706000001000000052f87400080874060090000
05060000040000004c000000040000001e06000000000000ea0c0000ab0900005400000072006f
0072003a002800000038000000280000001d0000005400000054000000050a0000ae050000360a
00001706000001000000052f874000808740050a000005060000010000004c000000040000001e
06000000000000ea0c0000ab090000500000002000874032000000120000000c00000001000000
54000000b8000000170d0000ae050000661000001706000001000000052f874000808740170d00
0005060000120000004c00000004000000e40c0000000000005d120000ab090000700000006500
780063006500700074002000530079007300740065006d0045007800690074003a003700000030
00000036000000360000003a00000021000000170000003d000000310000003200000020000000
37000000510000003d0000003000000019000000200000001d0000005400000054000000671000
00ae050000981000001706000001000000052f8740008087406710000005060000010000004c00
000004000000e40c0000000000005d120000ab090000500000002000000032000000120000000c
0000000100000054000000e80000003b00000024060000390500008d06000001000000052f8740
008087403b0000007b0600001a0000004c00000004000000080000000000000024060000ab0900
008000000065007800630065007000740020004400650070007200650063006100740069006f00
6e005700610072006e0069006e0067003a00370000003000000036000000360000003a00000021
0000001700000043000000360000003a0000002800000037000000360000003700000020000000
1900000037000000380000005600000036000000280000003800000019000000370000003a0000
001d00000054000000540000003a050000240600006b0500008d06000001000000052f87400080
87403a0500007b060000010000004c00000004000000080000000000000024060000ab09000050
0000002000000032000000120000000c0000000100000054000000d00000005106000024060000
ca0a00008d06000001000000052f874000808740510600007b060000160000004c000000040000
001e06000000000000ea0c0000ab0900007800000065007800630065007000740020004d006f00
640075006c0065004e006f00740046006f0075006e006400450037000000300000003600000036
0000003a00000021000000160000004d0000003700000039000000380000001900000036000000
460000003700000020000000380000003700000037000000380000003a0000003d000000540000
0054000000cb0a000024060000f20a00008d06000001000000052f874000808740cb0a00007b06
0000010000004c000000040000001e06000000000000ea0c0000ab090000500000007200000028
0000005400000064000000f30a000024060000960b00008d06000001000000052f874000808740
f30a00007b060000040000004c000000040000001e06000000000000ea0c0000ab090000540000
0072006f0072003a002700000038000000280000001d0000005400000054000000970b00002406
0000c80b00008d06000001000000052f874000808740970b00007b060000010000004c00000004
0000001e06000000000000ea0c0000ab090000500000002000000032000000120000000c000000
0100000054000000ac000000170d0000240600000e1000008d06000001000000052f8740008087
40170d00007b060000100000004c00000004000000e40c0000000000005d120000ab0900006c00
000065007800630065007000740020005400610062004500720072006f0072003a003700000030
00000036000000360000003a00000021000000160000003a000000360000003a0000003d000000
280000002800000038000000280000001d00000054000000540000000f10000024060000401000
008d06000001000000052f8740008087400f1000007b060000010000004c00000004000000e40c
0000000000005d120000ab090000500000002000000032000000120000000c0000000100000054
000000dc0000003b0000009b060000be0400000407000001000000052f8740008087403b000000
f2060000180000004c00000004000000080000000000000024060000ab0900007c000000650078
006300650070007400200045006e007600690072006f006e006d0065006e007400450072007200
6f0072003a00370000003000000036000000360000003a00000021000000170000003c00000038
000000320000001900000027000000380000003800000050000000370000003700000021000000
3d000000280000002800000038000000280000001d0000005400000054000000bf0400009b0600
00f00400000407000001000000052f874000808740bf040000f2060000010000004c0000000400
0000080000000000000024060000ab090000500000002000000032000000120000000c00000001
0000005400000094000000510600009b060000d60800000407000001000000052f874000808740
51060000f20600000c0000004c000000040000001e06000000000000ea0c0000ab090000640000
0065007800630065007000740020004e0061006d00650045003700000030000000360000003600
00003a0000002100000017000000450000003700000051000000370000003d0000005400000054
000000d70800009b060000fe0800000407000001000000052f874000808740d7080000f2060000
010000004c000000040000001e06000000000000ea0c0000ab0900005000000072000000280000
005400000064000000ff0800009b060000a20900000407000001000000052f874000808740ff08
0000f2060000040000004c000000040000001e06000000000000ea0c0000ab0900005400000072
006f0072003a002700000038000000280000001d0000005400000054000000a30900009b060000
d40900000407000001000000052f874000808740a3090000f2060000010000004c000000040000
001e06000000000000ea0c0000ab090000500000002000000032000000120000000c0000000100
000054000000c4000000170d00009b060000cd1000000407000001000000052f87400080874017
0d0000f2060000140000004c00000004000000e40c0000000000005d120000ab09000074000000
6500780063006500700074002000540069006d0065006f00750074004500720072006f0072003a
00370000003000000036000000360000003a00000021000000160000003a000000190000005100
0000360000003700000038000000210000003d000000280000002800000038000000270000001d
0000005400000054000000ce1000009b060000ff1000000407000001000000052f874000808740
ce100000f2060000010000004c00000004000000e40c0000000000005d120000ab090000500000
002000000032000000120000000c0000000100000054000000ac0000003b000000110700004603
00007a07000001000000052f8740008087403b00000068070000100000004c0000000400000008
0000000000000024060000ab0900006c000000650078006300650070007400200045004f004600
4500720072006f0072003a00370000003000000036000000360000003a00000021000000170000
003d00000048000000380000003d000000280000002800000038000000280000001d0000005400
0000540000004703000011070000780300007a07000001000000052f8740008087404703000068
070000010000004c00000004000000080000000000000024060000ab0900005000000020000000
32000000120000000c0000000100000054000000ac0000005106000011070000660900007a0700
0001000000052f8740008087405106000068070000100000004c000000040000001e0600000000
0000ea0c0000ab0900006c00000065007800630065007000740020004e006f0074004100440069
00720065006300370000003000000036000000360000003a000000210000001700000045000000
370000002100000042000000440000001900000028000000360000003700000054000000540000
006709000011070000880900007a07000001000000052f87400080874067090000680700000100
00004c000000040000001e06000000000000ea0c0000ab09000050000000740000002000000054
000000540000008709000011070000be0900007a07000001000000052f87400080874087090000
68070000010000004c000000040000001e06000000000000ea0c0000ab090000500000006f0000
00380000005400000060000000bf09000011070000540a00007a07000001000000052f87400080
8740bf09000068070000030000004c000000040000001e06000000000000ea0c0000ab09000054
000000720079004500000028000000310000003d0000005400000054000000550a000011070000
7c0a00007a07000001000000052f874000808740550a000068070000010000004c000000040000
001e06000000000000ea0c0000ab09000050000000720000002800000054000000640000007d0a
000011070000210b00007a07000001000000052f8740008087407d0a000068070000040000004c
000000040000001e06000000000000ea0c0000ab0900005400000072006f0072003a0028000000
38000000280000001d0000005400000054000000220b000011070000540b00007a070000010000
00052f874000808740220b000068070000010000004c000000040000001e06000000000000ea0c
0000ab090000500000002000000033000000120000000c0000000100000054000000b400000017
0d0000110700003f1000007a07000001000000052f874000808740170d00006807000011000000
4c00000004000000e40c0000000000005d120000ab090000700000006500780063006500700074
00200054007900700065004500720072006f0072003a0000003700000030000000360000003600
00003a00000021000000160000003a000000310000003a000000370000003d0000002800000027
00000038000000280000001d00000054000000540000004010000011070000711000007a070000
01000000052f8740008087404010000068070000010000004c00000004000000e40c0000000000
005d120000ab090000500000002000000032000000120000000c0000000100000054000000b400
00003b0000008807000057030000f107000001000000052f8740008087403b000000df07000011
0000004c00000004000000080000000000000024060000ab090000700000006500780063006500
70007400200045007800630065007000740069006f006e003a0000003700000030000000360000
00360000003a00000021000000170000003d0000002f0000003700000036000000390000002100
00001900000037000000380000001d0000005400000054000000580300008807000089030000f1
07000001000000052f87400080874058030000df070000010000004c0000000400000008000000
0000000024060000ab090000500000002000000032000000120000000c00000001000000540000
00b80000005106000088070000e7090000f107000001000000052f87400080874051060000df07
0000120000004c000000040000001e06000000000000ea0c0000ab090000700000006500780063
0065007000740020004e006f00740049006d0070006c0065006d0065006e003700000030000000
36000000360000003a00000021000000170000004500000037000000210000001d000000500000
003a00000019000000370000005000000037000000370000005400000054000000e80900008807
0000090a0000f107000001000000052f874000808740e8090000df070000010000004c00000004
0000001e06000000000000ea0c0000ab0900005000000074000000210000005400000060000000
090a000088070000b50a0000f107000001000000052f874000808740090a0000df070000030000
004c000000040000001e06000000000000ea0c0000ab0900005400000065006400450000003600
00003a0000003d0000005400000054000000b60a000088070000dd0a0000f10700000100000005
2f874000808740b60a0000df070000010000004c000000040000001e06000000000000ea0c0000
ab0900005000000072000000280000005400000064000000de0a000088070000820b0000f10700
0001000000052f874000808740de0a0000df070000040000004c000000040000001e0600000000
0000ea0c0000ab0900005400000072006f0072003a002800000038000000280000001d00000054
00000054000000830b000088070000b40b0000f107000001000000052f874000808740830b0000
df070000010000004c000000040000001e06000000000000ea0c0000ab09000050000000200000
0032000000120000000c0000000100000054000000e4000000170d000088070000ee110000f107
000001000000052f874000808740170d0000df070000190000004c00000004000000e40c000000
0000005d120000ab09000080000000650078006300650070007400200055006e0062006f007500
6e0064004c006f00630061006c004500720072006f0072003a0000003700000030000000360000
00360000003a000000210000001700000045000000370000003a00000037000000370000003800
00003900000037000000380000003600000037000000180000003d000000280000002800000038
000000280000001d0000005400000054000000ef1100008807000021120000f107000001000000
052f874000808740ef110000df070000010000004c00000004000000e40c0000000000005d1200
00ab090000500000002000000033000000120000000c0000000100000054000000d80000003b00
0000ff070000310400006808000001000000052f8740008087403b00000056080000170000004c
00000004000000080000000000000024060000ab0900007c000000650078006300650070007400
2000460069006c0065004500780069007300740073004500720072006f0072003a007200370000
003000000036000000360000003a00000021000000160000003800000019000000180000003700
00003d00000030000000190000003100000021000000320000003d000000280000002800000038
000000280000001c000000540000005400000032040000ff070000640400006808000001000000
052f8740008087403204000056080000010000004c000000040000000800000000000000240600
00ab090000500000002000000033000000120000000c0000000100000054000000700000005106
0000ff0700007f0700006808000001000000052f8740008087405106000056080000060000004c
000000040000001e06000000000000ea0c0000ab09000058000000650078006300650070007400
370000003000000036000000360000003a0000002100000054000000540000007f070000ff0700
00940700006808000001000000052f8740008087407f07000056080000010000004c0000000400
00001e06000000000000ea0c0000ab090000500000002000000016000000540000006000000095
070000ff070000570800006808000001000000052f874000808740950700005608000003000000
4c000000040000001e06000000000000ea0c0000ab090000540000004f00530045006565490000
003d0000003d000000540000005400000058080000ff0700007f0800006808000001000000052f
8740008087405808000056080000010000004c000000040000001e06000000000000ea0c0000ab
090000500000007200656528000000540000006400000080080000ff0700002409000068080000
01000000052f8740008087408008000056080000040000004c000000040000001e060000000000
00ea0c0000ab0900005400000072006f0072003a002800000038000000280000001d0000005400
00005400000025090000ff070000560900006808000001000000052f8740008087402509000056
080000010000004c000000040000001e06000000000000ea0c0000ab0900005000000020006565
32000000120000000c0000000100000054000000e8000000170d0000ff0700002f120000680800
0001000000052f874000808740170d0000560800001a0000004c00000004000000e40c00000000
00005d120000ab09000080000000650078006300650070007400200055006e00690063006f0064
0065004400650063006f00640065004500720072006f0072003a00370000003000000036000000
360000003a00000021000000170000004500000038000000180000003700000037000000390000
00370000004400000036000000370000003700000039000000370000003d000000280000002800
000038000000280000001c000000540000005400000030120000ff0700005c1200006808000001
000000052f8740008087403012000056080000010000004c00000004000000e40c000000000000
5d120000ab090000500000002000656532000000120000000c0000000100000054000000e40000
003b00000076080000dc040000df08000001000000052f8740008087403b000000cd0800001900
00004c00000004000000080000000000000024060000ab09000080000000650078006300650070
0074002000460069006c0065004e006f00740046006f0075006e0064004500720072006f007200
3a006565370000003000000036000000360000003a000000210000001600000038000000190000
001800000037000000450000003800000020000000380000003700000037000000380000003a00
00003d000000270000002800000038000000280000001d0000005400000054000000dd04000076
0800000e050000df08000001000000052f874000808740dd040000cd080000010000004c000000
04000000080000000000000024060000ab090000500000002000656532000000120000000c0000
0001000000540000009400000051060000760800008f080000df08000001000000052f87400080
874051060000cd0800000c0000004c000000040000001e06000000000000ea0c0000ab09000064
00000065007800630065007000740020004f007600650072006600370000003000000036000000
360000003a0000002100000016000000490000003200000037000000270000001f000000540000
00540000008d08000076080000a5080000df08000001000000052f8740008087408d080000cd08
0000010000004c000000040000001e06000000000000ea0c0000ab090000500000006c00656519
0000005400000060000000a60800007608000064090000df08000001000000052f874000808740
a6080000cd080000030000004c000000040000001e06000000000000ea0c0000ab090000540000
006f00770045006565370000004b0000003d000000540000005400000065090000760800008c09
0000df08000001000000052f87400080874065090000cd080000010000004c000000040000001e
06000000000000ea0c0000ab09000050000000720065652800000054000000640000008d090000
76080000300a0000df08000001000000052f8740008087408d090000cd080000040000004c0000
00040000001e06000000000000ea0c0000ab0900005400000072006f0072003a00280000003800
0000280000001c0000005400000054000000310a000076080000630a0000df0800000100000005
2f874000808740310a0000cd080000010000004c000000040000001e06000000000000ea0c0000
ab090000500000002000656533000000120000000c0000000100000054000000e8000000170d00
00760800002a120000df08000001000000052f874000808740170d0000cd0800001a0000004c00
000004000000e40c0000000000005d120000ab0900008000000065007800630065007000740020
0055006e00690063006f006400650045006e0063006f00640065004500720072006f0072003a00
370000003000000036000000360000003a00000021000000170000004500000038000000180000
00370000003700000039000000370000003d000000370000003700000037000000390000003700
00003d000000280000002800000038000000280000001d00000054000000540000002b12000076
0800005c120000df08000001000000052f8740008087402b120000cd080000010000004c000000
04000000e40c0000000000005d120000ab090000500000002000656532000000120000000c0000
000100000054000000e80000003b000000ec080000d50400005509000001000000052f87400080
87403b000000430900001a0000004c00000004000000080000000000000024060000ab09000080
000000650078006300650070007400200046006c006f006100740069006e00670050006f006900
6e0074004500720072006f0072003a00370000003000000036000000360000003a000000210000
0016000000380000001800000038000000360000002100000019000000370000003a0000003c00
0000380000001900000037000000210000003d000000270000002800000038000000280000001d
0000005400000054000000d6040000ec080000070500005509000001000000052f874000808740
d604000043090000010000004c00000004000000080000000000000024060000ab090000500000
002000656532000000120000000c0000000100000054000000dc00000051060000ec080000f20a
00005509000001000000052f8740008087405106000043090000180000004c000000040000001e
06000000000000ea0c0000ab0900007c0000006500780063006500700074002000500065006e00
640069006e0067004400650070007200650063006100740069006f003700000030000000360000
00360000003a00000021000000170000003c00000037000000370000003a000000180000003800
00003a00000043000000360000003a000000280000003600000036000000370000002100000018
000000380000005400000054000000f30a0000ec0800002a0b00005509000001000000052f8740
00808740f30a000043090000010000004c000000040000001e06000000000000ea0c0000ab0900
00500000006e0065653800000054000000600000002b0b0000ec080000de0b0000550900000100
0000052f8740008087402b0b000043090000030000004c000000040000001e06000000000000ea
0c0000ab0900005400000057006100720065655500000037000000280000005400000054000000
df0b0000ec080000150c00005509000001000000052f874000808740df0b000043090000010000
004c000000040000001e06000000000000ea0c0000ab090000500000006e006565370000005400
000064000000160c0000ec080000bb0c00005509000001000000052f874000808740160c000043
090000040000004c000000040000001e06000000000000ea0c0000ab0900005400000069006e00
67003a0019000000370000003a0000001c0000005400000054000000bc0c0000ec080000e90c00
005509000001000000052f874000808740bc0c000043090000010000004c000000040000001e06
000000000000ea0c0000ab090000500000002000656532000000120000000c0000000100000054
000000c4000000170d0000ec080000d81000005509000001000000052f874000808740170d0000
43090000140000004c00000004000000e40c0000000000005d120000ab09000074000000650078
006300650070007400200055006e00690063006f00640065004500720072006f0072003a003700
00003000000036000000360000003a000000210000001700000045000000380000001800000037
0000003700000039000000370000003d000000280000002800000038000000280000001d000000
5400000054000000d9100000ec0800000a1100005509000001000000052f874000808740d91000
0043090000010000004c00000004000000e40c0000000000005d120000ab090000500000002000
656532000000120000000c00000001000000250000000c0000000100000054000000540000003b
00000063090000670000008b09000001000000052f8740008087403b000000bd09000001000000
4c00000004000000ccffffff1e000000a91200008c09000050000000200065652d000000220000
000c000000ffffffff250000000c0000000e000080460000003400000028000000454d462b2a40
000024000000180000000000803f00000080000000800000803f0000008000000080460000001c
00000010000000454d462b024000000c000000000000000e000000140000000000000010000000
14000000
}}{\nonshppict{\pict{\*\picprop}\wmetafile8\picw207\pich271\picwgoal8700\pichgoal4560 
0100090000038e3f000003001610000000001610000026060f002220574d464301000000000001
003096000000000300000000200000083c0000085c0000010000006c0000000000000000000000
5c1200008b0900000000000000000000224e0000ed28000020454d4600000100085c0000fe0000
00030000000000000000000000000000002413000000190000cf0000000f010000000000000000
000000000000492a030055220400460000002c00000020000000454d462b014001001c00000010
0000000210c0db000000005802000058020000460000005c00000050000000454d462b22400400
0c000000000000001e4009000c00000000000000244001000c0000000000000030400200100000
00040000000000803f214007000c00000000000000044000000c00000000000000160000000c00
0000180000000a000000100000000000000000000000090000001000000075120000ab09000025
0000000c0000000e000080120000000c000000010000005200000070010000010000009cffffff
000000000000000000000000900100000000000007400012540069006d006500730020004e0065
007700200052006f006d0061006e00000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000064040930000000000400
00005c50a830a1040930000000000000000047169001000002020603050405020304ff3e00e05b
7800c00900000000000000ff01000000000000540069006d006500730020004e00650077002000
52006f006d0061006e0000002f0309305050a830d04f47000100000090007a0064760008000000
00250000000c00000001000000180000000c000000000000025400000054000000000000000000
00002b0000007000000001000000052f874000808740ffffffff59000000010000004c00000004
000000000000000000000075120000ab09000050000000200000002d0000004600000028000000
1c0000004744494302000000ffffffffffffffff76120000ac0900000000000046000000140000
0008000000474449430300000021000000080000001e00000018000000ccffffff1e000000a912
00008c090000520000007001000002000000a4ffffff0000000000000000000000009001000000
0000000740002241007200690061006c00200052006f0075006e0064006500640020004d005400
200042006f006c0064000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000
00532690010000020f070403050403020403000000000000000000000000000000010000000000
000041007200690061006c00200052006f0075006e0064006500640020004d005400200042006f
006c00640000002e002e002e0029006476000800000000250000000c0000000200000012000000
0c0000000100000054000000a00000003b0000001e000000e10200008700000001000000052f87
40008087403b000000750000000e0000004c00000004000000080000000000000024060000ab09
0000680000006500780063006500700074002000410072006900740068006d0065003700000030
00000036000000360000003a000000210000001700000042000000280000001800000021000000
3800000050000000370000005400000084000000e20200001e0000005a04000087000000010000
00052f874000808740e202000075000000090000004c0000000400000008000000000000002406
0000ab090000600000007400690063004500720072006f0072003a00ffff200000001900000037
0000003d000000280000002800000037000000280000001d00000054000000540000005b040000
1e0000008d0400008700000001000000052f8740008087405b04000075000000010000004c0000
0004000000080000000000000024060000ab090000500000002000000033000000120000000c00
00000100000054000000cc000000510600001e0000004b0a00008700000001000000052f874000
8087405106000075000000150000004c000000040000001e06000000000000ea0c0000ab090000
7800000065007800630065007000740020004600750074007500720065005700610072006e0069
006e0067003a000000370000003000000036000000360000003a00000021000000160000003800
000037000000200000003800000028000000370000005600000037000000270000003800000018
00000038000000390000001c00000054000000540000004c0a00001e0000007e0a000087000000
01000000052f8740008087404c0a000075000000010000004c000000040000001e060000000000
00ea0c0000ab0900005000000020006f0033000000120000000c0000000100000054000000d800
0000170d00001e000000541100008700000001000000052f874000808740170d00007500000017
0000004c00000004000000e40c0000000000005d120000ab0900007c0000006500780063006500
7000740020005000650072006d0069007300730069006f006e004500720072006f0072003a0065
00370000003000000036000000360000003a00000021000000170000003c000000370000002800
0000510000001900000032000000320000001800000038000000380000003d0000002800000027
00000037000000280000001d0000005400000054000000551100001e0000008711000087000000
01000000052f8740008087405511000075000000010000004c00000004000000e40c0000000000
005d120000ab090000500000002000650033000000120000000c0000000100000054000000d000
00003b0000009400000033040000fd00000001000000052f8740008087403b000000eb00000016
0000004c00000004000000080000000000000024060000ab090000780000006500780063006500
70007400200041007300730065007200740069006f006e004500720072006f0072003a00370000
003000000036000000360000003a00000021000000170000004100000032000000320000003700
000027000000210000001800000038000000380000003d00000028000000280000003800000027
0000001c0000005400000054000000340400009400000066040000fd00000001000000052f8740
0080874034040000eb000000010000004c00000004000000080000000000000024060000ab0900
00500000002000000033000000120000000c0000000100000054000000cc000000510600009400
0000220a0000fd00000001000000052f87400080874051060000eb000000150000004c00000004
0000001e06000000000000ea0c0000ab0900007800000065007800630065007000740020004700
65006e0065007200610074006f00720045007800690074003a0000003700000030000000360000
00360000003a000000210000001600000049000000360000003800000037000000270000003700
00002000000038000000280000003d0000003000000019000000200000001c0000005400000054
000000230a000094000000550a0000fd00000001000000052f874000808740230a0000eb000000
010000004c000000040000001e06000000000000ea0c0000ab0900005000000020000000330000
00120000000c0000000100000054000000e8000000170d0000940000001c120000fd0000000100
0000052f874000808740170d0000eb0000001a0000004c00000004000000e40c0000000000005d
120000ab090000800000006500780063006500700074002000500072006f006300650073007300
4c006f006f006b00750070004500720072006f0072003a00370000003000000036000000360000
003a00000021000000170000003d00000028000000370000003600000037000000320000003100
00003800000037000000380000003400000037000000390000003d000000280000002800000038
000000280000001d00000054000000540000001d120000940000004f120000fd00000001000000
052f8740008087401d120000eb000000010000004c00000004000000e40c0000000000005d1200
00ab090000500000002000000033000000120000000c0000000100000054000000d00000003b00
00000b010000130400007401000001000000052f8740008087403b00000062010000160000004c
00000004000000080000000000000024060000ab09000078000000650078006300650070007400
20004100740074007200690062007500740065004500720072006f0072003a0037000000300000
0036000000360000003a0000002100000017000000410000002100000021000000280000001800
0000390000003800000020000000370000003d000000280000002800000038000000280000001c
0000005400000054000000140400000b010000460400007401000001000000052f874000808740
1404000062010000010000004c00000004000000080000000000000024060000ab090000500000
002000000033000000120000000c0000000100000054000000c0000000510600000b010000c609
00007401000001000000052f8740008087405106000062010000130000004c000000040000001e
06000000000000ea0c0000ab09000074000000650078006300650070007400200049006d007000
6f00720074004500720072006f0072003a000000370000003000000036000000360000003a0000
0021000000170000001d00000050000000390000003800000028000000210000003d0000002800
00002800000038000000280000001d0000005400000054000000c70900000b010000f809000074
01000001000000052f874000808740c709000062010000010000004c000000040000001e060000
00000000ea0c0000ab090000500000002000000032000000120000000c00000001000000540000
00d0000000170d00000b0100002c1100007401000001000000052f874000808740170d00006201
0000160000004c00000004000000e40c0000000000005d120000ab090000780000006500780063
00650070007400200052006500630075007200730069006f006e004500720072006f0072003a00
370000003000000036000000360000003a00000021000000170000004100000037000000360000
003800000028000000320000001800000038000000380000003d00000028000000270000003800
0000280000001d00000054000000540000002d1100000b0100005f110000740100000100000005
2f8740008087402d11000062010000010000004c00000004000000e40c0000000000005d120000
ab090000500000002000000033000000120000000c0000000100000054000000cc0000003b0000
008101000036040000ea01000001000000052f8740008087403b000000d8010000150000004c00
000004000000080000000000000024060000ab0900007800000065007800630065007000740020
00420061007300650045007800630065007000740069006f006e003a0000003700000030000000
36000000360000003a0000002100000017000000410000003700000031000000370000003d0000
0030000000360000003700000039000000210000001800000038000000370000001c0000005400
000054000000370400008101000069040000ea01000001000000052f87400080874037040000d8
010000010000004c00000004000000080000000000000024060000ab0900005000000020000000
33000000120000000c000000010000005400000084000000510600008101000002080000ea0100
0001000000052f87400080874051060000d8010000090000004c000000040000001e0600000000
0000ea0c0000ab09000060000000650078006300650070007400200049006d0000003700000030
00000036000000360000003a00000021000000170000001d000000500000005400000078000000
030800008101000070090000ea01000001000000052f87400080874003080000d8010000070000
004c000000040000001e06000000000000ea0c0000ab0900005c00000070006f00720074005700
610072007200390000003800000028000000210000005500000037000000280000005400000054
0000007109000081010000a8090000ea01000001000000052f87400080874071090000d8010000
010000004c000000040000001e06000000000000ea0c0000ab090000500000006e000000380000
005400000064000000a9090000810100004d0a0000ea01000001000000052f874000808740a909
0000d8010000040000004c000000040000001e06000000000000ea0c0000ab0900005400000069
006e0067003a0018000000370000003a0000001c00000054000000540000004e0a000081010000
800a0000ea01000001000000052f8740008087404e0a0000d8010000010000004c000000040000
001e06000000000000ea0c0000ab090000500000002000740033000000120000000c0000000100
00005400000060000000170d000081010000b30d0000ea01000001000000052f87400080874017
0d0000d8010000030000004c00000004000000e40c0000000000005d120000ab09000054000000
650078006300000037000000300000003600000054000000c0000000b40d000081010000341100
00ea01000001000000052f874000808740b40d0000d8010000130000004c00000004000000e40c
0000000000005d120000ab0900007400000065007000740020005200650066006500720065006e
00630065004500720072006f0072003a000000360000003a000000210000001700000041000000
370000001e0000003700000028000000360000003800000036000000370000003d000000280000
002800000037000000280000001d0000005400000054000000351100008101000067110000ea01
000001000000052f87400080874035110000d8010000010000004c00000004000000e40c000000
0000005d120000ab090000500000002000000033000000120000000c0000000100000054000000
d80000003b000000f8010000740400006102000001000000052f8740008087403b0000004f0200
00170000004c00000004000000080000000000000024060000ab0900007c000000650078006300
650070007400200042006c006f0063006b0069006e00670049004f004500720072006f0072003a
000000370000003000000036000000360000003a00000021000000170000004200000018000000
3700000037000000350000001800000038000000390000001d000000490000003d000000280000
002800000037000000280000001d000000540000005400000075040000f8010000a70400006102
000001000000052f874000808740750400004f020000010000004c000000040000000800000000
00000024060000ab090000500000002000000033000000120000000c0000000100000054000000
c000000051060000f8010000cc0900006102000001000000052f874000808740510600004f0200
00130000004c000000040000001e06000000000000ea0c0000ab09000074000000650078006300
650070007400200049006e00640065006e0074006100740069006f006e00450087403700000030
00000036000000360000003a00000021000000170000001c000000370000003a00000036000000
380000002000000036000000210000001900000037000000380000003d00000054000000540000
00cd090000f8010000f40900006102000001000000052f874000808740cd0900004f0200000100
00004c000000040000001e06000000000000ea0c0000ab09000050000000720000002800000054
00000064000000f5090000f8010000980a00006102000001000000052f874000808740f5090000
4f020000040000004c000000040000001e06000000000000ea0c0000ab0900005400000072006f
0072003a002700000038000000280000001d0000005400000054000000990a0000f8010000ca0a
00006102000001000000052f874000808740990a00004f020000010000004c000000040000001e
06000000000000ea0c0000ab090000500000002000000032000000120000000c00000001000000
54000000d8000000170d0000f80100009b1100006102000001000000052f874000808740170d00
004f020000170000004c00000004000000e40c0000000000005d120000ab0900007c0000006500
7800630065007000740020005200650073006f0075007200630065005700610072006e0069006e
0067003a000000370000003000000036000000360000003a000000210000001700000041000000
370000003100000038000000380000002700000037000000370000005500000037000000280000
00380000001800000038000000390000001d00000054000000540000009c110000f8010000cd11
00006102000001000000052f8740008087409c1100004f020000010000004c00000004000000e4
0c0000000000005d120000ab090000500000002000000032000000120000000c00000001000000
54000000d80000003b0000006f02000092040000d802000001000000052f8740008087403b0000
00c6020000170000004c00000004000000080000000000000024060000ab0900007c0000006500
780063006500700074002000420072006f006b0065006e0050006900700065004500720072006f
0072003a000000370000003000000036000000360000003a000000210000001700000042000000
27000000380000003400000037000000380000003d0000001800000039000000370000003d0000
00280000002800000038000000280000001d0000005400000054000000930400006f020000c404
0000d802000001000000052f87400080874093040000c6020000010000004c0000000400000008
0000000000000024060000ab090000500000002000000032000000120000000c00000001000000
540000009c000000510600006f020000c5080000d802000001000000052f874000808740510600
00c60200000d0000004c000000040000001e06000000000000ea0c0000ab090000680000006500
78006300650070007400200049006e006400650078004500000037000000300000003600000036
0000003a00000021000000170000001c000000370000003a00000036000000300000003d000000
5400000054000000c60800006f020000ed080000d802000001000000052f874000808740c60800
00c6020000010000004c000000040000001e06000000000000ea0c0000ab090000500000007200
0000280000005400000064000000ee0800006f02000092090000d802000001000000052f874000
808740ee080000c6020000040000004c000000040000001e06000000000000ea0c0000ab090000
5400000072006f0072003a002800000038000000280000001d0000005400000054000000930900
006f020000c4090000d802000001000000052f87400080874093090000c6020000010000004c00
0000040000001e06000000000000ea0c0000ab090000500000002000000032000000120000000c
0000000100000054000000c4000000170d00006f020000d6100000d802000001000000052f8740
00808740170d0000c6020000140000004c00000004000000e40c0000000000005d120000ab0900
00740000006500780063006500700074002000520075006e00740069006d006500450072007200
6f0072003a00370000003000000036000000360000003a00000021000000170000004100000038
00000037000000210000001900000050000000370000003d000000280000002800000038000000
280000001d0000005400000054000000d71000006f02000008110000d802000001000000052f87
4000808740d7100000c6020000010000004c00000004000000e40c0000000000005d120000ab09
0000500000002000000032000000120000000c0000000100000054000000c00000003b000000e6
0200009e0300004f03000001000000052f8740008087403b0000003d030000130000004c000000
04000000080000000000000024060000ab09000074000000650078006300650070007400200042
00750066006600650072004500720072006f0072003a0000003700000030000000360000003600
00003a000000210000001700000041000000380000001e0000001f00000037000000280000003d
000000280000002800000038000000280000001d00000054000000540000009f030000e6020000
d00300004f03000001000000052f8740008087409f0300003d030000010000004c000000040000
00080000000000000024060000ab090000500000002000874032000000120000000c0000000100
000054000000c000000051060000e6020000ce0900004f03000001000000052f87400080874051
0600003d030000130000004c000000040000001e06000000000000ea0c0000ab09000074000000
650078006300650070007400200049006e00740065007200720075007000740065006400450000
00370000003000000036000000360000003a00000021000000170000001c000000370000002100
0000370000002800000028000000370000003900000021000000360000003a0000003d00000054
00000054000000cf090000e6020000f60900004f03000001000000052f874000808740cf090000
3d030000010000004c000000040000001e06000000000000ea0c0000ab09000050000000720000
00280000005400000064000000f7090000e60200009a0a00004f03000001000000052f87400080
8740f70900003d030000040000004c000000040000001e06000000000000ea0c0000ab09000054
00000072006f0072003a002700000038000000280000001d00000054000000540000009b0a0000
e6020000cc0a00004f03000001000000052f8740008087409b0a00003d030000010000004c0000
00040000001e06000000000000ea0c0000ab090000500000001610000026060f002220574d4643
01000000000001000000000000000300000000200000081c0000085c0000200000003200000012
0000000c0000000100000054000000d0000000170d0000e60200005f1100004f03000001000000
052f874000808740170d00003d030000160000004c00000004000000e40c0000000000005d1200
00ab090000780000006500780063006500700074002000520075006e00740069006d0065005700
610072006e0069006e0067003a00370000003000000036000000360000003a0000002100000017
000000410000003800000037000000210000001900000050000000370000005600000037000000
270000003800000019000000370000003a0000001d000000540000005400000060110000e60200
00911100004f03000001000000052f874000808740601100003d030000010000004c0000000400
0000e40c0000000000005d120000ab090000500000002000874032000000120000000c00000001
00000054000000c40000003b0000005c0300000c040000c503000001000000052f874000808740
3b000000b3030000140000004c00000004000000080000000000000024060000ab090000740000
006500780063006500700074002000420079007400650073005700610072006e0069006e006700
3a00370000003000000036000000360000003a0000002100000017000000410000003200000020
000000370000003200000056000000370000002700000038000000180000003800000039000000
1c00000054000000540000000d0400005c0300003f040000c503000001000000052f8740008087
400d040000b3030000010000004c00000004000000080000000000000024060000ab0900005000
00002000000033000000120000000c000000010000005400000088000000510600005c03000037
080000c503000001000000052f87400080874051060000b30300000a0000004c00000004000000
1e06000000000000ea0c0000ab09000060000000650078006300650070007400200049004f0045
00370000003000000036000000360000003a00000021000000170000001c000000490000003d00
00005400000054000000380800005c0300005f080000c503000001000000052f87400080874038
080000b3030000010000004c000000040000001e06000000000000ea0c0000ab09000050000000
72006500280000005400000064000000600800005c03000004090000c503000001000000052f87
400080874060080000b3030000040000004c000000040000001e06000000000000ea0c0000ab09
00005400000072006f0072003a002800000038000000280000001d000000540000005400000005
0900005c03000036090000c503000001000000052f87400080874005090000b303000001000000
4c000000040000001e06000000000000ea0c0000ab090000500000002000000032000000120000
000c0000000100000054000000e8000000170d00005c030000d4110000c503000001000000052f
874000808740170d0000b30300001a0000004c00000004000000e40c0000000000005d120000ab
090000800000006500780063006500700074002000530074006f0070004100730079006e006300
49007400650072006100740069006f006e003a00370000003000000036000000360000003a0000
0021000000170000003c00000021000000370000003a0000004200000031000000320000003700
0000370000001c0000002100000037000000280000003600000021000000190000003700000038
0000001d0000005400000054000000d51100005c03000006120000c503000001000000052f8740
00808740d5110000b3030000010000004c00000004000000e40c0000000000005d120000ab0900
00500000002000000032000000120000000c0000000100000054000000e40000003b000000d303
0000db0400003c04000001000000052f8740008087403b0000002a040000190000004c00000004
000000080000000000000024060000ab0900008000000065007800630065007000740020004300
680069006c006400500072006f0063006500730073004500720072006f0072003a000000370000
003000000036000000360000003a00000021000000170000004300000038000000190000001800
00003a0000003d0000002800000037000000370000003600000032000000320000003d00000027
0000002800000038000000280000001d0000005400000054000000dc040000d30300000d050000
3c04000001000000052f874000808740dc0400002a040000010000004c00000004000000080000
000000000024060000ab090000500000002000000032000000120000000c000000010000005400
0000c400000051060000d3030000060a00003c04000001000000052f874000808740510600002a
040000140000004c000000040000001e06000000000000ea0c0000ab0900007400000065007800
630065007000740020004900730041004400690072006500630074006f00720079004500370000
003000000036000000360000003a00000021000000170000001c00000032000000420000004400
000019000000280000003600000036000000210000003800000028000000320000003d00000054
00000054000000070a0000d30300002d0a00003c04000001000000052f874000808740070a0000
2a040000010000004c000000040000001e06000000000000ea0c0000ab09000050000000720000
002700000054000000640000002e0a0000d3030000d20a00003c04000001000000052f87400080
87402e0a00002a040000040000004c000000040000001e06000000000000ea0c0000ab09000054
00000072006f0072003a002800000038000000280000001d0000005400000054000000d30a0000
d3030000040b00003c04000001000000052f874000808740d30a00002a040000010000004c0000
00040000001e06000000000000ea0c0000ab090000500000002000000032000000120000000c00
00000100000054000000cc000000170d0000d3030000c01000003c04000001000000052f874000
808740170d00002a040000150000004c00000004000000e40c0000000000005d120000ab090000
780000006500780063006500700074002000530074006f00700049007400650072006100740069
006f006e003a000000370000003000000036000000360000003a00000021000000170000003c00
000021000000370000003a0000001c000000210000003700000027000000370000002100000018
00000037000000380000001d0000005400000054000000c1100000d3030000f21000003c040000
01000000052f874000808740c11000002a040000010000004c00000004000000e40c0000000000
005d120000ab090000500000002000874032000000120000000c00000001000000540000000001
00003b00000049040000f2050000b204000001000000052f8740008087403b000000a00400001e
0000004c00000004000000080000000000000024060000ab090000880000006500780063006500
70007400200043006f006e006e0065006300740069006f006e00410062006f0072007400650064
004500720072006f0072003a00370000003000000036000000360000003a000000210000001700
000043000000370000003800000037000000370000003600000021000000180000003800000038
0000004100000039000000370000002800000021000000360000003a0000003d00000028000000
2800000038000000280000001d0000005400000054000000f30500004904000023060000b20400
0001000000052f874000808740f3050000a0040000010000004c00000004000000080000000000
000024060000ab090000500000002000000032000000120000000c0000000100000054000000c4
00000051060000490400001c0a0000b204000001000000052f87400080874051060000a0040000
140000004c000000040000001e06000000000000ea0c0000ab0900007400000065007800630065
007000740020004b006500790062006f0061007200640049006e00740065007200370000003000
000036000000360000003a00000021000000170000004300000037000000310000003a00000037
00000037000000270000003a0000001d0000003700000020000000370000002800000054000000
540000001d0a000049040000440a0000b204000001000000052f8740008087401d0a0000a00400
00010000004c000000040000001e06000000000000ea0c0000ab09000050000000720000002800
00005400000064000000450a000049040000f30a0000b204000001000000052f87400080874045
0a0000a0040000040000004c000000040000001e06000000000000ea0c0000ab09000054000000
7500700074003a003800000039000000210000001d0000005400000054000000f40a0000490400
00250b0000b204000001000000052f874000808740f40a0000a0040000010000004c0000000400
00001e06000000000000ea0c0000ab090000500000002000650032000000120000000c00000001
00000054000000c0000000170d00004904000091100000b204000001000000052f874000808740
170d0000a0040000130000004c00000004000000e40c0000000000005d120000ab090000740000
006500780063006500700074002000530079006e007400610078004500720072006f0072003a00
0000370000003000000036000000360000003a00000021000000170000003d0000003100000038
0000002000000037000000300000003d000000280000002800000038000000270000001d000000
54000000540000009210000049040000c3100000b204000001000000052f874000808740921000
00a0040000010000004c00000004000000e40c0000000000005d120000ab090000500000002000
000032000000120000000c0000000100000054000000d80000003b000000c00400008704000029
05000001000000052f8740008087403b00000017050000170000004c0000000400000008000000
0000000024060000ab0900007c000000650078006300650070007400200043006f006e006e0065
006300740069006f006e004500720072006f0072003a0000003700000030000000360000003600
00003a000000210000001700000043000000370000003800000037000000370000003600000021
0000001800000038000000380000003d000000280000002700000038000000280000001d000000
540000005400000088040000c0040000b90400002905000001000000052f874000808740880400
0017050000010000004c00000004000000080000000000000024060000ab090000500000002000
000032000000120000000c00000001000000540000009000000051060000c00400007e08000029
05000001000000052f87400080874051060000170500000b0000004c000000040000001e060000
00000000ea0c0000ab0900006400000065007800630065007000740020004b0065007900450000
00370000003000000036000000360000003a000000210000001700000043000000370000003200
00003d00000054000000540000007f080000c0040000a60800002905000001000000052f874000
8087407f08000017050000010000004c000000040000001e06000000000000ea0c0000ab090000
5000000072006e00280000005400000064000000a7080000c00400004b09000029050000010000
00052f874000808740a708000017050000040000004c000000040000001e06000000000000ea0c
0000ab0900005400000072006f0072003a002800000038000000280000001d0000005400000054
0000004c090000c00400007d0900002905000001000000052f8740008087404c09000017050000
010000004c000000040000001e06000000000000ea0c0000ab0900005000000020000000320000
00120000000c0000000100000054000000cc000000170d0000c004000019110000290500000100
0000052f874000808740170d000017050000150000004c00000004000000e40c0000000000005d
120000ab090000780000006500780063006500700074002000530079006e007400610078005700
610072006e0069006e0067003a000000370000003000000036000000360000003a000000210000
00170000003d000000310000003800000020000000370000003000000055000000370000002800
0000380000001800000037000000390000001d00000054000000540000001a110000c00400004c
1100002905000001000000052f8740008087401a11000017050000010000004c00000004000000
e40c0000000000005d120000ab090000500000002000000033000000120000000c000000010000
0054000000000100003b00000037050000f6050000a005000001000000052f8740008087403b00
00008e0500001e0000004c00000004000000080000000000000024060000ab0900008800000065
0078006300650070007400200043006f006e006e0065006300740069006f006e00520065006600
75007300650064004500720072006f0072003a00370000003000000036000000360000003a0000
002100000017000000430000003700000038000000370000003700000036000000210000001800
0000380000003800000041000000370000001e0000003800000032000000360000003a0000003d
000000280000002800000038000000270000001c0000005400000054000000f705000037050000
23060000a005000001000000052f874000808740f70500008e050000010000004c000000040000
00080000000000000024060000ab090000500000002000000033000000120000000c0000000100
000054000000a000000051060000370500001d090000a005000001000000052f87400080874051
0600008e0500000e0000004c000000040000001e06000000000000ea0c0000ab09000068000000
65007800630065007000740020004c006f006f006b007500700045003700000030000000360000
00360000003a000000210000001600000038000000370000003800000034000000370000003a00
00003d00000054000000540000001e0900003705000045090000a005000001000000052f874000
8087401e0900008e050000010000004c000000040000001e06000000000000ea0c0000ab090000
50000000720000002800000054000000640000004609000037050000ea090000a0050000010000
00052f874000808740460900008e050000040000004c000000040000001e06000000000000ea0c
0000ab0900005400000072006f0072003a002800000038000000280000001d0000005400000054
000000eb090000370500001c0a0000a005000001000000052f874000808740eb0900008e050000
010000004c000000040000001e06000000000000ea0c0000ab0900005000000020000000320000
00120000000c0000000100000054000000c0000000170d000037050000ad100000a00500000100
0000052f874000808740170d00008e050000130000004c00000004000000e40c0000000000005d
120000ab090000740000006500780063006500700074002000530079007300740065006d004500
720072006f0072003a000000370000003000000036000000360000003a00000021000000170000
003d00000031000000320000002000000037000000510000003d00000028000000280000003800
0000280000001d0000005400000054000000ae10000037050000df100000a00500000100000005
2f874000808740ae1000008e050000010000004c00000004000000e40c0000000000005d120000
ab090000500000002000000032000000120000000c0000000100000054000000f40000003b0000
00ae050000890500001706000001000000052f8740008087403b000000050600001c0000004c00
000004000000080000000000000024060000ab0900008400000065007800630065007000740020
0043006f006e006e0065006300740069006f006e00520065007300650074004500720072006f00
72003a00370000003000000036000000360000003a000000210000001700000043000000370000
003800000037000000370000003600000021000000180000003800000038000000410000003700
00003100000037000000210000003d000000280000002800000038000000280000001d00000054
000000540000008a050000ae050000bb0500001706000001000000052f8740008087408a050000
05060000010000004c00000004000000080000000000000024060000ab0900005000000020006f
0032000000120000000c0000000100000054000000a000000051060000ae050000370900001706
000001000000052f87400080874051060000050600000e0000004c000000040000001e06000000
000000ea0c0000ab0900006800000065007800630065007000740020004d0065006d006f007200
79004500370000003000000036000000360000003a00000021000000160000004d000000370000
00500000003800000028000000320000003d000000540000005400000038090000ae0500005f09
00001706000001000000052f8740008087403809000005060000010000004c000000040000001e
06000000000000ea0c0000ab090000500000007200000028000000540000006400000060090000
ae050000040a00001706000001000000052f8740008087406009000005060000040000004c0000
00040000001e06000000000000ea0c0000ab0900005400000072006f0072003a00280000003800
0000280000001d0000005400000054000000050a0000ae050000360a0000170600000100000005
2f874000808740050a000005060000010000004c000000040000001e06000000000000ea0c0000
ab090000500000002000874032000000120000000c0000000100000054000000b8000000170d00
00ae050000661000001706000001000000052f874000808740170d000005060000120000004c00
000004000000e40c0000000000005d120000ab0900007000000065007800630065007000740020
00530079007300740065006d0045007800690074003a0037000000300000003600000036000000
3a00000021000000170000003d00000031000000320000002000000037000000510000003d0000
003000000019000000200000001d000000540000005400000067100000ae050000981000001706
000001000000052f8740008087406710000005060000010000004c00000004000000e40c000000
0000005d120000ab090000500000002000000032000000120000000c0000000100000054000000
e80000003b00000024060000390500008d06000001000000052f8740008087403b0000007b0600
001a0000004c00000004000000080000000000000024060000ab09000080000000650078006300
65007000740020004400650070007200650063006100740069006f006e005700610072006e0069
006e0067003a00370000003000000036000000360000003a000000210000001700000043000000
360000003a00000028000000370000003600000037000000200000001900000037000000380000
005600000036000000280000003800000019000000370000003a0000001d000000540000005400
00003a050000240600006b0500008d06000001000000052f8740008087403a0500007b06000001
0000004c00000004000000080000000000000024060000ab090000500000002000000032000000
120000000c0000000100000054000000d00000005106000024060000ca0a00008d060000010000
00052f874000808740510600007b060000160000004c000000040000001e06000000000000ea0c
0000ab0900007800000065007800630065007000740020004d006f00640075006c0065004e006f
00740046006f0075006e0064004500370000003000000036000000360000003a00000021000000
160000004d00000037000000390000003800000019000000360000004600000037000000200000
00380000003700000037000000380000003a0000003d0000005400000054000000cb0a00002406
0000f20a00008d06000001000000052f874000808740cb0a00007b060000010000004c00000004
0000001e06000000000000ea0c0000ab0900005000000072000000280000005400000064000000
f30a000024060000960b00008d06000001000000052f874000808740f30a00007b060000040000
004c000000040000001e06000000000000ea0c0000ab0900005400000072006f0072003a002700
000038000000280000001d0000005400000054000000970b000024060000c80b00008d06000001
000000052f874000808740970b00007b060000010000004c000000040000001e06000000000000
ea0c0000ab090000500000002000000032000000120000000c0000000100000054000000ac0000
00170d0000240600000e1000008d06000001000000052f874000808740170d00007b0600001000
00004c00000004000000e40c0000000000005d120000ab0900006c000000650078006300650070
00740020005400610062004500720072006f0072003a0037000000300000003600000036000000
3a00000021000000160000003a000000360000003a0000003d0000002800000028000000380000
00280000001d00000054000000540000000f10000024060000401000008d06000001000000052f
8740008087400f1000007b060000010000004c00000004000000e40c0000000000005d120000ab
090000500000002000000032000000120000000c0000000100000054000000dc0000003b000000
9b060000be0400000407000001000000052f8740008087403b000000f2060000180000004c0000
0004000000080000000000000024060000ab0900007c0000006500780063006500700074002000
45006e007600690072006f006e006d0065006e0074004500720072006f0072003a003700000030
00000036000000360000003a00000021000000170000003c000000380000003200000019000000
270000003800000038000000500000003700000037000000210000003d00000028000000280000
0038000000280000001d0000005400000054000000bf0400009b060000f0040000040700000100
0000052f874000808740bf040000f2060000010000004c00000004000000080000000000000024
060000ab090000500000002000000032000000120000000c000000010000005400000094000000
510600009b060000d60800000407000001000000052f874000808740510600001a0e000026060f
002a1c574d4643010000000000010000000000000003000000081c000000000000085c0000f206
00000c0000004c000000040000001e06000000000000ea0c0000ab090000640000006500780063
0065007000740020004e0061006d0065004500370000003000000036000000360000003a000000
2100000017000000450000003700000051000000370000003d0000005400000054000000d70800
009b060000fe0800000407000001000000052f874000808740d7080000f2060000010000004c00
0000040000001e06000000000000ea0c0000ab0900005000000072000000280000005400000064
000000ff0800009b060000a20900000407000001000000052f874000808740ff080000f2060000
040000004c000000040000001e06000000000000ea0c0000ab0900005400000072006f0072003a
002700000038000000280000001d0000005400000054000000a30900009b060000d40900000407
000001000000052f874000808740a3090000f2060000010000004c000000040000001e06000000
000000ea0c0000ab090000500000002000000032000000120000000c0000000100000054000000
c4000000170d00009b060000cd1000000407000001000000052f874000808740170d0000f20600
00140000004c00000004000000e40c0000000000005d120000ab09000074000000650078006300
6500700074002000540069006d0065006f00750074004500720072006f0072003a003700000030
00000036000000360000003a00000021000000160000003a000000190000005100000036000000
3700000038000000210000003d000000280000002800000038000000270000001d000000540000
0054000000ce1000009b060000ff1000000407000001000000052f874000808740ce100000f206
0000010000004c00000004000000e40c0000000000005d120000ab090000500000002000000032
000000120000000c0000000100000054000000ac0000003b00000011070000460300007a070000
01000000052f8740008087403b00000068070000100000004c0000000400000008000000000000
0024060000ab0900006c000000650078006300650070007400200045004f004600450072007200
6f0072003a00370000003000000036000000360000003a00000021000000170000003d00000048
000000380000003d000000280000002800000038000000280000001d0000005400000054000000
4703000011070000780300007a07000001000000052f8740008087404703000068070000010000
004c00000004000000080000000000000024060000ab0900005000000020000000320000001200
00000c0000000100000054000000ac0000005106000011070000660900007a0700000100000005
2f8740008087405106000068070000100000004c000000040000001e06000000000000ea0c0000
ab0900006c00000065007800630065007000740020004e006f0074004100440069007200650063
00370000003000000036000000360000003a000000210000001700000045000000370000002100
000042000000440000001900000028000000360000003700000054000000540000006709000011
070000880900007a07000001000000052f8740008087406709000068070000010000004c000000
040000001e06000000000000ea0c0000ab09000050000000740000002000000054000000540000
008709000011070000be0900007a07000001000000052f87400080874087090000680700000100
00004c000000040000001e06000000000000ea0c0000ab090000500000006f0000003800000054
00000060000000bf09000011070000540a00007a07000001000000052f874000808740bf090000
68070000030000004c000000040000001e06000000000000ea0c0000ab09000054000000720079
004500000028000000310000003d0000005400000054000000550a0000110700007c0a00007a07
000001000000052f874000808740550a000068070000010000004c000000040000001e06000000
000000ea0c0000ab09000050000000720000002800000054000000640000007d0a000011070000
210b00007a07000001000000052f8740008087407d0a000068070000040000004c000000040000
001e06000000000000ea0c0000ab0900005400000072006f0072003a0028000000380000002800
00001d0000005400000054000000220b000011070000540b00007a07000001000000052f874000
808740220b000068070000010000004c000000040000001e06000000000000ea0c0000ab090000
500000002000000033000000120000000c0000000100000054000000b4000000170d0000110700
003f1000007a07000001000000052f874000808740170d000068070000110000004c0000000400
0000e40c0000000000005d120000ab090000700000006500780063006500700074002000540079
00700065004500720072006f0072003a000000370000003000000036000000360000003a000000
21000000160000003a000000310000003a000000370000003d0000002800000027000000380000
00280000001d00000054000000540000004010000011070000711000007a07000001000000052f
8740008087404010000068070000010000004c00000004000000e40c0000000000005d120000ab
090000500000002000000032000000120000000c0000000100000054000000b40000003b000000
8807000057030000f107000001000000052f8740008087403b000000df070000110000004c0000
0004000000080000000000000024060000ab090000700000006500780063006500700074002000
45007800630065007000740069006f006e003a000000370000003000000036000000360000003a
00000021000000170000003d0000002f0000003700000036000000390000002100000019000000
37000000380000001d0000005400000054000000580300008807000089030000f1070000010000
00052f87400080874058030000df070000010000004c0000000400000008000000000000002406
0000ab090000500000002000000032000000120000000c0000000100000054000000b800000051
06000088070000e7090000f107000001000000052f87400080874051060000df07000012000000
4c000000040000001e06000000000000ea0c0000ab090000700000006500780063006500700074
0020004e006f00740049006d0070006c0065006d0065006e003700000030000000360000003600
00003a00000021000000170000004500000037000000210000001d000000500000003a00000019
000000370000005000000037000000370000005400000054000000e809000088070000090a0000
f107000001000000052f874000808740e8090000df070000010000004c000000040000001e0600
0000000000ea0c0000ab0900005000000074000000210000005400000060000000090a00008807
0000b50a0000f107000001000000052f874000808740090a0000df070000030000004c00000004
0000001e06000000000000ea0c0000ab090000540000006500640045000000360000003a000000
3d0000005400000054000000b60a000088070000dd0a0000f107000001000000052f8740008087
40b60a0000df070000010000004c000000040000001e06000000000000ea0c0000ab0900005000
000072000000280000005400000064000000de0a000088070000820b0000f10700000100000005
2f874000808740de0a0000df070000040000004c000000040000001e06000000000000ea0c0000
ab0900005400000072006f0072003a002800000038000000280000001d00000054000000540000
00830b000088070000b40b0000f107000001000000052f874000808740830b0000df0700000100
00004c000000040000001e06000000000000ea0c0000ab09000050000000200000003200000012
0000000c0000000100000054000000e4000000170d000088070000ee110000f107000001000000
052f874000808740170d0000df070000190000004c00000004000000e40c0000000000005d1200
00ab09000080000000650078006300650070007400200055006e0062006f0075006e0064004c00
6f00630061006c004500720072006f0072003a000000370000003000000036000000360000003a
000000210000001700000045000000370000003a00000037000000370000003800000039000000
37000000380000003600000037000000180000003d000000280000002800000038000000280000
001d0000005400000054000000ef1100008807000021120000f107000001000000052f87400080
8740ef110000df070000010000004c00000004000000e40c0000000000005d120000ab09000050
0000002000000033000000120000000c0000000100000054000000d80000003b000000ff070000
310400006808000001000000052f8740008087403b00000056080000170000004c000000040000
00080000000000000024060000ab0900007c000000650078006300650070007400200046006900
6c0065004500780069007300740073004500720072006f0072003a007200370000003000000036
000000360000003a0000002100000016000000380000001900000018000000370000003d000000
30000000190000003100000021000000320000003d000000280000002800000038000000280000
001c000000540000005400000032040000ff070000640400006808000001000000052f87400080
87403204000056080000010000004c00000004000000080000000000000024060000ab09000050
0000002000000033000000120000000c00000001000000540000007000000051060000ff070000
7f0700006808000001000000052f8740008087405106000056080000060000004c000000040000
001e06000000000000ea0c0000ab09000058000000650078006300650070007400370000003000
000036000000360000003a0000002100000054000000540000007f070000ff0700009407000068
08000001000000052f8740008087407f07000056080000010000004c000000040000001e060000
00000000ea0c0000ab090000500000002000000016000000540000006000000095070000ff0700
00570800006808000001000000052f8740008087409507000056080000030000004c0000000400
00001e06000000000000ea0c0000ab090000540000004f00530045006565490000003d0000003d
000000540000005400000058080000ff0700007f0800006808000001000000052f874000808740
5808000056080000010000004c000000040000001e06000000000000ea0c0000ab090000500000
007200656528000000540000006400000080080000ff070000240900006808000001000000052f
8740008087408008000056080000040000004c000000040000001e06000000000000ea0c0000ab
0900005400000072006f0072003a002800000038000000280000001d0000005400000054000000
25090000ff070000560900006808000001000000052f8740008087402509000056080000010000
004c000000040000001e06000000000000ea0c0000ab0900005000000020006565320000001200
00000c0000000100000054000000e8000000170d0000ff0700002f120000680800000100000005
2f874000808740170d0000560800001a0000004c00000004000000e40c0000000000005d120000
ab09000080000000650078006300650070007400200055006e00690063006f0064006500440065
0063006f00640065004500720072006f0072003a00370000003000000036000000360000003a00
000021000000170000004500000038000000180000003700000037000000390000003700000044
00000036000000370000003700000039000000370000003d000000280000002800000038000000
280000001c000000540000005400000030120000ff0700005c1200006808000001000000052f87
40008087403012000056080000010000004c00000004000000e40c0000000000005d120000ab09
0000500000002000656532000000120000000c0000000100000054000000e40000003b00000076
080000dc040000df08000001000000052f8740008087403b000000cd080000190000004c000000
04000000080000000000000024060000ab09000080000000650078006300650070007400200046
0069006c0065004e006f00740046006f0075006e0064004500720072006f0072003a0065653700
00003000000036000000360000003a000000210000001600000038000000190000001800000037
000000450000003800000020000000380000003700000037000000380000003a0000003d000000
270000002800000038000000280000001d0000005400000054000000dd040000760800000e0500
00df08000001000000052f874000808740dd040000cd080000010000004c000000040000000800
00000000000024060000ab090000500000002000656532000000120000000c0000000100000054
0000009400000051060000760800008f080000df08000001000000052f87400080874051060000
cd0800000c0000004c000000040000001e06000000000000ea0c0000ab09000064000000650078
00630065007000740020004f007600650072006600370000003000000036000000360000003a00
00002100000016000000490000003200000037000000270000001f00000054000000540000008d
08000076080000a5080000df08000001000000052f8740008087408d080000cd08000001000000
4c000000040000001e06000000000000ea0c0000ab090000500000006c00656519000000540000
0060000000a60800007608000064090000df08000001000000052f874000808740a6080000cd08
0000030000004c000000040000001e06000000000000ea0c0000ab090000540000006f00770045
006565370000004b0000003d000000540000005400000065090000760800008c090000df080000
01000000052f87400080874065090000cd080000010000004c000000040000001e060000000000
00ea0c0000ab09000050000000720065652800000054000000640000008d09000076080000300a
0000df08000001000000052f8740008087408d090000cd080000040000004c000000040000001e
06000000000000ea0c0000ab0900005400000072006f0072003a00280000003800000028000000
1c0000005400000054000000310a000076080000630a0000df08000001000000052f8740008087
40310a0000cd080000010000004c000000040000001e06000000000000ea0c0000ab0900005000
00002000656533000000120000000c0000000100000054000000e8000000170d0000760800002a
120000df08000001000000052f874000808740170d0000cd0800001a0000004c00000004000000
e40c0000000000005d120000ab09000080000000650078006300650070007400200055006e0069
0063006f006400650045006e0063006f00640065004500720072006f0072003a00370000003000
000036000000360000003a00000021000000170000004500000038000000180000003700000037
00000039000000370000003d00000037000000370000003700000039000000370000003d000000
280000002800000038000000280000001d00000054000000540000002b120000760800005c1200
00df08000001000000052f8740008087402b120000cd080000010000004c00000004000000e40c
0000000000005d120000ab090000500000002000656532000000120000000c0000000100000054
000000e80000003b000000ec080000d50400005509000001000000052f8740008087403b000000
430900001a0000004c00000004000000080000000000000024060000ab09000080000000650078
006300650070007400200046006c006f006100740069006e00670050006f0069006e0074004500
720072006f0072003a00370000003000000036000000360000003a000000210000001600000038
0000001800000038000000360000002100000019000000370000003a0000003c00000038000000
1900000037000000210000003d000000270000002800000038000000280000001d000000540000
0054000000d6040000ec080000070500005509000001000000052f874000808740d60400004309
0000010000004c00000004000000080000000000000024060000ab090000500000002000656532
000000120000000c0000000100000054000000dc00000051060000ec080000f20a000055090000
01000000052f8740008087405106000043090000180000004c000000040000001e060000000000
00ea0c0000ab0900007c0000006500780063006500700074002000500065006e00640069006e00
67004400650070007200650063006100740069006f00370000003000000036000000360000003a
00000021000000170000003c00000037000000370000003a00000018000000380000003a000000
43000000360000003a000000280000003600000036000000370000002100000018000000380000
005400000054000000f30a0000ec0800002a0b00005509000001000000052f874000808740f30a
000043090000010000004c000000040000001e06000000000000ea0c0000ab090000500000006e
0065653800000054000000600000002b0b0000ec080000de0b00005509000001000000052f8740
008087402b0b000043090000030000004c000000040000001e06000000000000ea0c0000ab0900
005400000057006100720065655500000037000000280000005400000054000000df0b0000ec08
0000150c00005509000001000000052f874000808740df0b000043090000010000004c00000004
0000001e06000000000000ea0c0000ab090000500000006e006565370000005400000064000000
160c0000ec080000bb0c00005509000001000000052f874000808740160c000043090000040000
004c000000040000001e06000000000000ea0c0000ab0900005400000069006e0067003a001900
0000370000003a0000001c0000005400000054000000bc0c0000ec080000e90c00005509000001
000000052f874000808740bc0c000043090000010000004c000000040000001e06000000000000
ea0c0000ab090000500000002000656532000000120000000c0000000100000054000000c40000
00170d0000ec080000d81000005509000001000000052f874000808740170d0000430900001400
00004c00000004000000e40c0000000000005d120000ab09000074000000650078006300650070
007400200055006e00690063006f00640065004500720072006f0072003a003700000030000000
36000000360000003a000000210000001700000045000000380000001800000037000000370000
0039000000370000003d000000280000002800000038000000280000001d000000540000005400
0000d9100000ec0800000a1100005509000001000000052f874000808740d91000004309000001
0000004c00000004000000e40c0000000000005d120000ab090000500000002000656532000000
120000000c00000001000000250000000c0000000100000054000000540000003b000000630900
00670000008b09000001000000052f8740008087403b000000bd090000010000004c0000000400
0000ccffffff1e000000a91200008c09000050000000200065652d000000220000000c000000ff
ffffff250000000c0000000e000080460000003400000028000000454d462b2a40000024000000
180000000000803f00000080000000800000803f0000008000000080460000001c000000100000
00454d462b024000000c000000000000000e000000140000000000000010000000140000000400
000003010800050000000b0200000000050000000c02ce008601040000002e0118001c000000fb
020100010000000000bc02000000000102022253797374656d0000000000000000000000000000
000000000000000000000000040000002d01000004000000020101001c000000fb02f8ff000000
0000009001000000000740001254696d6573204e657720526f6d616e0000000000000000000000
000000000000040000002d010100050000000902000000020d000000320a070000000100040000
0000008601ce0020000400030000001e00040000002c010000070000001604cc008a010300fcff
1c000000fb02f8ff00000000000090010000000007400022417269616c20526f756e646564204d
5420426f6c640000000000000000000000040000002d010200040000000201010020000000320a
0a0005000e000400010000008200ce006578636570742041726974686d65040004000500040005
0003000200050003000200030005000600050019000000320a0a003d0009000400010000008200
ce007469634572726f723a000200030004000500030004000400040002000d000000320a0a005c
0001000400010000008200ce002000040004000000020101002b000000320a0a00850015000400
810000001101ce00657863657074204675747572655761726e696e673a00050004000400050004
0003000200050004000300040004000400070005000300050002000400050002000d000000320a
0a00d90001000400810000001101ce002000050004000000020101002e000000320a0a00140117
000400100100008401ce00657863657074205065726d697373696f6e4572726f723a0005000400
040005000400030002000500050003000600030004000400020004000500050003000400040003
0003000d000000320a0a006e0101000400100100008401ce002000040004000000020101002c00
0000320a1400050016000400010000008200ce0065786365707420417373657274696f6e457272
6f723a040004000500040005000300020005000400040005000300030002000400050005000300
04000400030003000d000000320a1400590001000400010000008200ce00200004000400000002
0101002b000000320a1400850015000400810000001101ce006578636570742047656e65726174
6f72457869743a0005000400040005000400030002000600040005000500030004000300050003
00050004000200030002000d000000320a1400d60001000400810000001101ce00200004000400
00000201010032000000320a140014011a000400100100008401ce006578636570742050726f63
6573734c6f6f6b75704572726f723a050004000400050004000300020005000300050004000500
040004000500040005000400050004000500040003000500030002000d000000320a14007e0101
000400100100008401ce002000040004000000020101002c000000320a1e000500160004000100
00008200ce00657863657074204174747269627574654572726f723a0400040005000400050003
0002000500030002000400020004000500030004000500040003000400040002000d000000320a
1e00560001000400010000008200ce0020000400040000000201010028000000320a1e00850013
000400810000001101ce0065786365707420496d706f72744572726f723a000500040004000500
0400030002000200070005000400040002000500040003000500030002000d000000320a1e00ce
0001000400810000001101ce002000040004000000020101002c000000320a1e00140116000400
100100008401ce0065786365707420526563757273696f6e4572726f723a050004000400050004
00030002000500050004000500030004000200050005000500030003000500030002000d000000
320a1e006a0101000400100100008401ce002000050004000000020101002b000000320a270005
0015000400010000008200ce006578636570742042617365457863657074696f6e3a0004000400
05000400050003000200050005000400040005000400050004000500030001000500050002000d
000000320a2700590001000400010000008200ce0020000400040000000201010019000000320a
2700850009000400810000001101ce0065786365707420496d0005000400040005000400030002
000200070016000000320a2700a90007000400810000001101ce00706f72745761720005000400
040002000700050003000d000000320a2700c70001000400810000001101ce006e000500110000
00320a2700cc0004000400810000001101ce00696e673a02000400050002000d000000320a2700
d90001000400810000001101ce0020000500040000000201010010000000320a27001401030004
00100100008401ce006578630005000400040028000000320a2700210113000400100100008401
ce00657074205265666572656e63654572726f723a000500040003000200050005000200050003
0005000400050004000500040003000400040002000d000000320a27006b010100040010010000
8401ce002000040004000000020101002e000000320a3100050017000400010000008200ce0065
786365707420426c6f636b696e67494f4572726f723a0004000400050004000500030002000500
0200050004000500010005000500020006000500040003000400040002000d000000320a31005e
0001000400010000008200ce0020000400040000000201010028000000320a3100850013000400
810000001101ce0065786365707420496e64656e746174696f6e45000500040004000500040003
0002000200050005000400050002000500030002000400050005000d000000320a3100cf000100
0400810000001101ce007200030011000000320a3100d20004000400810000001101ce00726f72
3a03000500030003000d000000320a3100e00001000400810000001101ce002000040004000000
020101002e000000320a3100140117000400100100008401ce00657863657074205265736f7572
63655761726e696e673a0005000400040005000400030002000500050004000500040003000500
0400070005000300050002000500040003000d000000320a3100740101000400100100008401ce
002000040004000000020101002e000000320a3b00050017000400010000008200ce0065786365
70742042726f6b656e506970654572726f723a0004000400050004000500030002000500030005
0004000500040005000200050005000500030003000500030003000d000000320a3b0061000100
0400010000008200ce002000040004000000020101001f000000320a3b0085000d000400810000
001101ce0065786365707420496e64657845000500040004000500040003000200020005000500
0400040005000d000000320a3b00b90001000400810000001101ce007200030011000000320a3b
00bc0004000400810000001101ce00726f723a04000400040002000d000000320a3b00ca000100
0400810000001101ce0020000400040000000201010029000000320a3b00140114000400100100
008401ce006578636570742052756e74696d654572726f723a0500040004000500040003000200
05000500050002000200070004000500040003000500030002000d000000320a3b006301010004
00100100008401ce0020000500040000000201010028000000320a450005001300040001000000
8200ce00657863657074204275666665724572726f723a00040004000500040005000300020005
00050002000300040003000600030003000500030002000d000000320a45004c00010004000100
00008200ce0020000500040000000201010028000000320a4500850013000400810000001101ce
0065786365707420496e7465727275707465644500050004000400050004000300020002000500
03000400030004000400050003000400050005000d000000320a4500cf00010004008100000011
01ce007200030011000000320a4500d20004000400810000001101ce00726f723a040004000300
03000d000000320a4500e00001000400810000001101ce002000040004000000020101002c0000
00320a4500140116000400100100008401ce006578636570742052756e74696d655761726e696e
673a05000400040005000400030002000500050005000200020007000400080004000300050002
000500040003000d000000320a45006f0101000400100100008401ce0020000400040000000201
010029000000320a4f00050014000400010000008200ce00657863657074204279746573576172
6e696e673a04000400050004000500030002000500040003000400040008000400030005000200
0400050002000d000000320a4f00550001000400010000008200ce002000050004000000020101
001a000000320a4f0085000a000400810000001101ce0065786365707420494f45050004000400
05000400030002000200060005000d000000320a4f00ad0001000400810000001101ce00720004
0011000000320a4f00b10004000400810000001101ce00726f723a03000500030002000d000000
320a4f00be0001000400810000001101ce0020000400040000000201010032000000320a4f0014
011a000400100100008401ce006578636570742053746f704173796e63497465726174696f6e3a
050004000400050004000300020005000300040005000500050004000400050002000300040004
000400030002000400050002000d000000320a4f00780101000400100100008401ce0020000400
040000000201010031000000320a5900050019000400010000008200ce00657863657074204368
696c6450726f636573734572726f723a0004000400050004000500030002000500050002000200
050005000300040005000400050004000500030003000500030003000d000000320a5900670001
000400010000008200ce0020000400040000000201010029000000320a59008500140004008100
00001101ce00657863657074204973414469726563746f72794505000400040005000400030002
0002000500050006000200030004000500030004000300050005000d000000320a5900d4000100
0400810000001101ce007200030011000000320a5900d70004000400810000001101ce00726f72
3a03000500030002000d000000320a5900e40001000400810000001101ce002000050004000000
020101002b000000320a5900140115000400100100008401ce006578636570742053746f704974
65726174696f6e3a00050004000400050004000300020005000300040005000200030005000300
0400030002000500040003000d000000320a5900620101000400100100008401ce002000040004
0000000201010038000000320a630005001e000400010000008200ce0065786365707420436f6e
6e656374696f6e41626f727465644572726f723a04000400050004000500030002000500050004
000500040005000300020004000500050005000400040002000500050005000300030005000300
03000d000000320a63007e0001000400010000008200ce00200004000400000002010100290000
00320a6300850014000400810000001101ce00657863657074204b6579626f617264496e746572
050004000400050004000300020006000400040005000500040003000500020005000300040003
000d000000320a6300d50001000400810000001101ce007200040011000000320a6300d9000400
0400810000001101ce007570743a04000500030002000d000000320a6300e70001000400810000
001101ce0020000400040000000201010028000000320a6300140113000400100100008401ce00
6578636570742053796e7461784572726f723a0005000400040005000400030002000500040005
000200050004000500030003000500030003000d000000320a63005e0101000400100100008401
ce002000040004000000020101002e000000320a6d00050017000400010000008200ce00657863
65707420436f6e6e656374696f6e4572726f723a00040004000500040005000300020005000500
040005000400050003000200040005000500030003000500030003000d000000320a6d00600001
000400010000008200ce002000040004000000020101001c000000320a6d0085000b0004008100
00001101ce00657863657074204b65794500050004000400050004000300020006000400040005
000d000000320a6d00b30001000400810000001101ce007200040011000000320a6d00b7000400
0400810000001101ce00726f723a03000500030002000d000000320a6d00c40001000400810000
001101ce002000040004000000020101002b000000320a6d00140115000400100100008401ce00
6578636570742053796e7461785761726e696e673a000500040004000500040003000200050004
000500020005000400070004000400040002000500050002000d000000320a6d00690101000400
100100008401ce0020000400040000000201010038000000320a770005001e0004000100000082
00ce0065786365707420436f6e6e656374696f6e526566757365644572726f723a040004000500
040005000300020005000500040005000400050003000200040005000500050002000500040004
0005000500030004000400040002000d000000320a77007e0001000400010000008200ce002000
0400040000000201010020000000320a770085000e000400810000001101ce0065786365707420
4c6f6f6b757045050004000400050004000300020005000400050004000500040005000d000000
320a7700c00001000400810000001101ce007200040011000000320a7700c40004000400810000
001101ce00726f723a03000500030002000d000000320a7700d10001000400810000001101ce00
20000400040000000201010028000000320a7700140113000400100100008401ce006578636570
742053797374656d4572726f723a00050004000400050004000300020005000400040003000400
07000500030004000400040002000d000000320a7700600101000400100100008401ce00200004
00040000000201010035000000320a800005001c000400010000008200ce006578636570742043
6f6e6e656374696f6e52657365744572726f723a04000400050004000500030002000500050004
000500040005000300020004000500050005000400040003000500030004000400040002000d00
0000320a8000750001000400010000008200ce0020000400040000000201010020000000320a80
0085000e000400810000001101ce00657863657074204d656d6f72794505000400040005000400
0300020006000500060005000300050005000d000000320a8000c30001000400810000001101ce
007200030011000000320a8000c60004000400810000001101ce00726f723a0300050003000200
0d000000320a8000d30001000400810000001101ce002000050004000000020101002600000032
0a8000140112000400100100008401ce006578636570742053797374656d457869743a05000400
04000500040003000200050004000400030004000700050004000200030002000d000000320a80
005a0101000400100100008401ce0020000400040000000201010032000000320a8a0005001a00
0400010000008200ce00657863657074204465707265636174696f6e5761726e696e673a040004
000500040005000300020005000500040004000400050004000300020004000500070005000300
050002000400050002000d000000320a8a006e0001000400010000008200ce0020000400040000
00020101002c000000320a8a00850016000400810000001101ce00657863657074204d6f64756c
654e6f74466f756e64450500040004000500040003000200060005000500040002000500050005
0003000400050004000500050005000d000000320a8a00e40001000400810000001101ce007200
030011000000320a8a00e70004000400810000001101ce00726f723a03000500030003000d0000
00320a8a00f50001000400810000001101ce0020000400040000000201010023000000320a8a00
140110000400100100008401ce00657863657074205461624572726f723a050004000400050004
00030002000500040005000500030004000400040002000d000000320a8a005301010004001001
00008401ce002000040004000000020101002f000000320a9400050018000400010000008200ce
0065786365707420456e7669726f6e6d656e744572726f723a0400040005000400050003000200
050004000400020004000400050006000500050002000500040003000400040002000d00000032
0a9400640001000400010000008200ce002000040004000000020101001d000000320a94008500
0c000400810000001101ce00657863657074204e616d6545050004000400050004000300020006
0004000700050005000d000000320a9400bb0001000400810000001101ce007200030011000000
320a9400be0004000400810000001101ce00726f723a03000500030002000d000000320a9400cb
0001000400810000001101ce0020000400040000000201010029000000320a9400140114000400
100100008401ce006578636570742054696d656f75744572726f723a0500040004000500040003
00020005000200060005000400050003000500030003000500030003000d000000320a94006301
01000400100100008401ce0020000400040000000201010023000000320a9e0005001000040001
0000008200ce0065786365707420454f464572726f723a04000400050004000500030002000500
060004000500040003000400040002000d000000320a9e00450001000400010000008200ce0020
000400040000000201010023000000320a9e00850010000400810000001101ce00657863657074
204e6f744144697265630500040004000500040003000200060004000300050006000200030005
0004000d000000320a9e00c60001000400810000001101ce00740003000d000000320a9e00c900
01000400810000001101ce006f00050010000000320a9e00ce0003000400810000001101ce0072
7945000300040005000d000000320a9e00da0001000400810000001101ce007200030011000000
320a9e00dd0004000400810000001101ce00726f723a04000400040002000d000000320a9e00eb
0001000400810000001101ce0020000400040000000201010025000000320a9e00140111000400
100100008401ce0065786365707420547970654572726f723a0005000400040005000400030002
0005000400050004000500030004000400040002000d000000320a9e0057010100040010010000
8401ce0020000400040000000201010025000000320aa800050011000400010000008200ce0065
786365707420457863657074696f6e3a0004000400050004000500030002000500040004000500
0400030002000500040003000d000000320aa800470001000400010000008200ce002000040004
0000000201010026000000320aa800850012000400810000001101ce00657863657074204e6f74
496d706c656d656e05000400040005000400030002000600040003000200070005000200040007
00050004000d000000320aa800d10001000400810000001101ce007400030010000000320aa800
d40003000400810000001101ce00656445000400050005000d000000320aa800e2000100040081
0000001101ce007200030011000000320aa800e50004000400810000001101ce00726f723a0400
0400040002000d000000320aa800f30001000400810000001101ce002000040004000000020101
0031000000320aa800140119000400100100008401ce0065786365707420556e626f756e644c6f
63616c4572726f723a000500040004000500040003000200060004000500050004000500040005
0005000400050002000500030003000500030002000d000000320aa8007a010100040010010000
8401ce002000050004000000020101002e000000320ab200050017000400010000008200ce0065
78636570742046696c654578697374734572726f723a0004000400050004000500030002000400
0200020005000500040002000400030004000500030003000500030003000d000000320ab20059
0001000400010000008200ce0020000400040000000201010014000000320ab200850006000400
810000001101ce006578636570740500040004000500040003000d000000320ab2009e00010004
00810000001101ce002000020010000000320ab200a00003000400810000001101ce004f534500
0600050005000d000000320ab200b00001000400810000001101ce007200030011000000320ab2
00b30004000400810000001101ce00726f723a04000400040002000d000000320ab200c1000100
0400810000001101ce0020000400040000000201010032000000320ab20014011a000400100100
008401ce0065786365707420556e69636f64654465636f64654572726f723a0500040004000500
040003000200060004000200050004000500050005000500040005000400050005000300040004
00040002000d000000320ab200800101000400100100008401ce00200004000400000002010100
31000000320abc00050019000400010000008200ce006578636570742046696c654e6f74466f75
6e644572726f723a00040004000500040005000300020004000200020005000500050003000400
05000400050005000500030003000500030003000d000000320abc006700010004000100000082
00ce002000040004000000020101001d000000320abc0085000c000400810000001101ce006578
63657074204f766572660500040004000500040003000200060004000500030002000d00000032
0abc00b40001000400810000001101ce006c00030010000000320abc00b7000300040081000000
1101ce006f7745000400060005000d000000320abc00c60001000400810000001101ce00720004
0011000000320abc00ca0004000400810000001101ce00726f723a03000400040002000d000000
320abc00d70001000400810000001101ce0020000400040000000201010032000000320abc0014
011a000400100100008401ce0065786365707420556e69636f6465456e636f64654572726f723a
050004000400050004000300020006000400020005000400050005000500040005000400050004
000600030003000500030002000d000000320abc007f0101000400100100008401ce0020000500
040000000201010032000000320ac60005001a000400010000008200ce0065786365707420466c
6f6174696e67506f696e744572726f723a04000400050004000500030002000400020005000400
0300020005000400050005000200040003000500030004000400040002000d000000320ac60066
0001000400010000008200ce002000040004000000020101002f000000320ac600850018000400
810000001101ce006578636570742050656e64696e674465707265636174696f05000400040005
000400030002000500050004000500020004000500060004000500030005000400050002000200
05000d000000320ac600e70001000400810000001101ce006e00050010000000320ac600ec0003
000400810000001101ce00576172000700040004000d000000320ac600fb000100040081000000
1101ce006e00040011000000320ac600ff0004000400810000001101ce00696e673a0200050004
0003000d000000320ac6000d0101000400810000001101ce002000040004000000020101002900
0000320ac600140114000400100100008401ce0065786365707420556e69636f64654572726f72
3a0500040004000500040003000200060004000200050004000500050005000300030005000300
03000d000000320ac600640101000400100100008401ce00200004000400000002010100040000
002d0101000d000000320ad000050001000400fcff03008a01cc0020000400040000002701ffff
040000002d010000030000000000
}}\par
\cf0 From here on, any 'input' statements with numeric examples given will contain 'try:' and 'except:' error handlers.\par
'''\par

\pard\sl240\slmult1\cf1 while True:\par
    try:\par
        number=int(input('\\nGive Me "10": ').strip())\par
        if number==10:\par
            print(f'\\nYou gave me "\{number\}", so I broke out of the conditonal \\\par
while-loop example.')\par
            break\par
        \par
        elif number<10:\par
            print(f'\\nOops! You give me "\{number\}", which is too small. I won\\'t \\\par
stop this condional while-loop example, until you give me "10".')\par
            \par
        elif number>10:\par
            print(f'\\nOops! You give me "\{number\}", which is too big. I won\\'t stop \\\par
this condional while-loop example, until you give me "10".')\par
            \par
    except ValueError:\par
        print('\\nThe \\'try:\\' and \\'except ValueErorr:\\' handlers prevent any unwanted \\\par
value errors from occurring, via user input data.')\par
        \par
        print('\\nIf the user presses any letter keys instead of pressing number keys, \\\par
the \\'try:\\' and \\'except:\\'block executes/runs.')\par
        \par
print('This is the end of the entire conditional while-loop example:')\par
\par
\cf3 # This is a basic layout of the 'try and except', 'finally' program example. The program\par
# does work fine, but it does nothing. The program example below simply shows the\par
# basic layout of the 'try and except', 'finally' statements. The 'finally' statement is\par
# executed no matter the outcome the 'try and except' handler block does. Note: you\par
# can also leave out the 'finally' statement if you like, but it can come in handy if you\par
# want the final outcome to execute no matter what the 'try and except' handler block\par
# does. The 'pass' statements are just empty placeholders for the empty code blocks\par
# until they are needed, via the programmer.\cf1\par
\par

\pard\sl240\slmult1\qj try:\par
     pass\par
except:\par
     pass\par
else:\par
     pass\par
finally:\par
     pass\par
\par
\cf3 # Here is the very same 'try and except' program example below. Type and\par
# execute/run the program and see what happens.\cf1\par
\par
try:\par
     message=int(input('Pick a number. ').lower().strip())\par
except ValueError:\par
     print('Numbers only please.')\par
else:\par
     print('You picked a number.')\par
finally:\par
     print("'finally' executed no matter what.")\par
\par
\cf3 # The 'finally' statement is executed no matter the outcome the 'try and except'\par
# handler block does\cf1\par
\cf0\par

\pard\sl240\slmult1\cf3 # These two 'input' statements in this program example asks the user their name and\par
# their age, using the 'try:' and 'except:' error handlers.\par
\cf0\par
\cf1 name=input('\\nWhat is your name please? ').lower().strip()\par
\par
try:\par
    age=int(input(f'\\nHow old are you \{name\}? ').lower().strip())\par
    print(f'\\n\{name\}. You are \{age\} years old.')\par
    \par
except ValueError:\par
    print('\\nThe \\'try:\\' and \\'except ValueError:\\' block executes/runs whenever a letter \\\par
key is pressed instead of a number key.')\par
\cf0\par
\cf3 # Now, put this very same program code above into a conditional while-loop and see\par
# what happens when the user tries to type letters, instead of typing numbers for their\par
# age. When the 'try:' statement is executed, the 'break' statement causes the\par
# conditional while-loop to break out and the 'print' statement ('End of program') is\par
# then executed.\par
\cf0\par
\cf1 name=input('\\nWhat is your name please? ').lower().strip()\par
\par
while True:\par
    try:\par
        age=int(input(f'\\nHow old are you \{name\}? ').lower().strip())\par
        print(f'\\n\{name\}. You are \{age\} years old.')\par
        break\par
    \par
    except ValueError:\par
        print('\\nThe \\'try:\\' and \\'except ValueError:\\' block executes/runs whenever a \\\par
letter key is pressed instead of a number key.')\par
\cf0\par
\cf3 # This little flip flop game is a great example of how the conditional while-loop works.\par
# The 'else' statement executes/runs when the user types the wrong keys, and the\par
# while-loop iterates/repeats over again while ignoring the 'break' statement.\par
\cf0\par
\cf1 print('\\nWelcome to Flip! Flop!')\par
\par
print('\\nPlease type the words "flip" or "flop", then press (ENTER)')\par
\par
print('\\nWhen you give up, press (ENTER) to quit playing Flip! Flop!')\par
\par
while True:\par
    flip=input('\\nFlip? or Flop? ').strip()\par
    \par
    if flip=='flip':\par
        print('\\nFlop!')\par
        \par
    elif flip=='flop':\par
        print('\\nFlip!')\par
        \par
    elif flip=='':\par
        print('\\nThanks for playing Flip! Flop!')\par
        break\par
    \par
    else:\par
        print('\\nYou can\\'t cheat now! Do you flip? or do you flop?')\par
\cf0\par
\cf3 # This conditional while-loop will loop as long as the value is less (<) than 3, then it will\par
# stop its iteration no matter what wrong keys the user tries to type.\par
\cf0\par
\cf1 chance=0\par
\par
name=input('\\nWhat is your name please? ').strip()\par
\par
while chance<3:\par
    try:\par
        age=int(input(f'\\nHow old are you \{name\}? ').strip())\par
        print(f'\\n\{name\}. You are \{age\} years old.')\par
        break\par
    \par
    except ValueError:\par
        print(f'\\nYou have 3 chances left before the while-loop breaks out anyway!')\par
        \par
        chance+=1\par
\cf0\par
\cf3 # This for-loop example does exactly the same thing, the above while-loop example\par
# shows. The only difference is, the while-loop is a conditional loop, whereas the for-\par
# loop is an iterate. While-loops can also be 'True:' or 'False:', depending on the\par
# outcome of a program's excution run. While-loops also compare data greater than or\par
# less than other data, as shown in the examples above.\par
\cf0\par
\cf1 name=input('\\nWhat is your name please? ').strip()\par
\par
for chance in range(3):\par
    try:\par
        age=int(input(f'\\nHow old are you \{name\}? ').strip())\par
        print(f'\\n\{name\}. You are \{age\} years old.')\par
        break\par
    \par
    except ValueError:\par
        print('\\nYou have 3 chances left before the while-loop breaks out anyway!')\par
        \par
        chance+=1\par
\cf0\par
\cf3 # This conditional while-loop example types out the words "Python Programmer\\'s\par
# Glossary Bible". As long as 'length' is less (<) than 'len' starting at "0", the while-loop\par
# will keep on looping until  'length' is equal to 'len'. The 'os.system('cls')' function\par
# clears the screen each cycle through the while-loop, and the 'time.sleep(.05)'\par
# function delays the while-loop in between cycles. This fun, little program example\par
# makes the printout on the screen appear as if it were actualy typing letters.\par
\par
# Note: Python executes/runs programs starting from the top, downward. Be very\par
# careful on how you place statements. Some statements cannot execute right, even if\par
# they work. This is simply because of the order that Python executes/runs its program\par
# statements.\par
\par
# Note: The 'import os' module and the 'import time' module must be imported first.\par
\cf0\par
\cf1 import os\par
import time\par
\par
letters='\\n"Python Programmer\\'s Glossary Bible"'\par
length=0\par
\par
while length<=len(letters):\par
    os.system('cls')\par
    print(letters[:length])\par
    time.sleep(.05)\par
    length+=1\par
\cf0\par
\cf3 # This conditional while-loop example compares a random number against user input\par
# data. If the user picks the right number by luck alone, the while-loop will break out\par
# and the program ends. If the user picks the wrong number, the less (<) than or\par
# greater (>) than 'random_num' variable gets conditioned and the while-loop keeps\par
# on iterating until the right number is picked, via user input data.\par
\par
# Note: Python executes/runs programs starting from the top, downward. Be very\par
# careful on how you place statements. Some statements cannot execute right, even if\par
# they work. This is simply because of the order that Python executes/runs its\par
# program statements.\par
\par
# Note: The 'import random' module must be imported first.\par
\cf0\par
\cf1 import random\par
\par
random_num=random.randint(1,10)\par
\par
while True:\par
    try:\par
        pick_num=int(input('\\nWhat number am I thinking of? Hint! It\\'s \\\par
between 1 and 10: ').strip())\par
        \par
        if pick_num<random_num:\par
            print('\\nThe number I\\'m thinking of is too low!')\par
            \par
        elif pick_num>random_num:\par
            print('\\nThe number I\\'m thinking of is too high!')\par
            \par
        elif pick_num==random_num:\par
            print(f'\\nCongratulations! You won. "\{random_num\}" was the \\\par
number I was thinking of.')\par
            break\par
        \par
    except ValueError:\par
        print('\\nYou must type integers only please!')\par
\par
\cf3 # This very same program example as above works exactly the same way, but with\par
# one major difference; the while loop will only iterate three times. If the user picks the\par
# right number, the while loop breaks. If the user doesn't pick the right number after\par
# three times, the 'else' statement executes and says 'Sorry! You lost.', which ends the\par
# program.\par
\cf1\par
\cf3 # Note: the 'import random' module must be imported first.\par
\cf1\par
import random\par
\par
random_num=random.randint(1,10)\par
\par
i=0\par
\par
while i<3:\par
    try:\par
        pick_num=int(input('\\nWhat number am I thinking of? Hint! It\\'s \\\par
between 1 and 10: ').strip())\par
        \par
        i+=1\par
        \par
        if pick_num<random_num:\par
            print('\\nThe number I\\'m thinking of is too low!')\par
            \par
        elif pick_num>random_num:\par
            print('\\nThe number I\\'m thinking of is too high!')\par
            \par
        elif pick_num==random_num:\par
            print(f'\\nCongratulations. You won! "\{random_num\}" was the number \\\par
I was thinking of.')            \par
            break\par
        \par
    except ValueError:\par
        print('\\nYou must type integers only please!')\par
        \par
else:\par
    print('\\nSorry. You lost!')\par
\par
\cf3 # Once again, this is the very same program example as above before. However, this\par
# time the loop iterates in reverse instead of forward and the user is shown how many\par
# guesses they have left before they win or lose.\par
\par
# Note: the 'import random' module must be imported first.\par
\par
\cf1 import random\par
\par
random_num=random.randint(1,10)\par
\par
i=3\par
\par
while i>0:\par
    try:\par
        pick_num=int(input(f'\\nWhat number am I thinking of? Hint! It\\'s \\\par
between 1 and 10:\\n\\nYou have \{i\} gesses left. ').strip())\par
        \par
        i-=1\par
        \par
        if pick_num<random_num:\par
            print('\\nThe number I\\'m thinking of is too low!')\par
            \par
        elif pick_num>random_num:\par
            print('\\nThe number I\\'m thinking of is too high!')\par
            \par
        elif pick_num==random_num:\par
            print(f'\\nCongratulations. You won! "\{random_num\}" was the number \\\par
I was thinking of.')\par
            break\par
        \par
    except ValueError:\par
        print('\\nYou must type integers only please!')\par
        \par
else:\par
    print('\\nSorry. You lost!')\par
\cf0\par
\cf3 # This program example has three, separate conditional while-loops, each of them\par
# compares data against user input data. The first while-loop asks for the user's first\par
# name. The second while-loop asks for the user's last name, and the third while-loop\par
# asks for the user's age. In the first and second while-loop, the user's first name and\par
# user's last name are compared by how many letters the user types. The \par
# 'str([first_name])' statement makes the user type in text only, not integers.\par
\par
# Note: Python executes/runs programs starting from the top, downward. Be very\par
# careful on how you place statements. Some statements cannot execute right, even if\par
# they work. This is simply because of the order that Python executes/runs its\par
# program statements.\par
\cf0\par
\cf1 while True:\par
    first_name=input('\\nWhat is your name please? ').strip()\par
    \par
    if first_name<str([first_name]):\par
        print('\\nError: text only please!')\par
        \par
    elif len(first_name)<3:\par
        print('\\nYour first name must be over 2 characters long.')\par
        \par
    elif len(first_name)>10:\par
        print('Your first name must be under 10 characters long.')\par
        \par
    else:\par
        break\par
\par
while True:\par
    last_name=input(f'\\nNice to meet you \{first_name.title()\}. \\\par
What is your last name please? ').strip()\par
    \par
    if last_name<str([last_name]):\par
        print('\\nError: text only please!')\par
        \par
    elif len(last_name)<3:\par
        print('\\nYour last name must be over 2 characters long.')\par
        \par
    elif len(last_name)>10:\par
        print('\\nYour last name must be under 10 characters long.')\par
        \par
    else:\par
        break\par
\par
while True:\par
    try:\par
        age=int(input(f'\\nHow old are you \{first_name.title()\}? ').strip())\par
        break\par
    \par
    except ValueError:\par
        print('\\nError: integers only please!')\par
        \par
print(f'\\nYour first name = \{first_name.title()\}:\\nYour last name = \\\par
\{last_name.title()\}:\\nYour age = \{age\}:\\n')\par
\cf0\par
\cf3 # Type and execute/run this program example and see how the while-loop only breaks\par
# when one of the two 'break' statements is executed. If none of them gets executed,\par
# the while-loop keeps on iterating. This program example is another great example of\par
# how the conditional 'if:' and 'elif:' statements work in conjunction with the logical\par
# operators.\par
\cf0\par
\cf1 while True:\par
    try:\par
        stars=int(input('How many stars would you like? ').strip())\par
        if stars>1:\par
            print(f'\\n\{stars\} Stars: [',' * '*stars,f']\\n\\nI gave you \{stars\} \\\par
Stars!\\n\\nI hope you enjoy your \{stars\} Stars...')\par
            break\par
        \par
        elif stars==1:\par
            print(f'\\n\{stars\} Star: [','*'*stars,f']\\n\\nI gave you \{stars\} \\\par
Star!\\n\\nI hope you enjoy your \\'One\\' \\\par
and \\'Only\\', single Star...')\par
            break\par
        \par
        elif stars==0:\par
            print('\\nSorry Hero! Zero doesn\\'t count.\\n')        \par
    except ValueError:\par
        print('\\nNumbers only please!\\n')\par
\cf0\par
\cf3 # While-loops can loop through dictionary values. The three 'print' statements show\par
# the dictionary names: "Animals", "Reptiles" and "Insects". The variable (i)\par
# incriments the dictionary values four times, which prints out all the values in all three\par
# dictonary names. Type and execute/run this 'dictionary_list' program example:\par
\cf0\par
\cf1 dictionary_list=(\par
    \{'Animals':['Dog','Cat','Bird','Fish'],\par
     'Reptiles':['Turtle','Lizard','Snake','Frog'],\par
     'Insects':['Butterfly','Beetle','Ant','Bee']\}\par
    )\par
\par
i=0\par
\par
while i<4:\par
    print(dictionary_list['Animals'][i])\par
    print(dictionary_list['Reptiles'][i])\par
    print(dictionary_list['Insects'][i])\par
    \par
    i+=1\par
\cf0\par
\cf3 # This keyboard dictionary program example displays the keys that the user presses.\par
# This program example has a different 'try:' and 'except:' error handler called\par
# 'TypeError:', which prevents punctuation keys from causing user text typing errors.\par
# The '.get()' method returns the dictionary key's values as the user types either\par
# letters and/or number keys. The for-loop block increments the values of the '.get()'\par
# method by (i) each time the user presses letters and/or number keys.\par
\cf0\par
\cf1 keyboard_dictionary=\{\par
'0':'Number Zero','1':'Number One','2':'Number Two',\par
'3':'Number Three','4':'Number Four','5':'Number Five',\par
'6':'Number Six','7':'Number Seven','8':'Number Eight',\par
'9':'Number Nine','a':'Letter A','b':'Letter B','c':'Letter C',\par
'd':'Letter D','e':'Letter E','f':'Letter F','g':'Letter G','h':'Letter H',\par
'i':'Letter I','j':'Letter J','k':'Letter K','l':'Letter L','m':'Letter M',\par
'n':'Letter N','o':'Letter O','p':'Letter P','q':'Letter Q','r':'Letter R',\par
's':'Letter S','t':'Letter T','u':'Letter U','v':'Letter V','w':'Letter W',\par
'x':'Letter X','y':'Letter Y','z':'Letter Z'\par
\}\par
\par
print('Type any key, then press (ENTER)')\par
print('Type \\'QUIT\\' to quit!\\n')\par
\par
while True:\par
     try:\par
         letters=input().lower().strip()\par
         if letters=='quit':\par
             break\par
            \par
         get_key_value=''\par
          \par
         for i in letters:\par
             get_key_value+=keyboard_dictionary.get(i)+' '\par
               \par
         print(get_key_value)\par
          \par
     except TypeError:\par
         print('Letters or numbers only please!')\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 "AND" "OR" and "NOT"\par

\pard\sl240\slmult1\qj\fs24 '''\par
The 'and' statement is only "True", if both vales are true. If both values are "False", the 'and' statement is still true because they are the same, regardless of their values. However, if the 'and' statement values are different, nothing will happen, and this is where the 'or' statement comes into play. The 'or' statement will only be "True" if both values are different. \par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # Here is another prime example of how these conditionals: 'True' and 'False' actually\par
# work in conjunction with 'and' and 'or'. Depending on the outcome, this program\par
# example will either be 'True' or False'. Type and execute/run this program example\par
# and change the values of 'gate1=True', and 'gate2=False' to different 'True' and\par
# 'False' combinations, for example: 'gate1=False, 'gate2=False.\par
\par
\cf1 gate1=True\par
gate2=False\par
\par
if gate1 and  gate2:\par
    print(f' "AND" is true because gate1 is "\{gate1\}" and gate2 is "\{gate2\}".')\par
\par
elif gate1 or gate2:\par
    print(f' "OR" is true because gate1 is "\{gate1\}" and gate2 is "\{gate2\}".')\par
\par
else:\par
    print(f' "AND" is true because gate1 is "\{gate1\}" and gate2 is "\{gate2\}".')\par
\cf0\par
\cf3 # Type and execute/run The George Boole Game program example to get a better\par
# understanding of how Boolean Logic works and why it works.Type different "True"\par
# and "False" combinations and see what Gearoge Boole does. Press 'Q' to quit\par
# playing.\par
\cf0\par
\cf1 print('\\nThe George Boole Game\\n')\par
\par
print('George loves to play "True" or "False",\\nbut he needs your help to play it.')\par
\par
print('\\nPress "Q" to quit!')\par
\par
while True:\par
    Boole1=input('\\nType "True" or "False" for the first value. ').strip()\par
    if Boole1=='q':\par
        print('Thanks for playing!')\par
        break\par
    \par
    print(f'\\nYou chose "\{Boole1.title()\}" for your first value.\\n')\par
    Boole2=input('\\nType "True" or "False" for the second value. ').strip()\par
    \par
    if Boole2=='q':\par
        print('Thanks for playing!')\par
        break\par
    \par
    print(f'You chose "\{Boole2.title()\}" for your second value.\\n')\par
    \par
    if Boole1=='true' and  Boole2=='true':\par
        print(f' "AND" is true because Boole1 is "\{Boole1.title()\}" \\\par
and Bool2 is "\{Boole2.title()\}".\\n')\par
        \par
    elif Boole1=='false' and Boole2=='false':\par
        print(f' "AND" is true because Boole1 is "\{Boole1.title()\}" and Boole2 is \\\par
"\{Boole2.title()\}".\\n')\par
        \par
    elif Boole1=='true' or Boole2=='true':\par
        print(f' "OR" is true because Boole1 is "\{Boole1.title()\}" and Boole2 is \\\par
"\{Boole2.title()\}".\\n')\par
        \par
    elif Boole1=='false' or Boole2=='false':\par
        print(f' "OR" is true because Boole1 is "\{Boole1.title()\}" and Boole2 is \\\par
"\{Boole2.title()\}".\\n')\par
        \par
    else:\par
        print('Type the right vales please!')\par
\cf0\par

\pard\sl240\slmult1\qc\fs28 The 'not' Operator\par

\pard\sl240\slmult1\qj\fs24 '''\par
The 'not' operator simply turns true values into false values, and visa versa; false values into true values. For example, true 'and' true is 'True' and false 'and' false is 'False'. Now here is where things get a little bit weird when implementing a 'not' operator against true and false values. Here are some examples of the 'not' operator and how it turns true values into false values, and false values into true values.\par

\pard\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3 # Here are some examples of how the 'not' operator works. Type and execute/run\par
# each of these program examples to see how they work.\par
\cf0\par
\cf1 Boole=True\par
\par
if Boole==True:\par
    print(Boole)\par
    \par
print('George Boole says \\'True\\' because \\'True\\' and \\'True\\' are true.')\par
\par
Boole=False\par
\par
if Boole==False:\par
    print(Boole)\par
    \par
print('George Boole says \\'False\\' because \\'False\\' and \\'False\\' are false.')\par
\cf0\par
\cf3 # Here are two examples of how 'True' and 'False' values contradict one another,\par
# which causes these two program examples below not to show any output on the\par
# screen, except the 'print' statement, that says George Boole does not contradict\par
# himself.\par
\cf0\par
\cf1 Boole=True\par
\par
if Boole==False:\par
    print(Boole)\par
    \par
print('George Boole does not contradict himself.')\par
\par
Boole=False\par
\par
if Boole==True:\par
    print(Boole)\par
    \par
print('George Boole does not contradict himself.')\par
\cf0\par
\cf3 # Remeber that if 'True' equals 'True', then the outcome will also equal 'True'.\par
# However, when a 'not' operator is impemented into the mix of a 'True equals 'True'\par
# comparison, that's when things get strangely confusing. However, the confusion is\par
# nothing to fret about. The 'not' operator simply turns a 'True' equals 'True' into a\par
# 'True' equals 'False', which acts like the program examples under the following\par
# program example. All three program examples won't show any output on the \par
# screen, but the 'print' statement 'George Boole does not contradict himself.'\par
\cf0\par
\cf1 Boole=True\par
\par
if Boole==True:\par
    if not Boole:\par
        print(Boole)\par
        \par
print('George Boole does not contradict himself.')\par
\par
Boole=True\par
\par
if Boole==False:\par
    print(Boole)\par
    \par
print('George Boole does not contradict himself.')\par
\par
Boole=False\par
\par
if Boole==True:\par
    print(Boole)\par
    \par
print('George Boole does not contradict himself.')\par
\par
\cf3 # These two program examples below show how a 'not' operator makes a true value\par
# become a false value, and how a false value becomes a true value.\par
\par
\cf1 variable=True\par
\par
if not  variable:\par
    print('False becomes True')\par
\par
else:\par
    print('True Becomes False')\par
\par
variable=False\par
\par
if not  variable:\par
    print('False becomes True')\par
\par
else:\par
    print('True Becomes False')\par
\cf3\par
# Here are some more examples of 'True' and 'False' conditionals. Type and\par
# execute/run each of these program examples below and see what happens when\par
# 'True' and 'False' values become 'False' and 'True' values instead.\par
\par
\cf1 Boole=True\par
\par
if Boole==True:\par
     print('True')\par
\par
else:\par
     Boole==False     \par
     print('False')\par
\par
Boole=False\par
\par
if Boole==True:\par
     print('True')\par
\par
else:\par
     Boole==False\par
     print('False')\par
\par
\cf3 # Here are some more examples of the 'not' operator. Type and execute/run each of\par
# these program examples below and see what happens when a 'True' value is 'not'\par
# 'True' and when a 'False' value is 'not' 'False'.\par
\par
\cf1 Boole=True\par
\par
if not Boole==True:\par
     print('True')\par
     \par
else:\par
     Boole==False\par
     print('False')\par
\par
Boole=False\par
\par
if not Boole==True:\par
     print('True')\par
     \par
else:\par
     Boole==False\par
     print('False')\par
\par

\pard\sl240\slmult1\qc\cf0\fs28 The Definition Function:\cf1\fs24\par

\pard\sl240\slmult1\qj\cf0 '''\par

\pard\widctlpar\qj\f4 Most Python programs consist of functions. Functions in Python allow programmers to add functionality in their programs that might be needed again and again throughout the program's execution run. With functions, programmers can call/execute functions from another file as part of the main program\rquote s execution run from the main file. Note: calling files from other files must be stored within the same directory path or folder; via Windows for example. Functions can also return values, which can be changed or modified throughout the program\rquote s execution run. Just remember that functions simply add functionality. Also remember the acronym or abbreviation (DRY): Don\rquote t Repeat Yourself!           \par

\pard\sl360\slmult1\qj\f0 '''\par

\pard\widctlpar\cf3\f4 # Definition functions are called def functions for short. Def function statements\par
# always start with the word \lquote def\rquote  followed by parameters or without parameters.\par
# However, all def statements must proceed with a semicolon (:) at the end of all def\par
# statements. For example, def example(): is a function without parameters, whereas\par
# def example(self,name,age): has three parameters. The semicolon assures that any\par
# program statements underneath the def statements are always indented, which is\par
# Python\rquote s way of keeping the program statements as part of the complete def\par
# function. Note: any program statements, which are not indented will simply be\par
# bypassed altogether, meaning they won\rquote t be executed as part of the def function at\par
# all; thus creating potential errors to occur. Now it's time to get your feet a little bit\par
# more wet. Are you ready?\par
\par
# Like strings, def functions must not have any empty spaces between words. Use an\par
# underscore ie: (_) in place of empty spaces instead.\par
\par
# This small program shows no output whatsoever on the screen.\par
\par
\cf1 def my_first_function():\par
    print('My first function')\par
\par
\cf3 # Now, let's call the function with the following statement so we can see the output on\par
# the screen.\par
\cf1\par
my_first_function()\par
\par
\cf3 # Type and execute/run the program with the def function's call statement\par
# my_first_function() to see the actual output on the screen.\par

\pard\sl240\slmult1\cf0\f0\par

\pard\widctlpar\cf1\f4 def my_first_function():\par
    print('My first function')\par
\par
my_first_function()\par
\par
\cf3 # Now, let's expand our understanding of functions by adding more program\par
# statements to truly create some functionality in our def function program.\par
# Remember to 'call the function' to see the output on the screen with the statement\par
# 'my_second_function()'\par
\par
\cf1 def my_second_function():\par
    print('My second function.')\par
    print('add some more functionality.')\par
    print('Wow! This was so easy to create!')\par
\par
my_second_function()\par
\par
\cf3 # Now, let's dive a little deeper into program functionality with a simple for-loop in our\par
# def statement block. Type and execute/run the program and see what happens.\par
\par
\cf1 def my_third_function():\par
    for i in range(3):\par
        print('My third function example.')\par
\par
my_third_function()\par
\par
\cf3 # Now, let\rquote s combine some strings with a for-loop inside our forth def function block\par
# program example. Type and execute/run the program and see what happens.\par
\par
\cf1 tuple_string=('Python','Programmer\\'s','Glossary','Bible')\par
\par
def my_forth_function():\par
    for i in tuple_string:\par
        print(i,end=' ')\par
\par
my_forth_function()\par
\par
\cf3 # The (end=' ') emitter forces the print statement to keep printing on the same line.\par
# Below is the very same program example as above, but without the (end=' ') emitter.\par
# Type and execute/run the program and see what happens.\cf0\f5\lang1033\par
\cf1\f4\lang9\par
tuple_string=('Python','Programmer\\'s','Glossary','Bible')\par
\par
def my_forth_function():\par
    for i in tuple_string:\par
        print(i)\par
\par
my_forth_function()\par
\par
\cf3 # Now, let's use some parameters in our def function statement program example.\par
# Type and execute/run the program below and see what happens.\par
\par
\cf1 def my_function(first_parameter,second_parameter,third_parameter):\par
    print(first_parameter,second_parameter,third_parameter)\par
  \par
my_function('first parameter','second parameter','third parameter')\par
\par
\cf3 # When using parameters inside def function statements, you must also take note that\par
# you must use the exact number of variables to how many values you use within the\par
# function's call statement. For example, if you use three parameter variables, you\par
# must also use exactly three values to satisfy all three parameter variables. If you\par
# exceed the number of variables, or exceed the number of parameter values within\par
# the function's call statement, you will get an index out of range error; thus crashing\par
# the prgram. It's imperative that, including simple strings or anything that takes\par
# variables and values must always be equal to be satisfied. As for the print statement,\par
# you can leave out arguments, and use them later on. Here is an example of what the\par
# very same program below does when you leave out some arguments within the print \par
# statement; the program continues to run fine. However, if you try to add an\par
# argument that does not exist inside the def function's parameter variables, a crash\par
# will occur.\par
\cf5\par
\cf1 def my_function(first_parameter,second_parameter,third_parameter):\par
    print(first_parameter,second_parameter,third_parameter)\par
  \par
my_function('first parameter','second parameter','third parameter')\par
\par
\cf3 # Here is the very same program example, but with arguments that don't belong to the\par
# function's parameter variables at all. When you 'try' to run the program, a crash will\par
# occur. Type and execute/run the program below and see what happens, when you\par
# try to use non-existent arguments within the print statement.\par
\cf5\par
\cf1 def my_function(first_parameter,second_parameter,third_parameter):\par
    print(first_parametr,second_parameter,third_paramete)\par
  \par
my_function('first parameter','second parameter','third parameter')\par
\par
\cf3 # The program above has two arguments, which don't belong called 'first_parametr'\par
# and 'third_paramete'. The programmer didn't catch the error, because the 'e' and\par
# the 'r' were left out of the argument's variables, which was the root cause of the\par
# error. Variables and values must be literal, meaning they must be the same, unless\par
# they are modified, which the program example below shows. Type and execute/run\par
# the program below and see what happens.\par
\par
\cf1 def my_function(first_parameter,second_parameter,third_parameter):\par
    print('mod first_parametr',second_parameter,'mod third_paramete')\par
  \par
my_function('first parameter','second parameter','third parameter')\par
\par
\cf3 # Single (') or double (") quote marks can be used to modify the print statement's\par
# argument variables. However, if you use single quote marks, you have to use only\par
# single quote marks. If you use double quote marks, you must use only double quote\par
# marks. The quote marks always have to be the same regardless. Here is a simple\par
# print statement that uses the wrong quote marks. Type and execute/run the one line\par
# program example below and see how the program causes an error.\par
\par
\cf1 print("the program will crash, because the quotes are wrong')\par
\par
\cf3 # Here are the two correct ways to use single or double quote marks.\par
\par
\cf1 print('The program runs, because the quote marks are the same')\par
\par
print("The program runs, because the quote marks are the same")\par
\par
\cf3 # Now, let's use the very same def function program example below and change some\par
# values in the function's call statement, so we can understand functions a little bit\par
# better. However, this topic on functions is quite lengthy; we have much to cover\par
# before we get into class functions, which is also quite the lengthy topic in itself.\par
\par
# We already know that using one variable means using just one value. We also know\par
# that if we use two variables, we must also use two values to satisfy the two variables,\par
# i.e. For example:\par
\par
#\tab variable_1='value 1'\par
\par
#\tab variable_1,variable_2='value 1','value 2'\par
\par
#\tab variable_1,variable_2,variable_3='value 1','value 2','value 3'\par
\par
\cf1 variable_1,variable_2,variable_3='value 1','value 2','value 3'\par
\par
print(variable_1)\par
\par
\cf3 # The print statement contains the argument variable, variable_1, which its value is\par
# called 'value 1'. The argument variable passes the value, 'value 1' right into the print\par
# statement, 'variable_1'. You can use as many of the same argument variables you so\par
# desire. You can save argument variables for later use as well. You can also use and\par
# reuse argument variables over and over again, such in this program example below.\par
# Type and execute/run the program example below and see what happens.\par
\par
\cf1 variable_1,variable_2,variable_3='value 1','value 2','value 3'\par
\par
print(variable_1,variable_1,variable_3,variable_2,variable_3)\par
\par
\cf3 # Take a look at the call statement 'my_function' and change the word 'value 1' to say\par
# the word "Python". Make sure you use single or double quote marks in each value.\par
# Double quote marks are used as an example for one value to show how quote marks\par
# behave. Type and execute/run the program below and see what happens.\par
\cf1\par
def my_function(first_parameter,second_parameter,third_parameter):\par
    print(first_parameter,second_parameter,third_parameter)\par
  \par
my_function("Value 1",'Value 2','Value 3')\par
\par
\cf3 # Take a close look at the quote marks at "value2" in the function's call statement. You\par
# can use single or double quotes, but you cannot mix double quotes with single\par
# quotes on the same value. For example:\par
\par
#\tab my_function(\cf1 "Python'\cf3 ,"Value 2",'Value 3')\par
\par
#\tab my_function(\cf1 'Python"\cf3 ,"Value 2",\cf1 'Value 3"\cf3 ) \cf1\par
\par
def my_function(first_parameter,second_parameter,third_parameter):\par
    print(first_parameter,second_parameter,third_parameter)\par
  \par
my_function("Python","Value 2",'Value 3')\par
\par
\cf3 # Note: always use commas to separate multiple variables, multiple values and\par
# multiple arguments, including strings, tuples, lists and dictionaries alike. Use the (\\)\par
# inline emitter to wrap long statements of any sort.\par
\par
# Now, let's add some more argument variables in our def function program example.\par
# Note: if you have three variables, and three values, you can only use three, named\par
# arguments. However, you can use and reuse arguments over and over again, and as\par
# many times as you like.\cf1\par
\par
def my_function(first_parameter,second_parameter,third_parameter):\par
    print(first_parameter,second_parameter,third_parameter,first_parameter,\par
          third_parameter,first_parameter)\par
  \par
my_function("Python",'Value 2','Value 3')\par
\par
\cf3 # You can also save arguments for later use, such as the case with this very same\par
# program example below. Type and execute/run the program and see what happens.\cf1\par
\par
def my_function(first_parameter,second_parameter,third_parameter):\par
    print('I don\\'t want to use any arguments for now.')\par
  \par
my_function("Python",'Value 2','Value 3')\par
\par
\cf3 # Now it's time to ratchet things up a bit with more def functions. Are you ready?\par
\par
# Take a close look at this def function's parameter variables. Just like before, but this\par
# time the values are inside the def function statement along with the def function's\par
# variables. Also take a close look at the def function's call statement; nothing needs\par
# to be inside the call statement 'my_function'. That's because the variables and the\par
# values are inside the def function statement's parameters themselves. Type and\par
# execute/run the program below and see what happens.\par
\par
\cf1 def my_function(var1='value1',var2='value2',var3='value3'):\par
    print(var1)\par
    print(var2)\par
    print(var3,var1,var3,var2)\par
\par
my_function()\par
\par
\cf3 # Remeber you can use and reuse arguments over and over again.\par
\par
# Def functions can return values via the 'return' statement. Type and execute/run the\par
# programs below and see what happens.\par
\par
\cf1 def get_value(name):\par
    return name\par
\par
print(get_value('Python Programmer\\'s Glossary Bible'))\par
\cf3\par
# This program example below does the very same thing as the program example\par
# above illustrates. If name values are too long, they can be stored inside a variable\par
# instead. For example, the variable 'get_name' takes the place of this really long\par
# string value:\par
\par
#\tab get_value('Python Programmer\\'s Glossary Bible')\par
\par
\cf1 def get_value(name):\par
    return name\par
\par
get_name=get_value('Python Programmer\\'s Glossary Bible')\par
\par
print(get_name)\par
\par
def get_value(name,program):\par
    return name\par
\par
get_name=get_value('Python','Programmer\\'s Glossary Bible')\par
\par
print(get_name)\par
\par
def get_value(name,program):\par
    return program\par
\par
get_name=get_value('Python','Programmer\\'s Glossary Bible')\par
\par
print(get_name)\par
\par
\cf3 # Use the index [ ] emitter to create nicer looking screen output.\par
\cf1\par
def get_value(name,program,book):\par
    return name,program,book\par
\par
get_name=get_value('Python','Programmer\\'s','Glossary Bible')\par
\par
print(get_name[0],get_name[1],get_name[2])\par
\par
\cf3 # Without the index [ ] emitter, the screen output looks sort of unfinished such as in\par
# this program example below illustrates.\par
\par
\cf1 def get_value(name,program,book):\par
    return name,program,book\par
\par
get_name=get_value('Python','Programmer\\'s','Glossary Bible')\par
\par
print(get_name)\par
\par
\cf3 # Use the (f') format function to concatenate/add words with strings. Use curly braces\par
# \{ \} in conjunction with the (f') format function. Type and execute/run the program\par
# example below and see what happens.\cf1\par
\par
def  software(name,program,book):\par
    return f'I love my \{name\} \{program\} \{book\} very much!'\par
\par
Python=software('Python','Programmer\\'s','Glossary Bible')\par
\par
print(Python)\par
\par
\cf3 # Def functions can return the result of a given number value. For example 'num's\par
# value is equal to '4', which is in the print statement. When multiplying 'num*num, the\par
# value '4' also gets multiplied ie: '4*4', which now equals '16'. So the result of the\par
# returning value is '16'. Type and execute/run each progarm example below and see\par
# what happens.\cf1\par
\cf3\par
\cf1 def multiply(num):\par
    return num*num\par
\par
print(multiply(4))\par
\par
\cf3 # You can add versatility to functions with the 'return' statement. You can return 'num\par
# as much as you like. For example:\cf1\par
\par
def multiply(num):\par
    return num*num+num\par
\par
print(multiply(4))\par
\par
\cf3 # You can also combine ordinary integer numbers with values, such as this program\par
# example below illustrates. Just remember the golden rules of "BEDMAS" -2+5 = 3+2\par
# = 5-2 = '3'.\cf1\par
\par
def multiply(num):\par
    return num*num+num+num-2+5\par
\par
print(multiply(4))\par
\cf3\par
# The 'return' statement returns the results of the value 'num'.\par
\par
# The result of the returned value 'num' is: 4*4+4+4-2+5 = '27'\par
\par
\cf1 def multiply(num):\par
    return num*num+num+num-2+5\par
\par
print(multiply(4+3))\par
\par
\cf3 # The result of the returned value 'num' is: 7*7+7+7-2+5 = '66'\par
\par
# Let's create a return function that returns two values called 'num1 and 'num2'. The\par
# value of 'num1=4' and the value of 'num2=3'.\par
\cf1\par
def multiply(num1,num2):\par
    return num1*num2\par
\par
print(multiply(4,3))\par
\par
\cf3 # The result of the returned values of 'num1' and 'num2' is: 4*3 = '12'\par
\par
# You can keep these two values as separate values, which return their separate\par
# results. for example:\par
\par
#\tab 4*3,3+4 = 12,7\par
\par
# Use a comma (,) to separate values inside the 'return' statement.\par
\par
#\tab return num1*num2,num1+num2\par
\par
\cf1 def multiply(num1,num2):\par
    return num1*num2,num1+num2\par
\par
print(multiply(4,3))\par
\par
\cf3 # Type and execute/run the program example above and see what happens.\par
\par
# Let's cube a number with a return function and see what happens when you type and\par
# execute/run the program example below.\par
\par
\cf1 def cube(num):\par
    return num**num\par
\par
print(cube(3))\par
\par
\cf3 # Use a double asterisk (**) to cube numbers. The value 3 works like this:\par
\par
#\tab 3*3*3 = '27'\par
\par
#\tab print(3*3*3)\par
\cf1\par
\cf3 # Return an integer number with the 'int' function.\par
\par
\cf1 def multiply(num1,num2):\par
    return int(num1*num2)\par
\par
print(multiply(4,3.0))\par
\par
\cf3 # Return a floating-point number with the 'float' function.\cf1\par
\cf3\par
\cf1 def multiply(num1,num2):\par
    return float(num1*num2)\par
\par
print(multiply(4,3))\par
\par
\cf3 # Let's create an outer function and an inner function, then call the outer function by\par
# assigning the variable 'get_function' to it. Type and execute/run the program\par
# example below and see what happens.\cf1\par
\par
def outer_function():\par
    message='Python'\par
    def inner_function():\par
        print(f'\{message\} Programmer\\'s Glossary Bible')\par
        \par
    return inner_function\par
\par
get_function=outer_function()\par
\par
get_function()\par
\par
\cf3 # Let's pass the variable 'message' into the outer function and return the value\par
# through the inner function. Next, let's call the outer and inner functions by assigning\par
# the variables 'get_function1' and 'get_function2' to them. Type and execute/run this\par
# program example below and see what happens.\cf1\par
\par
def outer_function(message):\par
    message=message\par
    def inner_function():\par
        print(message)\par
        \par
    return inner_function\par
\par
get_function1=outer_function('Get Function One.')\par
get_function2=outer_function('Get Function Two.')\par
\par
get_function1()\par
get_function2()\par
\par
\cf3 # Let's pass the variable 'message' right into the inner function and then call the outer\par
# and inner functions by assigning the variables 'get_function1' and 'get_function2 to\par
# them. Type and execute/run the program example below and see what happens.\cf1\par
\par
def outer_function(message):\par
    def inner_function():\par
        print(message)\par
        \par
    return inner_function\par
\par
get_function1=outer_function('Get Function One.')\par
get_function2=outer_function('Get Function Two.')\par
\par
get_function1()\par
get_function2()\par
\par
\cf3 # Python or any other object oriented programming languages, such as 'C' has no\par
# 'goto', 'gosub' or any 'jump to subroutine' commands at all. To get around this\par
# problem, Python uses 'def functions' to create subroutines. Type and execute/run\par
# the program example below and see what happens.\par
\par
\cf1 def subroutine_1():\par
    print('This is subroutine 1')\par
    \par
def subroutine_2():\par
    print('This is subroutine 2')\par
    \par
def subroutine_3():\par
    print('This is subroutine 3')\par
    \par
while True:\par
    \par
    get_subroutine=input("Press '1', '2' or '3' to get the subroutine \\\par
you want to display: ").lower().strip()\par
\par
    while True:\par
        \par
        if get_subroutine=='1':\par
            subroutine_1()\par
            break\par
        \par
        elif get_subroutine=='2':\par
            subroutine_2()\par
            break\par
        \par
        elif get_subroutine=='3':\par
            subroutine_3()\par
            break\par
        \par
        else:\par
             print('Sorry! No subroutine exist for',\par
                   get_subroutine)\par
             break\par
            \par
    display_again=input("Would you like to display anymore subroutines? \\\par
Type 'Yes' or 'No' to confirm. ").lower().strip()\par
    \par
    if display_again=='yes':\par
        continue\par
    \par
    elif display_again=='no':\par
        break\par
    \par
    else:\par
        print('Sorry! I don\\'t understand that.')\par
\par
\cf3 # Now it's time to get into working with classes.\cf1\par
\par

\pard\sl240\slmult1\qc\cf0\f0\fs28 The Class Function:\cf1\fs24\par

\pard\sl240\slmult1\qj\cf0 '''\par

\pard\widctlpar\qj\f4 The class function in Python is like a super function, which can have multiple def functions right inside it. Class functions may consist of parent classes and child classes alike. The child classes inherit the parent classes, which means giving functions the ability to change their behavior outcome, throughout a program's execution run. You can use as many parent/upper classes you wish. However, only one child class can be used, which is always the last class act. You don't need to invoke def functions to use classes either. However, we are going to learn about both types such as this program example below, which doesn't invoke def functions at all.\par

\pard\sl360\slmult1\qj\f0 '''\par

\pard\sl240\slmult1\cf3 # Type and execute/run the program example below and see what\par
# happens.\par
\cf0\par
\cf1 class Grandma:\par
    gm='I\\'m the Grandma class'\par
\par
class Grandpa:\par
    gp='I\\'m the Grandpa class'\par
\par
class Mom:\par
    m='I\\'m the Mom class'\par
\par
class Dad:\par
    d='I\\'m the Dad class'\par
\par
class Child(Grandma,Grandpa,Mom,Dad):\par
    pass\par
\par
print(Child.gm)\par
print(Child.gp)\par
print(Child.m)\par
print(Child.d)\par
\par
\cf3 # The 'pass' function tells the program to ignore the empty code block until later use,\par
# via the programmer's choice.\par
\par
# Now let's place a 'print' statement where the 'pass' function was. Type and\par
# execute/run the program below and see what happens.\par
\par
\cf1 class Grandma:\par
    gm='I\\'m the Grandma class'\par
\par
class Grandpa:\par
    gp='I\\'m the Grandpa class'\par
\par
class Mom:\par
    m='I\\'m the Mom class'\par
\par
class Dad:\par
    d='I\\'m the Dad class'\par
\par
class Child(Grandma,Grandpa,Mom,Dad):\par
    print("The 'pass' function is now a print statement.")\par
\par
print(Child.gm)\par
print(Child.gp)\par
print(Child.m)\par
print(Child.d)\par
\par
\cf3 # Sometimes a code block needs information, but you, the programmer does not wish\par
# to provide that, and that's where the 'pass' function comes in handy. Sometimes you\par
# don't want to use any code in a code block at all; that's the whole purpose of what\par
# the 'pass' function is all about. The 'pass' function ignores the code block and caries\par
# on its way, without the potential risk of errors. Here is an example of such an error.\par
# Type and execute/run the program examples below and see what happens.\par
\par
\cf1 class syntax_error:\par
\par
\cf3 # You will get a syntax error: 'expected an indented block'\par
\par
\cf1 class pass_function:\par
    pass\par
\par
\cf3 # The 'pass' function ignores the empty code block, which allows the programmer to\par
# decide what to do later on, or simply 'pass' the empty code block altogether. Use the\par
# 'pass' function in any type of empty code block to avoid potential errors from\par
# occurring.\par
\par
# Classes can also be single classes, such as the program example below illustrates.\par
# Type and execute/run the program below and see what happens.\par
\par
\cf1 class Single_class:\par
    sc='I\\'m a single class.'\par
\par
print(Single_class.sc)\par
\par
\cf3 # Here is a simple Mom class and a simple Dad class, along with their simple Child\par
# class. Type and execute/run the program example below and see what happens.\par
\par
\cf1 class Mom:\par
    mom='I\\'m Chid\\'s Mom.'\par
\par
class Dad:\par
    dad='I\\'m Child\\'s Dad.'\par
\par
class Child(Mom,Dad):\par
    pass\par
\par
print(Child.mom)\par
print(Child.dad)\par
\par
\cf3 # Let's call up the class function called 'Mom'.\par
\par
\cf1 print(Mom.mom)\par
\par
\cf3 # Let's call up the class function called 'Dad'.\par
\cf1\par
print(Dad.dad)\par
\par
\cf3 # Let's call up Mom and Dad inside one, single 'print' statement.\par
\par
\cf1 print(Mom.mom,Dad.dad)\par
\par
\cf3 # Let's call up the Child class inside one, single 'print' statement.\par
\par
\cf1 print(Child.mom,Child.dad)\par
\par
\cf3 # Here is our very same Mom and Dad class program example, which uses list\par
# variables called 'mom' and 'dad'. Type and execute/run the program below and see\par
# what happens.\cf1\par
\par
class Mom:\par
    mom=[\par
        'Class Mom with list item position [0]',\par
        'Class Mom with list item position [1]',\par
        'Class Mom with list item position [2]',\par
        ]\par
    \par
class Dad:\par
    dad=[\par
        'Class Dad with list item position [0]',\par
        'Class Dad with list item position [1]',\par
        'Class Dad with list item position [2]',\par
        ]\par
    \par
class Child(Mom,Dad):\par
    pass\par
\par
print(f'The Child class inherits all classes:\\n\{Child.mom[0]\}')\par
print(f'The Child class inherits all classes:\\n\{Child.dad[1]\}')\par
\cf3\par
# Now let's have some fun and change the words in the list. Let's also use double (")\par
# quote marks instead of single (') quote marks. Note: the (f') format function is not\par
# invoked inside the 'print' statements. However, you can still invoke the (f') format\par
# function if you like. Type and execute/run the program below and see what happens.\par
\cf1\par
class Mom:\par
    mom=[\par
        "Mom's are the best!",\par
        "Mom's care so much!",\par
        "Mom's make dreams happen!",\par
        ]\par
    \par
class Dad:\par
    dad=[\par
        "Dad's are the best!",\par
        "Dad's care so much!",\par
        "Dad's make dreams happen!",\par
        ]\par
    \par
class Child(Mom,Dad):\par
    pass\par
\par
print(Child.mom[0])\par
print(Child.dad[1])\par
\par
\cf3 # Tip: invoke the 'pass' function to make it much easier to create classes. Remove any\par
# 'pass' functions you no longer need, when adding code inside empty code blocks.\par
# Type and execute/run the program example below and see what doesn't happen.\cf1\par
\par
class Mom:\par
    pass\par
\par
class Dad:\par
    pass\par
\par
class Child(Mom,Dad):\par
    pass\par
\par
\cf3 # The program above works just fine even if it shows no output on the screen. The\par
# reason that is, is simply because the 'pass' functions are just empty placeholders\par
# that occupy the empty code blocks, until the programmer decides to add code\par
# inside the empty code blocks.\par
\par
# Type and execute/run the program example below and see what happens.\par
\par
\cf1 class Mom:\par
    mom='Mom'\par
\par
class Dad:\par
    pass\par
\par
class Child(Mom,Dad):\par
    pass\par
\par
print(Mom.mom)\par
print(Child.mom)\par
print(Mom.mom,Child.mom)\par
\par
\cf3 # Now it's time to grow up and learn some more about classes, without Mom and Dad\par
# around. Classes don't need to be called Mom and Dad or Child to work. You can give\par
# classes any name you wish. Classes always start with an uppercase letter like\par
# 'Mom', 'Dad' and 'Child'. However, you can use lowercase letters if you like.\par
\par
# The program example below illustrates a single class function, which invokes two\par
# def function blocks. Single class functions with two or more def function blocks work\par
# similar to parent and child class functions. Creating function classes simply means\par
# adding more versatility to functions in general. Type and execute/run the program\par
# below and see what happens.\par
\par
\cf1 class My_Shapes:\par
    def __init__(self,shape,sides):\par
        self.shape=shape\par
        self.sides=sides\par
        \par
    def shape_sides(self):\par
        return f'\{self.shape\} \{self.sides\}'\par
    \par
a=My_Shapes('Hexagon','Six Sides')\par
b=My_Shapes('Octagon','Eight Sides')\par
c=My_Shapes('Dodecagon','Twelve Sides')\par
\par
print(f'\{a.shape\} \{b.shape\} \{c.shape\}')\par
print(f'\{a.shape_sides()\} \{b.shape_sides()\} \{c.shape_sides()\}')\par
\par
\cf3 # The program example below is the very same program example above. The only\par
# difference is, 'num' was added to create a third argument.\par
\par
\cf1 class Shapes:\par
    def __init__(self,shape,num,sides):\par
        self.shape=shape\par
        self.num=num\par
        self.sides=sides\par
        \par
    def shape_sides(self):\par
        return f'\{self.shape\} \{self.num\} \{self.sides\}'\par
    \par
a=Shapes('Hexagon',6,'sides')\par
b=Shapes('Octagon',8,'sides')\par
c=Shapes('Dodecagon',12,'sides')\par
\par
print(f'\{a.shape\} \{b.shape\} \{c.shape\}')\par
print(f'\{a.num\} \{b.num\} \{c.num\}')\par
print(f'\{a.shape_sides()\} \{b.shape_sides()\} \{c.shape_sides()\}')\par
\par
\cf3 # The program example above uses a dunder method, which consists of two double\par
# underscores '__ __', called dunders. The dunder 'init' method is one of the most used\par
# methods. These special dunder methods are sometimes called 'Magic Methods', and\par
# these special methods allow us to emulate built-in data types or implement operator\par
# overloading. You probably didn't know it, but you've been using these dunder\par
# methods all along. These methods can be extremely powerful if they are used\par
# correctly. The dunder 'init' means to initialize a function. The word 'Dunder' simply\par
# means 'Double__Underscore'.\par
\par
# These two 'print' statements below use the dunder method 'add', which is the same\par
# as the 'print' statements 'print(2+3)' and 'print('a'+'b')'. The 'int' function adds only\par
# integer numbers together, whereas the 'str' function concatenates/joins character\par
# strings together.\par
\par
\cf1 print(int.__add__(2,3))\par
\par
\cf3 # Screen output:\tab 5\par
\cf1\par
print(str.__add__('a','b'))\par
\cf3\par
# Screen output:\tab ab\par
\par
# Dunder methods assure functionality inside class functions. For example, you\par
# wouldn't use a dunder '__str__' method with integer values; likewise, you wouldn't\par
# use a dunder '__add__' method with character string values.\par
\par
# Take a close look at these two program examples below. You Notice there are\par
# yellow highlighted variables. These variables indicate how these two, very same\par
# program examples can be written. Both program examples do exactly the same\par
# thing, even though they look a wee bit different. Type and execute/run these two\par
# program examples below and see what happens.\par
\par
# Program example 1:\par
\par
\cf1 class Dunder_add:\par
    def __init__(self,num):\par
        self.\highlight2 num\highlight0 =num\par
        \par
    def __add__(self,plus):\par
        return self.\highlight2 num\highlight0 +plus\par
\par
a=Dunder_add(6)\par
b=Dunder_add(8)\par
c=Dunder_add(12)\par
\par
print(a.\highlight2 num\highlight0 +b.\highlight2 num\highlight0 +c.\highlight2 num\highlight0 )\par
\par
\cf3 # Program example 2:\cf1\par
\cf3\par
\cf1 class Dunder_add:\par
    def __init__(self,num):\par
        self.\highlight2 num\highlight0 =num\par
        \par
    def __add__(self,plus):\par
        return self.num+plus.\highlight2 num\highlight0\par
\par
a=Dunder_add(6)\par
b=Dunder_add(8)\par
c=Dunder_add(12)\par
\par
print(a+b+c.\highlight2 num\highlight0 )\par
\cf3\par
# There are several types of dunder methods in Python. However, we will only focus\par
# on the ones we will learn for now.\par
\par
# Take a close look at these two program examples below. You Notice there are\par
# yellow highlighted variables. These variables indicate how these two, very same\par
# program examples can be written. Both program examples do exactly the same\par
# thing, even though they look a wee bit different. Type and execute/run these two\par
# program examples below and see what happens.\par
\par
# Program example 1:\par
\par
\cf1 class Shapes:\par
    def __init__(self,shape,sides):\par
        self.\highlight2 shape\highlight0 =shape\par
        self.\highlight2 sides\highlight0 =sides\par
        \par
    def shape_sides(self):\par
        return f'\{self.\highlight2 shape\highlight0\} \{self.\highlight2 sides\highlight0\}'\par
    \par
    def __add__(self,add_num):\par
        return self.\highlight2 sides\highlight0 +add_num\par
\par
a=Shapes('Hexagon',6)\par
b=Shapes('Octagon',8)\par
c=Shapes('Dodecagon',12)\par
\par
print(a.\highlight2 sides\highlight0 +b.\highlight2 sides\highlight0 +c.\highlight2 sides\highlight0 )\par
\par
print(a.shape_sides(),b.shape_sides(),c.shape_sides())\par
\par
\cf3 # Program example 2:\par
\cf1\par
class Shapes:\par
    def __init__(self,shape,sides):\par
        self.\highlight2 shape\highlight0 =shape\par
        self.\highlight2 sides\highlight0 =sides\par
        \par
    def shape_sides(self):\par
        return f'\{self.\highlight2 shape\highlight0\} \{self.\highlight2 sides\highlight0\}'\par
    \par
    def __add__(self,add_num):\par
        return self.\highlight2 sides\highlight0 +add_num.\highlight2 sides\par
\highlight0\par
a=Shapes('Hexagon',6)\par
b=Shapes('Octagon',8)\par
c=Shapes('Dodecagon',12)\par
\par
print(a+b+c.\highlight2 sides\highlight0 )\par
\par
print(a.shape_sides(),b.shape_sides(),c.shape_sides())\par
\par

\pard\widctlpar\cf3\f4 # The program example below converts two integers into string characters, while still\par
# being able to calculate the result of the actual integer values themselves. Type and\par
# execute/run the program example below and see what happens.\par
\par
\cf1 class Dunder_str:\par
    def __init__(self,num1,num2):\par
        self.num1=num1\par
        self.num2=num2\par
        \par
    def __str__(self):\par
        return str(f'\{self.num1\}/\{self.num2\}, and I want more text')\par
    \par
dunder=Dunder_str(26,2+3)\par
\par
print ("I want these integers to be a string, using 'str'.",str(dunder),'here.')\par
\par
\cf3 # The program example below uses the dunder method '__repr__', which follows the\par
# dunder method '__str__' as a fallback for programmers to see code as human,\par
# readable text. Type and execute/run the program example below and see what\par
# happens.\par
\par
\cf1 class Dunder_str:\par
    def __init__(self,num1,num2):\par
        self.num1=num1\par
        self.num2=num2\par
        \par
    def __str__(self):\par
        return str(f'\{self.num1\}/\{self.num2\}, and I want more text')\par
    \par
    def __repr__(self):\par
        return str(f'\{self.num1\},\{self.num2\}, and I want more text')\par
    \par
dunder=Dunder_str(26,2+3)\par
\par
print("I want these integers to be a string, using 'str'.",str(dunder),'here.')\par
\par
print("I want these integers to be an object, using 'repr'.",repr(dunder),'here.')\par
\par
\cf3 # Here is a multi-class function program that has multiple def statements in it. Each\par
# def statement has a different return math operation, such as addition, subtraction,\par
# multiplication, division, square and cube operations. The asterisk (*) is used for\par
# multiplying numbers together. Type and execute/run the program example below\par
# and see what happens.\par
\par
\cf1 class Math0:\par
    def addit(num1,num2):\par
        return num1+num2\par
    \par
class Math1:\par
    def subtr(num1,num2):\par
        return num1-num2\par
    \par
class Math2:\par
    def multi(num1,num2):\par
        return num1*num2\par
    \par
class Math3:\par
    def divis(num1,num2):\par
        return num1/num2\par
    \par
class Math4:\par
    def square(num1,num2):\par
        return num1**num2\par
    \par
class Math5:\par
    def cube(num1,num2):\par
        return num1**num2*num1\par
    \par
class Sum (\par
    Math0,Math1,\par
    Math2,Math3,\par
    Math4,Math5\par
    ):\par
    pass\par
\par
print(Sum.addit(5,2))\par
print(Sum.subtr(5,2))\par
print(Sum.multi(5,2))\par
print(Sum.divis(5,2))\par
print(Sum.square(5,2))\par
print(Sum.cube(5,2))\par
\par
\cf3 # Let's add three class functions together inside the 'print' statement.\par
\par
\cf1 print(Sum.addit(5,2)+Sum.subtr(5,2)+Sum.cube(5,2))\par
\par
\cf3 # Now, let's create a list called 'x' and add all the class functions together inside the\par
# 'print' statement. Remember to use list indexing ie: [ ] starting at list index [0]. Also\par
# remember that Python always starts at index [0] with tuples, lists and dictionaries\par
# alike.\par
\par
\cf1\f0 x=(\par
    Sum.addit(5,2),\par
    Sum.subtr(5,2),\par
    Sum.multi(5,2),\par
    Sum.divis(5,2),\par
    Sum.square(5,2),\par
    Sum.cube(5,2)\par
    )\par
\par
print(x[0]+x[1]+x[2]+x[3]+x[4]+x[5])\par
\par
\cf3 # Let's call up all the actual functions, which are inside the multi-class function\par
# program example.\cf1\par
\par
print(Math0.addit(5,2))\par
\par
print(Math1.subtr(5,2))\par
\par
print(Math2.multi(5,2))\par
\par
print(Math3.divis(5,2))\par
\par
print(Math4.square(5,2))\par
\par
print(Math5.cube(5,2))\par
\par
\cf3 # The class function program example below works exactly the same as the class\par
# 'Shapes' function program example does. Type and execute/run the program and\par
# see what happens.\cf1\par
\par
class Scientists:\par
    def __init__(self,first_name,last_name):\par
        self.first_name=first_name\par
        self.last_name=last_name\par
    def full_name(self):\par
        return f'\{self.first_name\} \{self.last_name\}' \par
   \par
a=Scientists('Stephen','Hawking')\par
b=Scientists('Albert','Einstein')\par
c=Scientists('Isaac','Newton')\par
d=Scientists('Galileo','Galilei')\par
\par
\cf3 # Try these 'print' statement examples below and change the letter 'b' to the letter 'a'\par
# and try the letter 'c' and so on. Re-execute/run the program and see what happens.\cf1\par
\par
print(f'\{b.first_name\}')\par
print(f'\{b.last_name\}')\par
print(f'\{b.full_name()\}')\par
\par
\cf3 # Make a sentence out of this 'print' statement program example:\cf1\par
\par
print(f'\{b.full_name()\} loves science, and \\\par
so does \{a.full_name()\}, along with \{d.first_name\}.')\par
\par
\cf3 # Type and execute/run the program example below and see what\par
# happens.\cf1\par
\par
class Mathematics:\par
    def __init__(self,addition,subtraction,\par
                 multiplication,division):\par
        self.addition=addition\par
        self.subtraction=subtraction\par
        self.multiplication=multiplication\par
        self.division=division        \par
    def Math_Functions(self):\par
        return self.addition,self.subtraction\par
        return self.multiplication,self.division\par
\par
nums=Mathematics(3+2,3-2,3*2,6/2)\par
\par
names=Mathematics(\par
    'Stephen Hawking',\par
    'Albert Einstien',\par
    'Isaac Newton',\par
    'Galileo Galilei'\par
    )\par
\par
print(\par
    f'\{nums.addition\}',f'\{names.addition\}\\n'\par
    f'\{nums.subtraction\}',f'\{names.subtraction\}\\n'\par
    f'\{nums.multiplication\}',f'\{names.multiplication\}\\n'\par
    f'\{int(nums.division)\}',f'\{names.division\}'\par
    )\par

\pard\sl240\slmult1\qc\cf0\fs28 OS Text Colour Codes:\par

\pard\sl240\slmult1\qj\fs24 '''\par

\pard\widctlpar\qj\f4 Let's have some fun and colour some text with special OS text colour codes that create colourful text output onto the OS output screen. Note: some Python programs require modules to be imported first, such as this print text colour program example below illustrates.\par

\pard\widctlpar\sl360\slmult1\qj\f0 '''\cf1\par

\pard\widctlpar\cf3 # Type and execute/run the program example below and see what happens. Note: you\par
# must execute/run the program from the OS output screen, via double-clicking the\par
# Python program file itself.\par
\par
# Save the Python file as 'Text Colour Codes'\cf1\par

\pard\widctlpar\qj\par

\pard\widctlpar import os\par
os.system('')\par
\par
print('\\x1b[31mRed')\par
print('\\x1b[32mGreen')\par
print('\\x1b[34mBlue')\par
print('\\x1b[33mYellow')\par
print('\\x1b[35mPurple')\par
\par
input("\\x1b[37mPress 'Enter' to quit the OS output screen.").strip()\par
\par
\cf3 # Create variables to make the colour codes much easier to understand and to work\par
# with. Use the (f') format to simplify the variables inside the 'print' statement. Type\par
# and execute/run the program example below and see what happens. Note: you must\par
# execute/run the program from the OS output screen, via double-clicking the Python\par
# program file itself.\par
\par
# Save the Python file as 'Text Colour Variables'\par
\par
\cf1 import os\par
os.system('')\par
\par
red='\\x1b[31m'\par
green='\\x1b[32m'\par
blue='\\x1b[34m'\par
yellow='\\x1b[33m'\par
purple='\\x1b[35m'\par
white='\\x1b[37m'\par
\par
print(f'\{red\}Red text colour.')\par
print(f'\{green\}Green text colour.')\par
print(f'\{blue\}Blue text colour.')\par
print(f'\{yellow\}Yellow text colour.')\par
print(f'\{purple\}Purple text colour.')\par
\par
input(f"\{white\}Press 'Enter' to quit the OS output screen.").strip()\par
\par
\cf3 # Now, let's create three simple tuples called 'text_words', 'text_colour' and 'text_all'\par
# to, not only shrink down the code, but to also manipulate the code. Type and\par
# execute/run the program example below and see what happens when you change or\par
# rearrange the tuple values inside the 'text_all' tuple itself. Note: you must\par
# execute/run the program from the OS output screen, via double-clicking the Python\par
# program file itself.\par
\par
# Save the Python file as 'Text All'\par
\cf1\par
import os\par
os.system('')\par
\par
text_words=(\par
    "Python","Programmer's",\par
    "Glossary","Bible"\par
    )\par
\par
text_colour=(\par
    '\\x1b[31m','\\x1b[32m',\par
    '\\x1b[34m','\\x1b[33m',\par
    )\par
\par
text_all=(f'\\n\{text_colour[0]\}\{text_words[0]\} \{text_colour[1]\}\{text_words[1]\} \\\par
\{text_colour[2]\}\{text_words[2]\} \{text_colour[3]\}\{text_words[3]\}'\par
    )\par
\par
print(text_all)\par
\par
input("\\x1b[37mPress 'Enter' to quit the OS output screen.").strip()\par
\par
\cf3 # This program example below is exactly the same as the program example above.\par
# The only difference is, that this program example below illustrates the use of the\par
# 'exec' function, which allows programmers to use and reuse redundant code,\par
# without having to retype it over and over. Type and execute/run this program\par
# example below and see what happens. Note: you must execute/run the program\par
# from the OS output screen, via double-clicking the Python program file itself.\par
\par
# Save the Python file as 'Text All 2'\cf1\par
\par
import os\par
os.system('')\par
\par
text_words=(\par
    "Python","Programmer's",\par
    "Glossary","Bible"\par
    )\par
\par
text_colour=(\par
    '\\x1b[31m','\\x1b[32m',\par
    '\\x1b[34m','\\x1b[33m',\par
    '\\x1b[37m'\par
    )\par
\par
text_all=(f'\{text_colour[0]\}\{text_words[0]\} \{text_colour[1]\}\{text_words[1]\} \\\par
\{text_colour[2]\}\{text_words[2]\} \{text_colour[3]\}\{text_words[3]\}'\par
    )\par
\par
redundant_code='''\par
print('')\par
print(text_all)\par
print(f'\{text_colour[4]\}I love my \{text_all\}')\par
'''\par
\par
exec(redundant_code)\par
exec(redundant_code)\par
exec(redundant_code)\par
\par
input(f"\{text_colour[4]\}Press 'Enter' to quit the OS output screen.").strip()\par
\par
\cf3 # Remember to use three single quote (\highlight2 '''\highlight0 ) marks at the beginning and at the end of\par
# program code as illustrated below. Also remember, you can name the\par
# 'redundant_code' variable any name you wish. Type and execute/run the program\par
# example below and see what happens.\cf1\par
\par
redundant_code=\highlight2 '''\highlight0\par
print("I'm a piece of code that needs to be used and reused.")\par
\highlight2 '''\par
\highlight0\par
exec(redundant_code)\par
exec(redundant_code)\par
exec(redundant_code)\par
\par
\cf3 # There are also OS screen colours, which also colours text. However, the OS screen\par
# colours are not as flexible as text colours are. For example, If you try to make one\par
# line of text blue and try to make the next line of text green. When you execute/run the\par
# program, the next line of text you coloured green will override the blue text, making\par
# it green text too. Note: you must execute/run the program from the OS output\par
# screen, via double-clicking the Python program file itself.\par
\par
Save the Python file as 'OS screen colours'\par
\par
\cf1 import os\par
\par
white=('color f')\par
blue=('color 9')\par
red=('color 4')\par
green=('color a')\par
cyan=('color b')\par
pink=('color c')\par
\par
os.system(blue)\par
print('The text is blue')\par
\par
os.system(green)\par
print('The text is green')\par
\par

\pard\sl240\slmult1\qc\cf0\fs28 Python Clock Functions:\par

\pard\sl240\slmult1\qj\fs24 '''\par

\pard\widctlpar\qj\f4 Python clock functions allow you to program the actual time in real time. Python clock functions work internally, in sync with the Windows clock. With Python clock functions; you can set the hour, minute, second, month, week, day and date. See Python clock function prefix descriptions below.\par
\par

\pard\widctlpar\sl276\slmult1\qj '%I'\tab 12-hour prefix\par
'%H'\tab 24-hour prefix\par
'%M'\tab Minutes prefix\par
'%S'\tab Seconds prefix\par
'%p'\tab AM/PM prefix\par
'%A'\tab Day of week prefix\par
'%B'\tab Month prefix\par
'%d'\tab Date prefix\par
'%Y'\tab Year prefix\par
'%U'\tab Weeks per year prefix\par
'%j'\tab Days per year prefix\par

\pard\widctlpar\qj\f0 '''\par
\par

\pard\widctlpar\cf3 # Let's create a simple Python clock by invoking the Python clock function prefixes.\par
# First, however, we also need to import two modules; 'time' and 'datetime'. Type and\par
# execute/run the program example below and see what happens.\par
\par

\pard\widctlpar\qj\cf1 import time\par
import datetime\par
\par
print(datetime.datetime.now().strftime('%I:%M:%S:%p'))\par
print(datetime.datetime.now().strftime('%H:%M:%S'))\par
print(datetime.datetime.now().strftime('%A %B %d,%Y'))\par
print(datetime.datetime.now().strftime('Week %U'))\par
print(datetime.datetime.now().strftime('Day %j'))\par
\par

\pard\widctlpar\cf3 # Remember you can reduce balky code via, using string variables. Let's use 'timer' as\par
# the variable and use 'datetime.datetime.now()' as the value. Type and execute/run\par
# the program example below and see what happens.\par

\pard\widctlpar\qj\par
\cf1 import time\par
import datetime\par
\par
timer=datetime.datetime.now()\par
\par
print(timer.strftime('%I:%M:%S:%p'))\par
print(timer.strftime('%H:%M:%S'))\par
print(timer.strftime('%A %B %d,%Y'))\par
print(timer.strftime('Week %U'))\par
print(timer.strftime('Day %j'))\par
\par

\pard\widctlpar\cf3 # Now, let's create a tuple variable called 'show_time' so we can reduce even more\par
# balky code, and also gain greater manipulative programming skills at the same time.\par
# Type and execute/run the program example below and see what happens.\par
\cf1\par
import time\par
import datetime\par
\par
show_time=(\par
    '%I:%M:%S:%p',\par
    '%H:%M:%S',\par
    '%A %B %d,%Y',\par
    'Week %U',\par
    'Day %j'\par
    )\par
\par
timer=datetime.datetime.now()\par
\par
print(timer.strftime(show_time[0]))    \par
print(timer.strftime(show_time[1]))    \par
print(timer.strftime(show_time[2]))    \par
print(timer.strftime(show_time[3]))\par
print(timer.strftime(show_time[4]))\par
 \par
\cf3 # Now change and rearrange the tuple number values [0] through [4] in the program\par
# example above and re-execute/run the program and see what happens.\par
\par
# Now, let's make our Python clock come to life. Let's also keep the code less balky\par
# and much more program manipulative at the same time. To make the Python clock\par
# come to life, we are simply going to use a while-loop to constantly refresh the screen\par
# output. A 'time.sleep()' function will also be implemented to create a one-second\par
# sleep delay in the screen output. Let's also implement the 'os.system()' function to\par
# clear the screen output right after every one-second 'time.sleep' delay. Type and\par
# execute/run the program example below and see what happens.\par
\par

\pard\widctlpar\qj\cf1 import os\par
import time\par
import datetime\par
\par
show_time=(\par
    '%I:%M:%S:%p',\par
    '%H:%M:%S',\par
    '%A %B %d,%Y',\par
    'Week %U',\par
    'Day %j'\par
    )\par
\par
while True:\par
    timer=datetime.datetime.now()\par
    print(timer.strftime(show_time[0]))\par
    print(timer.strftime(show_time[1]))\par
    print(timer.strftime(show_time[2]))\par
    print(timer.strftime(show_time[3]))\par
    print(timer.strftime(show_time[4]))\par
    \par
    time.sleep(1)\par
    os.system('cls')\par
\par

\pard\sl240\slmult1\qc\cf0\fs28 Python Wave Sounds:\par

\pard\sl240\slmult1\qj\fs24 '''\par

\pard\widctlpar\qj\f4 Python wave sounds are easy to create, because they are simply wave sounds you already have on your Windows computer system. Note: Python limits to wave sound format only. Wave sound files must be stored in the same folder/directory where your Python program files are also stored.\par

\pard\widctlpar\sl360\slmult1\qj '''\par

\pard\sl240\slmult1\cf3\f0 # Type and execute/run the wave sound program example below. Use the name of the\par
# wave sound file only, such as 'SPEECH OFF' for example.\par
\par
\cf1 import winsound\par
\par
winsound.PlaySound('SPEECH OFF',winsound.SND_ASYNC)\par
\par
\cf3 # The wave sound program below looks similar to the one above. The only difference\par
# is, the wave sound program below waits to play the wave sound before continuing\par
# on with the rest of the Python program. Type and execute/run the program example\par
# below and see what happends.\par
\par
\cf1 import winsound\par
\par
winsound.PlaySound('SPEECH OFF',winsound.SND_ALIAS)\par

\pard\widctlpar\qj\par

\pard\widctlpar\cf3 # Here are some projects that require quite a bit of patience and dedication. The\par
# program examples below demand that you should have a basic understanding of\par
# strings, tuples, tuple indexes, for-loops and while-loops alike. Save these projects as\par
# Python files on your computer. You can give the files any name you wish, but they\par
# must be unigue, different names assigned to them.\par
\par
# Take your "time" and create the 'TIMERNATOR' clock program. Type and\par
# execute/run the program example below and see what happens. Note: you must\par
# execute/run the program from the OS output screen, via double-clicking the Python\par
# program file itself.\par
\par
# Save the Python file as 'Timernator'\cf1\par

\pard\widctlpar\qj\par
import os\par
import time\par
import datetime\par
import winsound\par
\par
os.system(f'title TIMERNATOR')\par
\par
text_colour=(\par
    '\\x1b[31m',\par
    '\\x1b[32m',\par
    '\\x1b[33m'\par
    )\par
\par
special_fx=(\par
    f'\{text_colour[0]\}TIMERNATOR',\par
    \par
    'SPEECH OFF',\par
    \par
    'cls','\\n','\\n\\n',' '\par
    )\par
\par
time_fx=(\par
f'\{text_colour[1]\}12 Hour \{text_colour[0]\}%I\{text_colour[1]\}:\\\par
\{text_colour[0]\}%M\{text_colour[1]\}:\{text_colour[0]\}%S \{text_colour[1]\}%p',\par
\par
f'\{text_colour[1]\}24 Hour \{text_colour[0]\}%H\{text_colour[1]\}:\\\par
\{text_colour[0]\}%M\{text_colour[1]\}:\{text_colour[0]\}%S',\par
\par
f'\{text_colour[2]\}%A %B \{text_colour[0]\}%d\{text_colour[1]\}:\\\par
\{text_colour[0]\}%Y',f'\{text_colour[2]\}Week\{text_colour[1]\}:\\\par
\{text_colour[0]\}%U \{text_colour[2]\}Day\{text_colour[1]\}:\\\par
\{text_colour[0]\}%j'\par
    )\par
\par
text_fx=(\par
    f'\{text_colour[2]\}You\\'re TIMERNATED!',\par
    \par
    f'\{text_colour[2]\}Look at me if you want the time.',\par
    \par
    f'\{text_colour[2]\}I need your hours, your minutes and your seconds.',\par
    \par
    f'\{text_colour[2]\}I swear I will tell the time.',\par
    \par
    f'\{text_colour[2]\}I cannot self timernate.'\par
    )\par
\par
redundant_code1='''\par
print(\par
    special_fx[3],\par
    special_fx[5]*1,\par
    special_fx[0],\par
    special_fx[4],\par
    special_fx[5]*1,\par
    text_fx[x]\par
    )\par
'''\par
redundant_code2='''\par
print(\par
    special_fx[3],\par
    special_fx[5]*1,\par
    timer.strftime(time_fx[y])\par
    )\par
'''\par
while True:\par
    \par
    for x in range(4):\par
        os.system(special_fx[2])\par
        winsound.PlaySound(\par
            special_fx[1],winsound.SND_ASYNC\par
            )\par
        \par
        exec(redundant_code1)\par
        \par
        for y in range(4):\par
            timer=datetime.datetime.now()\par
            exec(redundant_code2)\par
            \par
        time.sleep(1)\par
        os.system(special_fx[2])\par
        winsound.PlaySound(\par
            special_fx[1],winsound.SND_ASYNC\par
            )\par
        \par
        exec(redundant_code1)\par
        \par
        for y in range(4):\par
            timer=datetime.datetime.now()\par
            exec(redundant_code2)\par
            \par
        time.sleep(1)\par
        os.system(special_fx[2])\par
        winsound.PlaySound(\par
            special_fx[1],winsound.SND_ASYNC\par
            )\par
        \par
        exec(redundant_code1)\par
        \par
        for y in range(4):\par
            timer=datetime.datetime.now()\par
            exec(redundant_code2)\par
            \par
        time.sleep(1)\par
\par

\pard\widctlpar\cf3 # Take your "time" and create the 'FANTASTIQUE PLASTIQUE Easy Mix Converter'\par
# program. Type and execute/run the program example below and see what happens.\par
# Note: you must execute/run the program from the OS output screen, via double-\par
# clicking the Python program file itself.\par
\par
# Save the Python file as 'Fantastic Plastique'\cf1\par
\par
import os\par
import time\par
import math\par
import winsound\par
\par
os.system(f'title FANTASTIQUE PLASTIQUE Easy Mix Converter')\par
\par
text_colour=(\par
    '\\x1b[31m',\par
    '\\x1b[32m',\par
    '\\x1b[33m',\par
    '\\x1b[34m',\par
    '\\x1b[37m'\par
    )\par
\par
win_sound=(\par
    'Windows Notify System Generic',\par
    'Windows Background',\par
    'Windows Notify Email','BUZZ'\par
    )\par
\par
text_words=(\par
    f'\\n\{text_colour[2]\}FANTASTIQUE \{text_colour[1]\}PLASTIQUE \{text_colour[2]\}Easy \\\par
\{text_colour[1]\}Mix \{text_colour[2]\}Converter',\par
    \par
    f'\\n\{text_colour[4]\}Liquid Acrylic Mix: 8.oz = (1) Cup',\par
    \par
    f'\\nLiquid Acrylic Mix: 4.oz = One Half Cup',\par
    \par
    f'\\nGlow Powder Pigment: 28.349523 Grams = (1) Ounce',\par
    \par
    f'\\nGlow Powder Pigment: 14.1747615 Grams = One Half Ounce',\par
    \par
    f'\\nLiquid Acrylic Mix and Glow Powder Pigment Ratios: \\\par
(4 = Parts LAM) to (1 = Part GPP)',\par
    \par
    f'\\n1.0 Ounce = 28.349523 Grams or 28.35 Grams.',\par
    )\par
\par
text_info=(\par
    f'\\n\{text_colour[2]\}Please Enter Ounce Amount:\{text_colour[1]\}',\par
    \par
    f'\\n\{text_colour[4]\}Press (Enter) to convert again or press (Q) to quit.',\par
    \par
    f'\\n\{text_colour[1]\}Thanks for measuring with FANTASTIQUE PLASTIQUE \\\par
Easy Mix Converter.',\par
    \par
    f'\\n\{text_colour[0]\}ERROR! Input numbers only please.'\par
    )\par
\par
text_works=('cls','q')\par
     \par
ounce0=float()\par
grams0=float(28.349523)\par
ounce1=float()\par
grams1=round(28.349523,3)\par
\par
while True:\par
    os.system(text_works[0])\par
    winsound.PlaySound(win_sound[0],winsound.SND_ASYNC)\par
    \par
    for i in text_words:\par
        print(i)\par
        \par
    try:\par
        ounce0=float(input(text_info[0]).strip())\par
        os.system(text_works[0])\par
        for i in text_words:\par
            print(i)\par
            \par
        winsound.PlaySound(win_sound[1],winsound.SND_ASYNC)\par
        print(f'\\n\{text_colour[2]\}\{ounce0\} Ounce = \{text_colour[1]\}\{ounce0*grams0\} \\\par
\{text_colour[2]\}Grams or \{text_colour[1]\}\{ounce0*grams1\} \{text_colour[2]\}Grams.')\par
        button=input(text_info[1]).strip()\par
        \par
        if button==(''):\par
            continue\par
        \par
        elif button==(text_works[1]):\par
            os.system(text_works[0])\par
            winsound.PlaySound(win_sound[2],winsound.SND_ASYNC)\par
            print(text_info[2])\par
            time.sleep(3)\par
            break\par
        \par
    except ValueError:\par
        os.system(text_works[0])\par
        \par
        for i in text_words:\par
            print(i)\par
            \par
        winsound.PlaySound(win_sound[3],winsound.SND_ASYNC)\par
        \par
        print(text_info[3])\par
        \par
        time.sleep(2)\par
\par
\cf3 # Take your "time" and create the 'ONTARIO LOTTO 6/49 RANDOM NUMBER\par
# GENERATOR' program. Type and execute/run the program example below and see\par
# what happens. Note: you must execute/run the program from the OS output screen,\par
# via double-clicking the Python program file itself.\par
\par
# Save the Python file as 'Ontario Lotto'\cf1\par
\par
import os\par
import time\par
import math\par
import random\par
import winsound\par
\par
os.system(f'title ONTARIO LOTTO 6/49 RANDOM NUMBER GENERATOR')\par
\par
text_colour=(\par
    '\\x1b[31m',\par
    '\\x1b[32m',\par
    '\\x1b[33m',\par
    '\\x1b[34m',\par
    '\\x1b[35m',\par
    '\\x1b[36m',\par
    '\\x1b[37m'\par
    )\par
\par
text_words=(\par
    f'\\n\{text_colour[1]\}Welcome to ONTARIO LOTTO 6/49 RANDOM NUMBER \\\par
GENERATOR. Good Luck!\\n\\nPress (Enter) to activate the ONTARIO LOTTO \\\par
6/49 RANDOM NUMBER GENERATOR:',\par
    \par
    f'\\n\{text_colour[1]\}ONTARIO LOTTO 6/49 RANDOM NUMBER GENERATOR \\\par
is activated.\\n\\nONTARIO LOTTO 6/49 RANDOM NUMBER GENERATOR SEQUENCE:',\par
    \par
    f'\\n\{text_colour[2]\}Press (N) then press (Enter) to randomly pick a different set of \\\par
Ontario Lotto 6/49 numbers.\\n\\nPress (Q) then press (Enter) to quit:\{text_colour[1]\}',\par
    \par
    f'\\n\{text_colour[1]\}Thanks for playing ONTARIO LOTTO 6/49 RANDOM NUMBER \\\par
GENERATOR. Good Luck!'        \par
    )\par
    \par
random_num=(\par
    random.randint(1,9),\par
    random.randint(10,17),\par
    random.randint(18,25),\par
    random.randint(26,33),\par
    random.randint(34,41),\par
    random.randint(42,49)\par
    )\par
\par
win_sound=('TYPE','Windows Notify Messaging')\par
\par
text_fx=('cls','n','q')\par
\par
y=0\par
\par
while y<=len(text_words[0]):\par
    winsound.PlaySound(win_sound[0],winsound.SND_ASYNC)\par
    print(text_words[0][:y])\par
    time.sleep(.06)\par
    os.system(text_fx[0])\par
    \par
    y+=1\par
\par
button=input(text_words[0]).strip()\par
\par
y=0\par
\par
while y<=len(text_words[1]):\par
    winsound.PlaySound(win_sound[0],winsound.SND_ASYNC)\par
    print(text_words[1][:y])\par
    time.sleep(.06)\par
    os.system(text_fx[0])\par
    \par
    y+=1\par
\par
while True:\par
    winsound.PlaySound(win_sound[1],winsound.SND_ASYNC)\par
    print(\par
        f'\{text_words[1]\}\{text_colour[0]\}(\{random_num[0]\}) (\{random_num[1]\}) \\\par
(\{random_num[2]\}) (\{random_num[3]\}) (\{random_num[4]\}) (\{random_num[5]\})'\par
        )\par
\par
    button=input(text_words[2]).strip()\par
\par
    os.system(text_fx[0])\par
\par
    if button==(text_fx[1]):\par
        random_num=(\par
        random.randint(1,9),\par
        random.randint(10,17),\par
        random.randint(18,25),\par
        random.randint(26,33),\par
        random.randint(34,41),\par
        random.randint(42,49)\par
        )\par
        \par
    elif button==(text_fx[2]):\par
        break\par
\par
y=0\par
\par
while y<=len(text_words[3]):\par
    winsound.PlaySound(win_sound[0],winsound.SND_ASYNC)\par
    print(text_words[3][:y])\par
    time.sleep(.06)\par
    os.system(text_fx[0])\par
    \par
    y+=1\par
\par
print(text_words[3])\par
\par
time.sleep(3)\par
\par

\pard\sl360\slmult1\qc\cf0\fs28 ASCII CODES:\par

\pard\sl240\slmult1\qc\fs26 American Standard Code for Information Interchange\fs28\par

\pard\widctlpar\qj\f4\fs24 '''\par
All modern day computers that support text characters such as keyboard interfaces use ASCII codes. Since computers can only see numbers, not actual characters, ASCII codes make it possible to use numbers to represent one, single character. Each character is seven bits long, which makes it equal to one eight-bit byte; the eighth, leftmost bit is the 'sign-bit'. If the number is positive, the 'sign-bit' will be a 'zero', and if the number is a negative number, the 'sign-bit will be a 'one'. Take a look at the illustration below to gain a better understanding.\par

\pard\widctlpar\par

\pard\widctlpar\sl360\slmult1 One eight-bit binary byte = 11111111 = 255 = 128 or -127\par
One byte value 00000100 = '4'\par
One byte value 1000100 = '-4'\par

\pard\widctlpar The 'sign-bit' can only be one of two states; either negative or positive.\par
\par

\pard\widctlpar\qj However, ASCII code values are read as human decimal numbers. For example, \f0 the ASCII code value for the capital later 'A' = '65'. The ASCII code value for the lowercase 'a' = '97'. The ASCII code value for the capital letter 'B' = '66', and the ASCII code value for the lowercase 'b' = '98'. Just remember every letter and every number on a computer keyboard has an ASCII code value to it. Below are some basic examples how to use ASCII code characters in your programs.\par

\pard\widctlpar\sl360\slmult1\qj '''\par

\pard\widctlpar\cf3 # To get the ASCII code value of any letter or number key, simply type and execute/run\par
# the program examples below and see what happens. Try using different letters and\par
# numbers to see their ASCII code values.\par
\par
\cf1 print(chr(65))\par
print(ord('A'))\par
\par
print(chr(97))\par
print(ord('a'))\par
\par
print(chr(66))\par
print(ord('B'))\par
\par
print(chr(98))\par
print(ord('b'))\par
\par
print('ASCII code',ord('A'),'is the uppercase letter',chr(65))\par
print('ASCII code',ord('a'),'is the lowercase letter',chr(97))\par
\par
print('ASCII code',ord('B'),'is the uppercase letter',chr(66))\par
print('ASCII code',ord('b'),'is the lowercase letter',chr(98))\par
\par
\cf3 # These simple dictionary program examples below illustrates the entire ASCII code\par
# alphabet character sets: uppercase and lowercase character sets. Type and\par
# execute/run the program examples below and see what happens.\par
\par
\cf1 ascii_lowercase_chars=(\par
\par
    \{'a':97,'b':98,'c':99,'d':100,\par
     \par
     'e':101,'f':102,'g':103,'h':104,\par
     \par
     'i':105,'j':106,'k':107,'l':108,\par
     \par
     'm':109,'n':110,'o':111,'p':112,\par
     \par
     'q':113,'r':114,'s':115,'t':116,\par
     \par
     'u':117,'v':118,'w':119,'x':120,\par
\par
     'y':121,'z':122\}\par
    )\par
\par
ascii_uppercase_chars=(\par
    \par
    \{'A':65,'B':66,'C':67,'D':68,\par
     \par
     'E':69,'F':70,'G':71,'H':72,\par
     \par
     'I':73,'J':74,'K':75,'L':76,\par
     \par
     'M':77,'N':78,'O':79,'P':80,\par
     \par
     'Q':81,'R':82,'S':83,'T':84,\par
     \par
     'U':85,'V':86,'W':87,'X':88,\par
\par
     'Y':89,'Z':90\}\par
    )\par
\par
print("Uppercase 'A' = ASCII code value",\par
      (ascii_uppercase_chars['A']))\par
\par
print("Lowercase 'a' = ASCII code value",\par
      (ascii_lowercase_chars['a']))\par
\par
print("Uppercase 'B' = ASCII code value",\par
      (ascii_uppercase_chars['B']))\par
\par
print("Lowercase 'b' = ASCII code value",\par
      (ascii_lowercase_chars['b']))\par
\par
\cf3 # These simple dictionary program examples below illustrates the ASCII code number\par
# characters and the ASCII code math operators. Type and execute/run the program\par
# examples below and see what happens.\par
\par
\cf1 ascii_number_chars=(\par
    \{'0':48,'1':49,'2':50,'3':51,'4':52,\par
     \par
     '5':53,'6':54,'7':55,'8':56,'9':57\}\par
    )\par
\par
ascii_math_operator_chars=(    \par
    \{'+':43,'-':45,'*':42,'/':47\}\par
    )\par
\par
print("Number character '0' = ASCII code value",(ascii_number_chars['0']))\par
\par
print("Number character '1' = ASCII code value",(ascii_number_chars['1']))\par
\par
print("Number character '2' = ASCII code value",(ascii_number_chars['2']))\par
\par
print("Number character '3' = ASCII code value",(ascii_number_chars['3']))\par
\par
print("Math operator character '+' = ASCII code value",\par
      (ascii_math_operator_chars['+']))\par
\par
print("Math operator character '-' = ASCII code value",\par
      (ascii_math_operator_chars['-']))\par
\par
print("Math operator character '*' = ASCII code value",\par
      (ascii_math_operator_chars['*']))\par
\par
print("Math operator character '/' = ASCII code value",\par
      (ascii_math_operator_chars['/']))\par
\par
\cf3 # Take your "time" and create the 'ASCII CODE TRANSLATOR' program. Type and\par
# execute/run the program example below and see what happens. Note: you must\par
# execute/run the program from the OS output screen, via double-clicking the Python\par
# program file itself.\par
\par
# Save the Python file as 'Ascii Code Translator'\par
\cf1\par
import os\par
import time\par
import math\par
\par
os.system('title ASCII CODE TRANSLATOR')\par
\par
text_features=(\par
    'cls',\par
    '\\x1b[31m',\par
    '\\x1b[32m',\par
    '\\x1b[33m',\par
    '\\x1b[34m',\par
    '\\x1b[37m'\par
    )\par
\par
text_words=(\par
    f'\\n\{text_features[3]\}ASCII CODE NUMERIC VALUE TRANSLATOR\\n',\par
    \par
    f'\\n\{text_features[3]\}ASCII CODE CHARACTER VALUE TRANSLATOR\\n',\par
    \par
    f'\\n\{text_features[3]\}ASCII CODE TRANSLATOR',\par
    \par
    f'\\n\{text_features[2]\}Thanks for choosing ASCII CODE TRANSLATOR'\par
    )\par
\par
word_info=(\par
    f'\{text_features[5]\}Please type a number, then press (Enter) to \\\par
confirm:\{text_features[2]\}',\par
   \par
    f'\{text_features[5]\}Please type a letter key or a number key, then press (Enter) to \\\par
confirm:\{text_features[2]\}',\par
    \par
    f'\\n\{text_features[3]\}Please choose which ASCII code translator you would like to \\\par
use:\\n\\n\{text_features[5]\}Press (1) for ASCII code number values.\\nPress (2) for \\\par
ASCII code character values.\\nPress (Q) to quit.\{text_features[2]\} ',\par
    \par
    f'\\n\\n\{text_features[3]\}Do you wish to continue? Press (Enter) or press (Q) to \\\par
quit:\{text_features[2]\}',\par
    \par
    f'\\n\{text_features[1]\}This is a Value Error!',\par
    \par
    f'\\n\{text_features[1]\}This is a Type Error!'\par
    )\par
\par
button=('1','2','q')\par
\par
def subroutine1():\par
    while True:\par
        os.system(text_features[0])\par
        print(text_words[0])\par
        \par
        try:\par
            ascii_code=int(input(word_info[0]).strip())\par
            ascii_code=input(f'\\n\{text_features[2]\}\{chr(ascii_code)\}\{text_features[5]\} = \\\par
ASCII code: " \{text_features[2]\}\{ascii_code\}\{text_features[5]\} " \{word_info[3]\}').strip()\par
            \par
            if ascii_code==button[2]:\par
                break\par
            \par
        except ValueError:\par
            print(word_info[4])\par
            time.sleep(1)\par
            \par
def subroutine2():\par
    while True:\par
        os.system(text_features[0])\par
        print(text_words[1])\par
        \par
        try:\par
            ascii_code=input(word_info[1]).strip()\par
            ascii_code=input(f'\\n\{text_features[2]\}\{ascii_code\}\{text_features[5]\} = \\\par
ASCII code: " \{text_features[2]\}\{ord(ascii_code)\}\{text_features[5]\} " \\\par
\{word_info[3]\}').strip()\par
            \par
            if ascii_code==button[2]:\par
                break\par
        except TypeError:\par
            print(word_info[5])\par
            time.sleep(1)\par
            \par
while True:\par
    os.system(text_features[0])\par
    print(text_words[2])\par
    butt=input(word_info[2]).strip()\par
    \par
    if butt==button[0]:\par
        subroutine1()\par
        \par
    elif butt==button[1]:\par
       subroutine2()\par
       \par
    else:\par
        if butt==button[2]:                   \par
            os.system(text_features[0])\par
            print(text_words[3])\par
            time.sleep(3)\par
            break\par
\par
\cf3 # Generate computer numbers in binary base 2, hexadecimal base 16 and octal base\par
# 8. Type in ASCII codes and see what they look like. For example: 'print(bin(65))' is\par
# the ASCII code value for the capital letter 'A' in bibary base 2 as: '0b1000001'. Note:\par
# the '0b' is Python's prefix, which simply tells Python to work with binary base 2\par
# numbers.\cf1\par
\par
\cf3 # Convert any number into a binary base 2 number.\par
\par
\cf1 print(bin(255))\par
\par
\cf3 # Convert any number into a hexadecimal base 16 number.\par
\par
\cf1 print(hex(255))\par
\par
\cf3 # Convert any number into an octal base 8 number.\par
\par
\cf1 print(oct(255))\par
\par
\cf3 # Type and execute/run each of these program examples below and see what\par
# happens.\cf1\par
\par
comp_nums=int(input('Please type any number to see its binary base 2 number \\\par
value: ').strip())\par
\par
print(f'The number \{comp_nums\} = the binary base 2 number value: \\\par
\{bin(comp_nums)\}.')\par
\par
comp_nums=int(input('Please type any number to see its hexadecimal base 16 \\\par
number value: ').strip())\par
\par
print(f'The number \{comp_nums\} = the hexadecimal base 16 number value: \\\par
\{hex(comp_nums)\}.')\par
            \par
comp_nums=int(input('Please type any number to see its octal base 8 \\\par
number value: ').strip())\par
\par
print(f'The number \{comp_nums\} = the octal base 8 number value: \\\par
\{oct(comp_nums)\}.')\par
\par
\cf3 # The program example below uses ASCII code values for the math operator\par
# characters such as (+), (-), (*), (/) as well as an ASCII code value '113' for the\par
# lowercase letter 'q'. The 'Enter' key has no, such ASCII code value at all, but the\par
# 'ord('\\r') or 'ord('\\n') is like an ASCII code value for the 'Enter' key instead. In the\par
# program example below, the 'ord('\\r') is used, which simply means 'return'; the '\\n'\par
# means 'new line'. Both work fine for getting an ASCII code value for the 'Enter' key.\par
\cf1\par
\cf3 # Take your "time" and create the 'Magic Calculator' program. Type and execute/run\par
# the program example below and see what happens. Note: you must execute/run the\par
# program from the OS output screen, via double-clicking the Python program file\par
# itself.\par
\par
# Save the Python file as 'Magic Calculator'\cf1\par
\par
import os\par
import time\par
import math\par
\par
os.system('title Magic Calculator')\par
\par
mc='\\nMagic Calculator\\n\\n'\par
\par
text_info=(\par
    f'\\nWelcome to Magic Calculator. Press (Enter) to begin.',\par
    \par
    f'\\nMagic Calculator\\n\\nEnter First Number: ',\par
    \par
    f'\\nEnter (+) (-) (*) (/) Operator: ',\par
    \par
    f'\\nEnter Second Number: ',\par
    \par
    f'\\nMagic Calculator\\n\\nInvalid operator!',\par
    \par
    f'\\nMagic Calculator\\n\\nERROR!',\par
\par
    f'\\nMagic Calculator\\n\\nERROR! Cannot divide by zerro.',\par
    \par
    f'\\nDo you wish to continue? Press \\\par
(Enter) or press (Q) to quit: ',\par
    \par
    f'\\nThanks for choosing Magic Calculator.'\par
    )\par
\par
ascii_code=(\par
    f'\\nchar(43) is the ASCII code for the  plus " + " sign.',\par
    \par
    f'\\nchar(45) is the ASCII code for the negative " - " sign.',\par
    \par
    f'\\nchar(42) is the ASCII code for the multiplication " * " sign.',\par
    \par
    f'\\nchar(47) is the ASCII code for the division " / " sign.'\par
    )\par
\par
operator=(chr(43),chr(45),chr(42),chr(47))\par
input(text_info[0]).lower().strip()\par
\par
while True:\par
    while True:\par
        os.system('cls')\par
        \par
        try:\par
            num1=int(input(text_info[1]).lower().strip())\par
            oper=input(text_info[2]).lower().strip()\par
            num2=int(input(text_info[3]).lower().strip())\par
            \par
            if oper==operator[0]:\par
                os.system('cls')\par
                print(f'\{mc\}\{num1\} + \{num2\} = \{num1+num2\}')\par
                print(ascii_code[0])\par
                break\par
            \par
            elif oper==operator[1]:\par
                os.system('cls')\par
                print(f'\{mc\}\{num1\} - \{num2\} = \{num1-num2\}')\par
                print(ascii_code[1])\par
                break\par
            \par
            elif oper==operator[2]:\par
                os.system('cls')\par
                print(f'\{mc\}\{num1\} * \{num2\} = \{num1*num2\}')\par
                print(ascii_code[2])\par
                break\par
            \par
            elif oper==operator[3]:\par
                os.system('cls')\par
                print(f'\{mc\}\{num1\} / \{num2\} = \{num1/num2\}')\par
                print(ascii_code[3])\par
                break\par
            \par
            else:\par
                os.system('cls')\par
                print(text_info[4])\par
                time.sleep(1)\par
                \par
        except  ZeroDivisionError:\par
            os.system('cls')\par
            print(text_info[6])\par
            time.sleep(1)\par
                \par
        except ValueError:\par
            os.system('cls')\par
            print(text_info[5])\par
            time.sleep(1)\par
            \par
    repeat_calculator=input(text_info[7]).lower().strip()\par
    \par
    if repeat_calculator==ord('\\r'):\par
        continue\par
    \par
    elif repeat_calculator==chr(113):\par
        os.system('cls')\par
        print(text_info[8])\par
        time.sleep(3)\par
        break\par
\par
\cf3 # Find out how many hours there are in one year.\par
\par
\cf1 print(f'\\n\{365*24:,\} hours in one year.')\par
\cf3\par
# Find out how many minutes there are in one year.\par
\par
\cf1 print(f'\\n\{365*24*60:,\} minutes in one year.')\par
\cf3\par
# Find out how many seconds there are in one year.\par
\par
\cf1 print(f'\\n\{365*24*60*60:,\} seconds in one year.')\par
\cf3\par
# Find out how many months there are in ten years.\par
\par
\cf1 print(f'\\n\{12*10:,\} months in ten years.')\par
\cf3\par
# Find out how many weeks there are in ten years.\par
\par
\cf1 print(f'\\n\{52*10:,\} weeks in ten years.')\par
\par
\cf3 # Here's a fun, simple program example, which tells you how many seconds you have\par
# been on Earth for. Type and execute/run the program example below and see what\par
# happens when you type your age, then press the 'Enter' key. Note: this program\par
# example also uses the 'finally' statement to illustrate the use of the how the 'finally'\par
# command works. The 'finally' command will always execute, no matter the outcome.\par
# Also note that the 'finally' command only works with the 'try' and 'except' command\par
# blocks.\par
\par
\cf1 months=12\par
weeks=52\par
days=365\par
\par
hours_per_day=24\par
minuts_per_hour=60\par
seconds_per_minute=60\par
\par
string_tuple=(\par
    months,weeks,days,\par
    hours_per_day,\par
    minuts_per_hour,\par
    seconds_per_minute\par
    )\par
\par
while True:\par
    \par
    try:        \par
        age=int(input('How old are you? ').strip())\par
\par
        print(f'\\nYou have been on Earth for \{age\} years.')\par
        \par
        print(f'\\nYou have been on Earth for \{age*string_tuple[0]:,\} months.')\par
        \par
        print(f'\\nYou have been on Earth for \{age*string_tuple[1]:,\} weeks.')\par
        \par
        print(f'\\nYou have been on Earth for \{age*string_tuple[2]:,\} days.')\par
\par
        print(f'\\nYou have been on Earth for \{age*string_tuple[2]*string_tuple[3]:,\} hours.')\par
\par
        print(f'\\nYou have been on Earth for \\\par
\{age*string_tuple[2]*string_tuple[3]*string_tuple[4]:,\} minutes.')\par
\par
        print(f'\\nYou have been on Earth for \\\par
\{age*days*string_tuple[3]*string_tuple[4]*string_tuple[5]:,\} seconds.')\par
        \par
        break\par
    \par
    except ValueError:\par
        print('\\nSorry! Numbers only please.\\n')\par
        \par
    finally:\par
        print('Finally will always execute no matter the outcome.')\par
\par
\cf3 # See what happens when you type and execute/run this guessing game program\par
# example below. Note: you must execute/run the program from the OS output screen,\par
# via double-clicking the Python program file itself.\par
\par
# Save the Python file as 'Know Your Stuff'\par
\par
\cf1 import os\par
\par
tc=(\par
    '\\x1b[31m',\par
    '\\x1b[32m',\par
    '\\x1b[33m',\par
    '\\x1b[34m',\par
    '\\x1b[35m',\par
    '\\x1b[36m',\par
    '\\x1b[37m',\par
    'cls'\par
    )\par
\par
question_prompts1=(\par
    f'\{tc[2]\}How many sides does a Triangle have?\\n\\n\{tc[1]\}(a) \{tc[2]\}four sides\\n\\\par
\{tc[1]\}(b) \{tc[2]\}three sides\\n\{tc[1]\}(c) \{tc[2]\}two sides',\par
    \par
    f'\{tc[2]\}How many sides does a Square have?\\n\\n\{tc[1]\}(a) \{tc[2]\}Two sides\\n\\\par
\{tc[1]\}(b) \{tc[2]\}Three sides\\n\{tc[1]\}(c) \{tc[2]\}Four sides',\par
    \par
    f'\{tc[2]\}How many sides does a Pentagon have?\\n\\n\{tc[1]\}(a) \{tc[2]\}four sides\\n\\\par
\{tc[1]\}(b) \{tc[2]\}five sides\\n\{tc[1]\}(c) \{tc[2]\}Three sides',\par
    \par
    f'\{tc[2]\}How many sides does a Hexagon have?\\n\\n\{tc[1]\}(a) \{tc[2]\}six sides\\n\\\par
\{tc[1]\}(b) \{tc[2]\}five sides\\n\{tc[1]\}(c) \{tc[2]\}two sides',\par
    \par
    f'\{tc[2]\}How many sides does a Octagon have?\\n\\n\{tc[1]\}(a) \{tc[2]\}four sides\\n\\\par
\{tc[1]\}(b) \{tc[2]\}six sides\\n\{tc[1]\}(c) \{tc[2]\}eight sides',\par
    \par
    f'\{tc[2]\}How many sides does a Dodecagon have?\\n\\n\{tc[1]\}(a) \{tc[2]\}eight \\\par
sides\\n\{tc[1]\}(b) \{tc[2]\}three sides\\n\{tc[1]\}(c) \{tc[2]\}twelve sides',\par
    \par
    f'\{tc[2]\}How many sides does a Hexadecagon have?\\n\\n\{tc[1]\}(a) \{tc[2]\}sixteen \\\par
sides\\n\{tc[1]\}(b) \{tc[2]\}eight sides\\n\{tc[1]\}(c) \{tc[2]\}six sides'\par
    )\par
\par
prompt=('b','c','b','a','c','c','a')\par
\par
score=0\par
loop=0\par
\par
while loop<=6:\par
    \par
    os.system(tc[7])\par
    button=input((tc[1])+'\\nKnow Your Stuff!\\n\\n'+(tc[2])+'Know Your Polygons\\n\\n'+\\\par
    question_prompts1[loop]+'\\n\\n'+(tc[0])+'READY:'+(tc[1])).strip()\par
    \par
    if button==(prompt[loop]):\par
        score+=1\par
        \par
    loop+=1\par
    \par
    os.system(tc[7])\par
    \par
print(f'\\n\{tc[2]\}Know Your Polygons\\n\\n\{tc[2]\}You got \\\par
\{score\}/\{len(question_prompts1)\} questions correct.\\nCongratulations! Your total \\\par
Prize Winnings: \{tc[1]\}$\{score*100*score:,\}.00 \{tc[2]\}Dollars.\\n\\n\{tc[0]\}READY:')\par
\par
input('\\nEND OF PROGRAM! Press Enter to quit.')\par
\par

\pard\sl360\slmult1\qc\cf0\fs28 TKINTER:\par

\pard\widctlpar\qj\f4\fs24 '''\par
Welcome to tkinter, the canvas part of Python. With tkinter you can draw lines and shapes such as ovals, arcs and rectangles. You can also create some wild digital string-art designs with for-loops. With tkinter you can also create buttons and input boxes. We will get into all this and more about tkinter, the fun part of Python programming.\par

\pard\widctlpar\sl360\slmult1\qj '''\par

\pard\widctlpar\cf3\f0 # Let's create a simple tkinter window. Type and execute/run this tkinter program\par
# example below and see what happens.\par

\pard\widctlpar\sl360\slmult1\qj\cf0\f4\par

\pard\widctlpar\cf1\f0 from tkinter import*\par
\par
root=Tk()\par

\pard\widctlpar\sl360\slmult1\qj\cf0\f4\par

\pard\widctlpar\cf3\f0 # This simple tkinter program will create an empty window, which is 500 X 500 pixels.\par
# Type and execute/run this tkinter program example below and see what happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500)\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # So far the tinkter window is empty; no canvas colours or anything, but a simple\par
# grayed out, empty tkinter window. Now, let's add colour to our empty tkinter window\par
# to sort of see where we are going with tkinter. Type and execute/run the tkinter\par
# program example below and see what happens when we add the colour black to our\par
# empty tkinter window.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
draw.pack()\par
\par
root.mainloop()\par
\cf3\par
# Now that we have our empty tkinter window, which is now a black, empty tkinter\par
# window. Let's add a simple, blue \f4 diagonal\f0  line drawing inside our black, empty\par
# tkinter window and see what happens when you execute/run the tkinter program\par
# example below.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
draw.create_line(0,0,500,500,fill='blue')\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Note: hexadecimal values can also be used with the tkinter canvas colour as well as\par
# the tkinter graphics colour scheme alike. All hexadecimal values in Python start with\par
# the '#' number sign, then preceding with a six digit hexadecimal number to the right,\par
# for example '#000000' = black, '#ffffff' = white. See below, a basic hexadecimal RGB\par
# colour codes list as follows:\par
\par
# Black = '#000000'\par
# White = '#ffffff'\par
# Red = '#ff0000'\par
# Green = '#00ff00'\par
# Blue = '#000fff'\par
# Yellow = '#fff000'\par
# Pink = '#ff00ff'\par
# Cyan = '#00ffff'\par
\par
# Now let's add another diagonal line in the tkinter window and colour it red and\par
# change the background colour to the hexadecimal colour code, black. type and\par
# execute/run the tkinter program example below and see what happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='#000000')\par
draw.create_line(0,0,500,500,fill='blue')\par
draw.create_line(0,500,500,0,fill='red')\par
draw.pack()\par
\par
root.mainloop()\cf3\par

\pard\widctlpar\qj\cf0\par

\pard\widctlpar\cf3 # Let's now draw a complete yellow square right in the middle of our X-shaped lines\par
# and see what happens when you execute/run the tkinter program example below.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
draw.create_line(0,0,500,500,fill='blue')\par
draw.create_line(0,500,500,0,fill='red')\par
draw.create_line(50,50,450,50,450,50,450,450,50,450,50,50,fill='yellow')\par
draw.pack()\par
\par
root.mainloop()\cf3\par
\cf1\par
\cf3 # Now let's make all the lines in our tkinter drawing thicker. Type and execute/run the\par
# tkinter program example below and see what happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
draw.create_line(0,0,500,500,fill='blue',width=5)\par
draw.create_line(0,500,500,0,fill='red',width=5)\par
draw.create_line(50,50,450,50,450,50,450,450,50,450,50,50,fill='yellow',width=5)\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Let's draw a simple rectangle with tkinter's 'rectangle' command. Type and\par
# execute/run the tkinter program example below and see what happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
draw.create_rectangle(150,100,340,400,outline='cyan',width=5)\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Let's fill the inside of the rectangle with the colour red. Type and execute/run the\par
# tkinter program example below and see what happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
draw.create_rectangle(150,100,340,400,fill='red',outline='cyan',width=5)\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Let's draw a simple oval with tkinter's 'oval' command. Type and execute/run the\par
# tkinter program example below and see what happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
draw.create_oval(150,100,340,400,fill='red',outline='cyan',width=5)\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Let's draw a simple arc with tkinter's 'arc' command. Type and execute/run the\par
# tkinter program below and see what happens.\par
\cf1\par
from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
draw.create_arc(120 ,120,400,400,extent=180,fill='red',outline='cyan',width=5)\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Now let's create a tkinter digital string-art design using a for-loop. Type and\par
# execute/run the tkinter program example below and see what happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
for i in range(0,400,3):\par
    draw.create_line(50+i,50+i,450,50,450,50,450,450,50,450,50+i,50+i,fill='cyan')\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Now let's create a tkinter digital string-art design using tkinter's 'rectangle'\par
# command with a for-loop. Type and execute/run the tkinter program example below\par
# and see what happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
for i in range(0,96,5):\par
    draw.create_rectangle(150+i,100+i,340-i,400-i,outline='cyan')\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Now let's create a tkinter digital string-art design using tkinter's 'oval' command with\par
# a for-loop. Type and execute/run the tkinter program example below and see what\par
# happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
for i in range(0,96,5):\par
    draw.create_oval(150+i,100+i,340-i,400-i,outline='cyan')\par
draw.pack()\par
\par
root.mainloop()\par
\cf3\par
# Now let's create a tkinter digital string-art design using tkinter's 'arc' command with\par
# a for-loop. Type and execute/run the tkinter program example below and see what\par
# happens.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
draw=Canvas(root,height=500,width=500,bg='black')\par
for i in range(0,140,5):\par
    draw.create_arc(120+i ,120+i,400-i,400-i,extent=180,outline='cyan')\par
draw.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Let's import an image from your computer with tkinter. See what happens when you\par
# type and execute/run the tkinter program example below.\par
\par
\cf1 from tkinter import*\par
\par
root=Tk()\par
\par
photo=PhotoImage(file='C:{\cf0{\field{\*\fldinst{HYPERLINK "\\\\\\\\Users\\\\\\\\JCR\\\\\\\\Documents\\\\\\\\Pictures\\\\\\\\image.jpg'"}}{\fldrslt{\\\\Users\\\\JCR\\\\Documents\\\\Pictures\\\\image.jpg'\ul0\cf0}}}}\f0\fs24 )\par
label=Label(root,image=photo)\par
label.pack()\par
\par
root.mainloop()\par
\par
\cf3 # Let's set the canvas width and the canvas height, then import an image from your\par
# computer with tkinter. See what happens when you type and execute/run the tkinter\par
# program example below.\cf6\par
\cf1\par
from tkinter import*\par
\par
root=Tk()\par
\par
canvas=Canvas(width=600,height=600,bg='blue')\par
canvas.pack()\par
\par
photo=PhotoImage(file='C:{\cf0{\field{\*\fldinst{HYPERLINK "\\\\\\\\Users\\\\\\\\JCR\\\\\\\\Documents\\\\\\\\Pictures\\\\\\\\image.jpg'"}}{\fldrslt{\\\\Users\\\\JCR\\\\Documents\\\\Pictures\\\\image.jpg'\ul0\cf0}}}}\f0\fs24 )\par
canvas.create_image(300,300,image=photo)\par
\par
root.mainloop()\par
\par
\cf3 # Let's add anchoring to an image and position it in the center of the canvas. The\par
# anchor emitter has up to nine positional value settings: CENTER, N, S, E, W, NW, NE,\par
# SW, SE. See what happens when you type and execute/run the tkinter program\par
# example below.\cf1\par
\par
from tkinter import*\par
\par
root=Tk()\par
\par
canvas=Canvas(width=600,height=600,bg='blue')\par
canvas.pack()\par
\par
photo=PhotoImage(file='C:{\cf0{\field{\*\fldinst{HYPERLINK "\\\\\\\\Users\\\\\\\\JCR\\\\\\\\Documents\\\\\\\\Pictures\\\\\\\\image.jpg'"}}{\fldrslt{\\\\Users\\\\JCR\\\\Documents\\\\Pictures\\\\image.jpg'\ul0\cf0}}}}\f0\fs24 )\par
canvas.create_image(300,300,image=photo,anchor=CENTER)\par
\par
root.mainloop()\par
\par
\cf3 # Let's create a button with tkinter and see what happens when you type and\par
# execute/run the tkinter program example below.\par
\par
\cf1 from tkinter import*\par
\par
button=Tk()\par
\par
button.geometry('500x500')\par
button_1=Button(button,text='Click Me!')\par
button_1.pack()\par
\par
button.mainloop()\par
\par
\cf3 # Let's create a label for our tkinter button and see what happens when you type and\par
# execute/run the tkinter program example below.\par
\par
\cf1 from tkinter import*\par
\par
button=Tk()\par
\par
button.geometry('500x500')\par
label_1=Label(button,text=' "Python Programmer\\'s Glossary Bible" ')\par
button_1=Button(button,text='Click Me!')\par
label_1.pack()\par
button_1.pack()\par
\par
button.mainloop()\par
\par
\cf3 # Let's make the tkinter button call the label with a 'def' function. Every time the 'Click\par
# Me!' button is clicked, the 'def' function gets called and the label is desplayed again.\par
# See what happens when you type and execute/run the tkinter program example\par
# below.\cf1\par
\par
from tkinter import*\par
\par
button=Tk()\par
\par
def call_the_def_function():\par
    label_1=Label(button,text=' "Python Programmer\\'s Glossary Bible" ')\par
    label_1.pack()\par
\par
button.geometry('500x500')\par
button_1=Button(button,text='Click Me!',command=call_the_def_function)\par
button_1.pack()\par
\par
button.mainloop()\par
\par
\cf3 # Let's reposition the tkinter button and its label by invoking the 'side=TOP' statement\par
# for the label and the 'side=LEFT' statement for the tkinter button. See what happens\par
# when you type and execute/run the tkinter program example below.\par
\par
\cf1 from tkinter import*\par
\par
button=Tk()\par
\par
def call_the_def_function():\par
    label_1=Label(button,text=' "Python Programmer\\'s Glossary Bible" ')\par
    label_1.pack(side=TOP)\par
\par
button.geometry('500x500')\par
button_1=Button(button,text='Click Me!',command=call_the_def_function)\par
button_1.pack(side=LEFT)\par
\par
button.mainloop()\par
}
 